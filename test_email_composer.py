import asyncio
from utils.contact_finder import contact_finder
from database.contacts import contacts_manager, Contact

async def test_email_composer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å–µ–º"""
    
    print("–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –°–û–ó–î–ê–ù–ò–Ø –ü–ò–°–ï–ú")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 999999
    
    # 1. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    print("\n1. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:")
    print("-" * 30)
    
    test_queries = [
        "alex@example.com",  # –ü—Ä—è–º–æ–π email
        "–ê–ª–µ–∫—Å–µ–π",          # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        "–ø–∏—Å—å–º–æ –±–æ—Å—Å—É",     # AI –∞–Ω–∞–ª–∏–∑
        "test@mail.ru",     # –î—Ä—É–≥–æ–π email
        "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π",   # –ù–µ –Ω–∞–π–¥–µ–Ω–æ
    ]
    
    for query in test_queries:
        print(f"\n–ó–∞–ø—Ä–æ—Å: '{query}'")
        try:
            result = await contact_finder.find_recipient(query, test_user_id)
            print(f"  –¢–∏–ø: {result['type']}")
            print(f"  –ù–∞–π–¥–µ–Ω–æ: {result.get('found', False)}")
            if result.get('recipient_email'):
                print(f"  Email: {result['recipient_email']}")
            if result.get('message'):
                print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞: {e}")
    
    # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    print("\n\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
    print("-" * 30)
    
    test_contacts = [
        {
            'name': '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
            'email': 'alex.petrov@company.com',
            'company': '–¢–µ—Ö–ö–æ–º–ø–∞–Ω–∏—è'
        },
        {
            'name': '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞', 
            'email': 'maria@example.com',
            'company': '–î–∏–∑–∞–π–Ω-—Å—Ç—É–¥–∏—è'
        }
    ]
    
    created_contacts = []
    for contact_data in test_contacts:
        try:
            contact = Contact(
                name=contact_data['name'],
                email=contact_data['email'],
                company=contact_data['company']
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            success = await contacts_manager.add_contact(test_user_id, contact)
            if success:
                created_contacts.append(contact)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {contact.name} ({contact.email})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {contact.name}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 3. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    if created_contacts:
        print("\n\n3. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:")
        print("-" * 40)
        
        search_queries = [
            "–ê–ª–µ–∫—Å–µ–π",
            "–ú–∞—Ä–∏—è",
            "alex",
            "company",
            "–¥–∏–∑–∞–π–Ω"
        ]
        
        for query in search_queries:
            print(f"\n–ü–æ–∏—Å–∫: '{query}'")
            try:
                result = await contact_finder.find_recipient(query, test_user_id)
                print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['type']}")
                
                if result.get('found'):
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω: {result['recipient_name']} ({result['recipient_email']})")
                elif result['type'] == 'multiple_matches':
                    print(f"  üîç –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(result['matches'])}")
                    for i, match in enumerate(result['matches'][:3], 1):
                        contact = match['contact']
                        print(f"    {i}. {contact.name} ({contact.email}) - score: {match['score']:.2f}")
                else:
                    print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞: {e}")
    
    # 4. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n\n4. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 30)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_contacts = await contacts_manager.get_user_contacts(test_user_id)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        for contact in all_contacts:
            if contact.name in ['–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞']:
                success = await contacts_manager.delete_contact(test_user_id, contact.id)
                if success:
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {contact.name}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {contact.name}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    print("\n" + "=" * 50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ email: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚Ä¢ AI –∞–Ω–∞–ª–∏–∑: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
    print("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    asyncio.run(test_email_composer())