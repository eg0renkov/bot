"""–¢–µ—Å—Ç HTML —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ Telegram API"""

from utils.html_utils import escape_html, truncate_and_escape

def test_email_escaping():
    """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤"""
    
    print("–¢–ï–°–¢ HTML –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    test_cases = [
        {
            'name': 'Email —Å —Å–∏–º–≤–æ–ª–∞–º–∏ <>&',
            'input': 'inform@emails.example.com <noreply@test.com>',
            'expected_safe': True
        },
        {
            'name': '–¢–µ–º–∞ —Å HTML —Ç–µ–≥–∞–º–∏',
            'input': '<script>alert("test")</script>–í–∞–∂–Ω–æ–µ –ø–∏—Å—å–º–æ',
            'expected_safe': True
        },
        {
            'name': '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–º',
            'input': 'Johnson & Johnson <info@jnj.com>',
            'expected_safe': True
        },
        {
            'name': '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç',
            'input': '–û–±—ã—á–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –ê–ª–µ–∫—Å–µ—è',
            'expected_safe': True
        },
        {
            'name': '–î–ª–∏–Ω–Ω—ã–π email',
            'input': '–æ—á–µ–Ω—å-–¥–ª–∏–Ω–Ω—ã–π-–∞–¥—Ä–µ—Å-–ø–æ—á—Ç—ã@–æ—á–µ–Ω—å-–¥–ª–∏–Ω–Ω—ã–π-–¥–æ–º–µ–Ω-—Å–∞–π—Ç–∞.com <test@example.org>',
            'expected_safe': True
        }
    ]
    
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ escape_html:")
    print("-" * 30)
    
    for test_case in test_cases:
        original = test_case['input']
        escaped = escape_html(original)
        
        print(f"\n–¢–µ—Å—Ç: {test_case['name']}")
        print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª: {original}")
        print(f"  –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω: {escaped}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
        safe = all(char not in escaped for char in ['<', '>', '&'] if char in original and f'&{{"<": "lt", ">": "gt", "&": "amp"}}[char];' not in escaped)
        
        if '<' in original and '&lt;' not in escaped:
            print(f"  [WARNING] –°–∏–º–≤–æ–ª < –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω")
        if '>' in original and '&gt;' not in escaped:
            print(f"  [WARNING] –°–∏–º–≤–æ–ª > –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω") 
        if '&' in original and '&amp;' not in escaped and not any(entity in escaped for entity in ['&lt;', '&gt;', '&amp;']):
            print(f"  [WARNING] –°–∏–º–≤–æ–ª & –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω")
            
        print(f"  [OK] –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    print("\n\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ truncate_and_escape:")
    print("-" * 30)
    
    for test_case in test_cases:
        original = test_case['input']
        truncated = truncate_and_escape(original, 30)  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
        
        print(f"\n–¢–µ—Å—Ç: {test_case['name']}")
        print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª ({len(original)} —Å–∏–º–≤.): {original}")
        print(f"  –û–±—Ä–µ–∑–∞–Ω –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω: {truncated}")
        
        if len(original) > 30:
            print(f"  [OK] –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω —Å {len(original)} –¥–æ {len(truncated)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print(f"  [OK] –¢–µ–∫—Å—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª –æ–±—Ä–µ–∑–∫–∏")
    
    print("\n\n3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Å–ª—É—á–∞—è –∏–∑ –æ—à–∏–±–∫–∏:")
    print("-" * 30)
    
    # –í–æ—Å—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π –∏–∑ –æ—à–∏–±–∫–∏
    problematic_email = "inform@emails.example.com"
    escaped_email = escape_html(problematic_email)
    
    print(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π email: {problematic_email}")
    print(f"–ü–æ—Å–ª–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {escaped_email}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª @ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º
    if '@' in escaped_email:
        print("[OK] –°–∏–º–≤–æ–ª @ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
    mock_search_result = {
        'sender': 'inform@emails.example.com <noreply@service.com>',
        'subject': '–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ <URGENT>',
        'date': '2024-01-15 10:30'
    }
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ –∫–æ–¥–µ
    sender_escaped = truncate_and_escape(mock_search_result['sender'], 25)
    subject_escaped = truncate_and_escape(mock_search_result['subject'], 35)
    date_escaped = escape_html(str(mock_search_result['date'][:16]))
    
    formatted_result = f"<b>1.</b> üë§ {sender_escaped}\n"
    formatted_result += f"üìù {subject_escaped}\n"
    formatted_result += f"üïê {date_escaped}\n"
    
    print(f"\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram:")
    print(formatted_result)
    print("[OK] –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram API")
    
    print("\n" + "=" * 50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("[OK] HTML —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("[OK] –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç") 
    print("[OK] –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("[OK] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!")

if __name__ == "__main__":
    test_email_escaping()