from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.contacts import contacts_manager, Contact
from utils.html_utils import escape_html, escape_email
import re

router = Router()

class ContactStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    adding_name = State()
    adding_email = State()
    adding_phone = State()
    adding_telegram = State()
    adding_company = State()
    adding_position = State()
    adding_notes = State()
    adding_tags = State()
    editing_contact = State()
    searching = State()

def create_contacts_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üë• –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_list"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="contacts_add"),
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", callback_data="contacts_search"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="contacts_stats"),
        InlineKeyboardButton(text="üè∑Ô∏è –ü–æ —Ç–µ–≥–∞–º", callback_data="contacts_tags"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")
    )
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup()

def create_contact_actions_menu(contact_id: str):
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"contact_edit_{contact_id}"),
        InlineKeyboardButton(text="üìß –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", callback_data=f"contact_email_{contact_id}"),
        InlineKeyboardButton(text="üì± –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"contact_call_{contact_id}"),
        InlineKeyboardButton(text="üì≤ Telegram", callback_data=f"contact_telegram_{contact_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"contact_delete_{contact_id}"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="contacts_list")
    )
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup()

def create_cancel_button():
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="contacts_cancel"))
    return builder.as_markup()

@router.callback_query(F.data == "contacts_menu")
async def contacts_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏</b>\n\n"
        "üì± –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n"
        "‚Ä¢ Email –∞–¥—Ä–µ—Å–∞\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞\n"
        "‚Ä¢ Telegram –Ω–∏–∫–Ω–µ–π–º—ã\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö\n"
        "‚Ä¢ –¢–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏\n\n"
        "üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=create_contacts_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "contacts_list")
async def contacts_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    user_id = callback.from_user.id
    contacts = await contacts_manager.get_all_contacts(user_id)
    
    if not contacts:
        await callback.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
            "‚ûï –ù–∞–∂–º–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
            reply_markup=create_contacts_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contacts_text = f"üë• <b>–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ({len(contacts)})</b>\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for i, contact in enumerate(contacts[:10]):
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        info_parts = []
        if contact.email:
            info_parts.append("üìß")
        if contact.phone:
            info_parts.append("üì±")
        if contact.telegram:
            info_parts.append("üì≤")
        
        info_str = " ".join(info_parts)
        button_text = f"{contact.name} {info_str}".strip()
        
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"contact_view_{contact.id}"
        ))
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    if len(contacts) > 10:
        builder.add(InlineKeyboardButton(
            text=f"üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ({len(contacts) - 10} –µ—â–µ)",
            callback_data="contacts_list_all"
        ))
    
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        contacts_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("contact_view_"))
async def contact_view(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact_id = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    
    contact = await contacts_manager.find_contact(user_id, contact_id)
    if not contact:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ</b>\n\n{contact.format_display()}",
        reply_markup=create_contact_actions_menu(contact_id),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "contacts_add")
async def contacts_add_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>\n\n"
        "üë§ <b>–®–∞–≥ 1 –∏–∑ 8: –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞)\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=create_cancel_button(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.adding_name)
    await callback.answer()

@router.message(ContactStates.adding_name)
async def contacts_add_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer(
            "‚ùå <b>–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):",
            reply_markup=create_cancel_button(),
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    user_id = message.from_user.id
    existing_contacts = await contacts_manager.get_all_contacts(user_id)
    if any(c.name.lower() == name.lower() for c in existing_contacts):
        await message.answer(
            f"‚ö†Ô∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç —Å –∏–º–µ–Ω–µ–º \"{name}\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π:",
            reply_markup=create_cancel_button(),
            parse_mode="HTML"
        )
        return
    
    await state.update_data(name=name)
    
    await message.answer(
        f"‚úÖ <b>–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ:</b> {name}\n\n"
        "üìß <b>–®–∞–≥ 2 –∏–∑ 8: Email –∞–¥—Ä–µ—Å</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: ivan@example.com)\n\n"
        "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ email –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=create_cancel_button(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.adding_email)

@router.message(ContactStates.adding_email)
async def contacts_add_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ email"""
    email = message.text.strip()
    
    if email != "-":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email
        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        if not re.match(email_pattern, email):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å</b>\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email:\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: ivan@example.com)\n\n"
                "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
                reply_markup=create_cancel_button(),
                parse_mode="HTML"
            )
            return
    else:
        email = ""
    
    await state.update_data(email=email)
    
    data = await state.get_data()
    name = data.get('name', '')
    
    await message.answer(
        f"‚úÖ <b>Email –ø—Ä–∏–Ω—è—Ç:</b> {email if email else '–ø—Ä–æ–ø—É—â–µ–Ω'}\n\n"
        f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {name}\n\n"
        "üì± <b>–®–∞–≥ 3 –∏–∑ 8: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67)\n\n"
        "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=create_cancel_button(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.adding_phone)

@router.message(ContactStates.adding_phone)
async def contacts_add_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    if phone != "-":
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã)
        if not re.search(r'\d', phone):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67)\n\n"
                "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
                reply_markup=create_cancel_button(),
                parse_mode="HTML"
            )
            return
    else:
        phone = ""
    
    await state.update_data(phone=phone)
    
    data = await state.get_data()
    name = data.get('name', '')
    
    await message.answer(
        f"‚úÖ <b>–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω—è—Ç:</b> {phone if phone else '–ø—Ä–æ–ø—É—â–µ–Ω'}\n\n"
        f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {name}\n\n"
        "üì≤ <b>–®–∞–≥ 4 –∏–∑ 8: Telegram</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ Telegram –Ω–∏–∫–Ω–µ–π–º:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ username)\n\n"
        "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=create_cancel_button(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.adding_telegram)

@router.message(ContactStates.adding_telegram)
async def contacts_add_telegram(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ Telegram"""
    telegram = message.text.strip()
    
    if telegram != "-":
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        telegram = telegram.lstrip('@')
        if not re.match(r'^[a-zA-Z0-9_]{5,32}$', telegram):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram –Ω–∏–∫–Ω–µ–π–º</b>\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ username)\n\n"
                "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
                reply_markup=create_cancel_button(),
                parse_mode="HTML"
            )
            return
    else:
        telegram = ""
    
    await state.update_data(telegram=telegram)
    
    data = await state.get_data()
    name = data.get('name', '')
    
    await message.answer(
        f"‚úÖ <b>Telegram –ø—Ä–∏–Ω—è—Ç:</b> {('@' + telegram) if telegram else '–ø—Ä–æ–ø—É—â–µ–Ω'}\n\n"
        f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {name}\n\n"
        "üè¢ <b>–®–∞–≥ 5 –∏–∑ 8: –ö–æ–º–ø–∞–Ω–∏—è</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–û–û \"–†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞\")\n\n"
        "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=create_cancel_button(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.adding_company)

@router.message(ContactStates.adding_company)
async def contacts_add_company(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏"""
    company = message.text.strip() if message.text.strip() != "-" else ""
    
    await state.update_data(company=company)
    
    data = await state.get_data()
    name = data.get('name', '')
    
    await message.answer(
        f"‚úÖ <b>–ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∞:</b> {company if company else '–ø—Ä–æ–ø—É—â–µ–Ω–∞'}\n\n"
        f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {name}\n\n"
        "üíº <b>–®–∞–≥ 6 –∏–∑ 8: –î–æ–ª–∂–Ω–æ—Å—Ç—å</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º)\n\n"
        "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=create_cancel_button(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.adding_position)

@router.message(ContactStates.adding_position)
async def contacts_add_position(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    position = message.text.strip() if message.text.strip() != "-" else ""
    
    await state.update_data(position=position)
    
    data = await state.get_data()
    name = data.get('name', '')
    
    await message.answer(
        f"‚úÖ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞:</b> {position if position else '–ø—Ä–æ–ø—É—â–µ–Ω–∞'}\n\n"
        f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {name}\n\n"
        "üè∑Ô∏è <b>–®–∞–≥ 7 –∏–∑ 8: –¢–µ–≥–∏</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–±–æ—Ç–∞, –∫–ª–∏–µ–Ω—Ç, –≤–∞–∂–Ω—ã–π)\n\n"
        "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–≥–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=create_cancel_button(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.adding_tags)

@router.message(ContactStates.adding_tags)
async def contacts_add_tags(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ç–µ–≥–æ–≤"""
    tags_input = message.text.strip()
    tags = []
    
    if tags_input != "-":
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º
        tags = [tag.strip() for tag in tags_input.split(',') if tag.strip()]
    
    await state.update_data(tags=tags)
    
    data = await state.get_data()
    name = data.get('name', '')
    
    await message.answer(
        f"‚úÖ <b>–¢–µ–≥–∏ –ø—Ä–∏–Ω—è—Ç—ã:</b> {', '.join(tags) if tags else '–ø—Ä–æ–ø—É—â–µ–Ω—ã'}\n\n"
        f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {name}\n\n"
        "üìù <b>–®–∞–≥ 8 –∏–∑ 8: –ó–∞–º–µ—Ç–∫–∏</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏)\n\n"
        "‚è≠Ô∏è –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=create_cancel_button(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.adding_notes)

@router.message(ContactStates.adding_notes)
async def contacts_add_notes(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∑–∞–º–µ—Ç–æ–∫ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    notes = message.text.strip() if message.text.strip() != "-" else ""
    
    data = await state.get_data()
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    contact = Contact(
        name=data['name'],
        email=data.get('email', ''),
        phone=data.get('phone', ''),
        telegram=data.get('telegram', ''),
        company=data.get('company', ''),
        position=data.get('position', ''),
        notes=notes,
        tags=data.get('tags', [])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    success = await contacts_manager.add_contact(user_id, contact)
    
    if success:
        await message.answer(
            f"üéâ <b>–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n{contact.format_display()}\n\n"
            "üí° <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n"
            "‚Ä¢ –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏",
            reply_markup=create_contacts_menu(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é.",
            reply_markup=create_contacts_menu(),
            parse_mode="HTML"
        )
    
    await state.clear()

@router.callback_query(F.data == "contacts_cancel")
async def contacts_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
        reply_markup=create_contacts_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "contacts_stats")
async def contacts_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    user_id = callback.from_user.id
    stats = await contacts_manager.get_stats(user_id)
    
    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
    stats_text += f"üë• <b>–í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:</b> {stats['total']}\n"
    stats_text += f"üìß <b>–° email:</b> {stats['with_email']}\n"
    stats_text += f"üì± <b>–° —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º:</b> {stats['with_phone']}\n"
    stats_text += f"üì≤ <b>–° Telegram:</b> {stats['with_telegram']}\n\n"
    
    if stats['tags']:
        stats_text += "üè∑Ô∏è <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏:</b>\n"
        sorted_tags = sorted(stats['tags'].items(), key=lambda x: x[1], reverse=True)
        for tag, count in sorted_tags[:5]:
            stats_text += f"‚Ä¢ {tag}: {count}\n"
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=create_contacts_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "contacts_search")
async def contacts_search_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n"
        "‚Ä¢ –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞\n"
        "‚Ä¢ Email –∞–¥—Ä–µ—Å\n"
        "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "‚Ä¢ –¢–µ–≥\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=create_cancel_button(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.searching)
    await callback.answer()

@router.message(ContactStates.searching)
async def contacts_search_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer(
            "‚ùå <b>–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=create_cancel_button(),
            parse_mode="HTML"
        )
        return
    
    user_id = message.from_user.id
    results = await contacts_manager.search_contacts(user_id, query)
    
    if not results:
        await message.answer(
            f"üîç <b>–ü–æ–∏—Å–∫: \"{query}\"</b>\n\n"
            "‚ùå <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
            "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏\n"
            "‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –ø–æ —Ç–µ–≥—É –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏",
            reply_markup=create_contacts_menu(),
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    search_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"{query}\"</b>\n\n"
    search_text += f"üìä <b>–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:</b> {len(results)}\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for contact in results[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        info_parts = []
        if contact.email:
            info_parts.append("üìß")
        if contact.phone:
            info_parts.append("üì±")
        if contact.telegram:
            info_parts.append("üì≤")
        
        info_str = " ".join(info_parts)
        button_text = f"{contact.name} {info_str}".strip()
        
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"contact_view_{contact.id}"
        ))
    
    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ 10
    if len(results) > 10:
        builder.add(InlineKeyboardButton(
            text=f"üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ({len(results) - 10} –µ—â–µ)",
            callback_data=f"contacts_search_all_{query}"
        ))
    
    builder.add(
        InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="contacts_search"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu")
    )
    builder.adjust(1)
    
    await message.answer(
        search_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.callback_query(F.data == "contacts_tags")
async def contacts_tags_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ —Ç–µ–≥–∞–º"""
    user_id = callback.from_user.id
    stats = await contacts_manager.get_stats(user_id)
    
    if not stats['tags']:
        await callback.message.edit_text(
            "üè∑Ô∏è <b>–¢–µ–≥–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
            "‚ùå <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤</b>\n\n"
            "üí° –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏",
            reply_markup=create_contacts_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    sorted_tags = sorted(stats['tags'].items(), key=lambda x: x[1], reverse=True)
    
    tags_text = f"üè∑Ô∏è <b>–í–∞—à–∏ —Ç–µ–≥–∏ ({len(sorted_tags)})</b>\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for tag, count in sorted_tags:
        builder.add(InlineKeyboardButton(
            text=f"#{tag} ({count})",
            callback_data=f"contacts_tag_{tag}"
        ))
    
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu"))
    builder.adjust(2, 1)
    
    await callback.message.edit_text(
        tags_text + "üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("contacts_tag_"))
async def contacts_by_tag(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É"""
    tag = callback.data.replace("contacts_tag_", "")
    user_id = callback.from_user.id
    
    contacts = await contacts_manager.get_contacts_by_tag(user_id, tag)
    
    if not contacts:
        await callback.message.edit_text(
            f"üè∑Ô∏è <b>–¢–µ–≥: #{tag}</b>\n\n"
            "‚ùå <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>",
            reply_markup=create_contacts_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    tag_text = f"üè∑Ô∏è <b>–¢–µ–≥: #{tag}</b>\n\n"
    tag_text += f"üìä <b>–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤:</b> {len(contacts)}\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for contact in contacts:
        info_parts = []
        if contact.email:
            info_parts.append("üìß")
        if contact.phone:
            info_parts.append("üì±")
        if contact.telegram:
            info_parts.append("üì≤")
        
        info_str = " ".join(info_parts)
        button_text = f"{contact.name} {info_str}".strip()
        
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"contact_view_{contact.id}"
        ))
    
    builder.add(
        InlineKeyboardButton(text="üè∑Ô∏è –í—Å–µ —Ç–µ–≥–∏", callback_data="contacts_tags"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu")
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        tag_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("contact_delete_"))
async def contact_delete_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact_id = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    
    contact = await contacts_manager.find_contact(user_id, contact_id)
    if not contact:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"contact_delete_confirm_{contact_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"contact_view_{contact_id}")
    )
    builder.adjust(1, 1)
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"üóëÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç?\n\n"
        f"üë§ <b>{contact.name}</b>\n"
        f"üìß {contact.email if contact.email else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üì± {contact.phone if contact.phone else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("contact_delete_confirm_"))
async def contact_delete_execute(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact_id = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    
    contact = await contacts_manager.find_contact(user_id, contact_id)
    if not contact:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    success = await contacts_manager.delete_contact(user_id, contact_id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"üóëÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç \"{contact.name}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
            reply_markup=create_contacts_menu(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_contacts_menu(),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("contact_email_"))
async def contact_send_email(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    contact_id = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    
    contact = await contacts_manager.find_contact(user_id, contact_id)
    if not contact:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if not contact.email:
        await callback.answer("‚ùå –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç email –∞–¥—Ä–µ—Å–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üìß <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ</b>\n\n"
        f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {contact.name}\n"
        f"üìß <b>Email:</b> {escape_email(contact.email)}\n\n"
        f"üí° <b>–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ, –Ω–∞–ø–∏—à–∏—Ç–µ:</b>\n"
        f"\"–æ—Ç–ø—Ä–∞–≤—å {escape_email(contact.email)} –æ–± [—Ç–µ–º–∞ –ø–∏—Å—å–º–∞]\"\n\n"
        f"ü§ñ <b>–ò–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ AI –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ:</b>\n"
        f"\"–Ω–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ {contact.name} –æ –≤—Å—Ç—Ä–µ—á–µ\"",
        reply_markup=create_contact_actions_menu(contact_id),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("contact_call_"))
async def contact_call(callback: CallbackQuery):
    """–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    contact_id = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    
    contact = await contacts_manager.find_contact(user_id, contact_id)
    if not contact:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    print(f"DEBUG: Contact call - contact_id: {contact_id}, name: '{contact.name}', phone: '{contact.phone}', phone type: {type(contact.phone)}")
    
    if not contact.phone:
        await callback.answer("‚ùå –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"contact_view_{contact_id}")
    )
    builder.adjust(1, 1)
    
    await callback.message.edit_text(
        f"üìû <b>–ó–≤–æ–Ω–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—É</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {contact.name}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{contact.phone}</code>\n\n"
        f"üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("contact_telegram_"))
async def contact_telegram(callback: CallbackQuery):
    """–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    contact_id = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    
    contact = await contacts_manager.find_contact(user_id, contact_id)
    if not contact:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if not contact.telegram:
        await callback.answer("‚ùå –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç Telegram", show_alert=True)
        return
    
    telegram_username = contact.telegram.lstrip('@')
    telegram_url = f"https://t.me/{telegram_username}"
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url=telegram_url),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"contact_view_{contact_id}")
    )
    builder.adjust(1, 1)
    
    await callback.message.edit_text(
        f"üì≤ <b>Telegram –∫–æ–Ω—Ç–∞–∫—Ç</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {contact.name}\n"
        f"üì≤ <b>Telegram:</b> @{telegram_username}\n\n"
        f"üí¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –≤ Telegram",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("contact_edit_"))
async def contact_edit_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact_id = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    
    contact = await contacts_manager.find_contact(user_id, contact_id)
    if not contact:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(editing_contact_id=contact_id)
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_field_name_{contact_id}"),
        InlineKeyboardButton(text="üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data=f"edit_field_email_{contact_id}"),
        InlineKeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"edit_field_phone_{contact_id}"),
        InlineKeyboardButton(text="üì≤ –ò–∑–º–µ–Ω–∏—Ç—å Telegram", callback_data=f"edit_field_telegram_{contact_id}"),
        InlineKeyboardButton(text="üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", callback_data=f"edit_field_company_{contact_id}"),
        InlineKeyboardButton(text="üíº –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data=f"edit_field_position_{contact_id}"),
        InlineKeyboardButton(text="üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data=f"edit_field_tags_{contact_id}"),
        InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data=f"edit_field_notes_{contact_id}"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data=f"contact_view_{contact_id}")
    )
    builder.adjust(2, 2, 2, 2, 1)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>\n\n"
        f"{contact.format_display()}\n\n"
        "üîß <b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_field_"))
async def contact_edit_field(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    parts = callback.data.split("_")
    field = parts[2]
    contact_id = parts[3]
    
    user_id = callback.from_user.id
    contact = await contacts_manager.find_contact(user_id, contact_id)
    
    if not contact:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º –ø–æ–ª–µ
    await state.update_data(editing_contact_id=contact_id, editing_field=field)
    
    field_names = {
        'name': '–∏–º—è',
        'email': 'email',
        'phone': '—Ç–µ–ª–µ—Ñ–æ–Ω', 
        'telegram': 'Telegram',
        'company': '–∫–æ–º–ø–∞–Ω–∏—é',
        'position': '–¥–æ–ª–∂–Ω–æ—Å—Ç—å',
        'tags': '—Ç–µ–≥–∏',
        'notes': '–∑–∞–º–µ—Ç–∫–∏'
    }
    
    current_value = getattr(contact, field, '')
    if field == 'tags' and current_value:
        current_value = ', '.join(current_value)
    
    field_instructions = {
        'name': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
        'email': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –∞–¥—Ä–µ—Å:",
        'phone': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'telegram': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram –Ω–∏–∫–Ω–µ–π–º:",
        'company': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
        'position': "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        'tags': "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        'notes': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏:"
    }
    
    cancel_keyboard = InlineKeyboardBuilder()
    cancel_keyboard.add(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"contact_edit_{contact_id}")
    )
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å {field_names.get(field, field)}</b>\n\n"
        f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact.name}\n"
        f"üìù <b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {current_value if current_value else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"{field_instructions.get(field, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')}\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=cancel_keyboard.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(ContactStates.editing_contact)
    await callback.answer()

@router.message(ContactStates.editing_contact)
async def contact_edit_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    data = await state.get_data()
    contact_id = data.get('editing_contact_id')
    field = data.get('editing_field')
    
    if not contact_id or not field:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        await state.clear()
        return
    
    user_id = message.from_user.id
    contact = await contacts_manager.find_contact(user_id, contact_id)
    
    if not contact:
        await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    new_value = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    if field == 'name':
        if len(new_value) < 2:
            await message.answer(
                "‚ùå <b>–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ</b>\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):",
                parse_mode="HTML"
            )
            return
    elif field == 'email' and new_value != "":
        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        if not re.match(email_pattern, new_value):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å</b>\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email:",
                parse_mode="HTML"
            )
            return
    elif field == 'phone' and new_value != "":
        if not re.search(r'\d', new_value):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:",
                parse_mode="HTML"
            )
            return
    elif field == 'telegram' and new_value != "":
        new_value = new_value.lstrip('@')
        if not re.match(r'^[a-zA-Z0-9_]{5,32}$', new_value):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram –Ω–∏–∫–Ω–µ–π–º</b>\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:",
                parse_mode="HTML"
            )
            return
    elif field == 'tags':
        if new_value:
            new_value = [tag.strip() for tag in new_value.split(',') if tag.strip()]
        else:
            new_value = []
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if field == 'tags':
        contact.tags = new_value
    else:
        setattr(contact, field, new_value)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    success = await contacts_manager.update_contact(user_id, contact)
    
    if success:
        field_names = {
            'name': '–ò–º—è',
            'email': 'Email',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω', 
            'telegram': 'Telegram',
            'company': '–ö–æ–º–ø–∞–Ω–∏—è',
            'position': '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
            'tags': '–¢–µ–≥–∏',
            'notes': '–ó–∞–º–µ—Ç–∫–∏'
        }
        
        display_value = new_value
        if field == 'tags' and new_value:
            display_value = ', '.join(new_value)
        elif not new_value:
            display_value = "–£–¥–∞–ª–µ–Ω–æ"
        
        await message.answer(
            f"‚úÖ <b>–ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact.name}\n"
            f"üìù <b>{field_names.get(field, field)}:</b> {display_value}\n\n"
            f"üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        await message.answer(
            f"üìã <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n{contact.format_display()}",
            reply_markup=create_contact_actions_menu(contact_id),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            parse_mode="HTML"
        )
    
    await state.clear()