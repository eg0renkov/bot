import aiohttp
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import caldav
import requests
from icalendar import Calendar, Event
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config.settings import settings
from utils.keyboards import keyboards
from database.user_tokens import user_tokens
from utils.html_utils import escape_html, escape_email
from utils.calendar_reminder_sync import CalendarReminderSync

router = Router()

def create_reconnect_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="connect_yandex_calendar"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
    builder.adjust(2)
    return builder.as_markup()

def create_connect_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="connect_yandex_calendar"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
    builder.adjust(2)
    return builder.as_markup()

def create_back_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back"))
    return builder.as_markup()

def create_cancel_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="calendar_setup_cancel"))
    return builder.as_markup()

class YandexAuthStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_app_password = State()

class CalendarSetupStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_password = State()
    confirming_setup = State()

class CalendarStates(StatesGroup):
    creating_event = State()

class EmailComposerStates(StatesGroup):
    choosing_recipient = State()
    entering_subject = State()
    entering_body = State()
    reviewing_email = State()

class YandexIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    def __init__(self):
        self.client_id = settings.YANDEX_CLIENT_ID
        self.client_secret = settings.YANDEX_CLIENT_SECRET
        self.redirect_uri = "https://oauth.yandex.ru/verification_code"
    
    def get_auth_url(self, service: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –Ø–Ω–¥–µ–∫—Å"""
        base_url = "https://oauth.yandex.ru/authorize"
        
        if service == "mail":
            scope = "login:email login:info"  # –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ—á—Ç—ã
        elif service == "calendar":
            scope = "login:email login:info"  # –£ –Ø–Ω–¥–µ–∫—Å –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö scope –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        else:
            scope = "login:email login:info"
        
        params = {
            "response_type": "code",
            "client_id": self.client_id,
            "redirect_uri": self.redirect_uri,
            "scope": scope,
            "state": f"{service}_{datetime.now().timestamp()}"
        }
        
        query_string = "&".join([f"{k}={v}" for k, v in params.items()])
        return f"{base_url}?{query_string}"
    
    async def exchange_code_for_token(self, code: str) -> Optional[Dict]:
        """–û–±–º–µ–Ω—è—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–æ–∫–µ–Ω"""
        url = "https://oauth.yandex.ru/token"
        
        data = {
            "grant_type": "authorization_code",
            "code": code,
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "redirect_uri": self.redirect_uri
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    return await response.json()
        return None
    
    async def get_user_info(self, token: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        url = "https://login.yandex.ru/info"
        headers = {"Authorization": f"OAuth {token}"}
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    return await response.json()
        return None

class YandexMail:
    """–†–∞–±–æ—Ç–∞ —Å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–æ–π"""
    
    def __init__(self, token: str):
        self.token = token
        self.base_url = "https://api.mail.yandex.ru"
    
    async def get_folders(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫"""
        url = f"{self.base_url}/api/v1/folders"
        headers = {"Authorization": f"OAuth {self.token}"}
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("folders", [])
        return []
    
    async def get_messages(self, folder_id: str = "1", limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏"""
        url = f"{self.base_url}/api/v1/messages"
        headers = {"Authorization": f"OAuth {self.token}"}
        params = {
            "fid": folder_id,
            "count": limit,
            "offset": 0
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("messages", [])
        return []
    
    async def send_message(self, to: str, subject: str, body: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ"""
        url = f"{self.base_url}/api/v1/messages"
        headers = {
            "Authorization": f"OAuth {self.token}",
            "Content-Type": "application/json"
        }
        
        data = {
            "to": to,
            "subject": subject,
            "body": body,
            "content_type": "text/html"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                return response.status == 200

class YandexCalendar:
    """–ù–∞–¥–µ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—Å–µ—Ö –æ—à–∏–±–æ–∫"""
    
    def __init__(self, app_password: str, username: str):
        self.app_password = app_password
        self.username = username
        self.caldav_url = "https://caldav.yandex.ru"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ __init__
        # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        self.client = None
        self.principal = None
        self.calendars = []
        self.default_calendar = None
        self._connection_tested = False
        self._connection_successful = False
        
        print(f"DEBUG: YandexCalendar —Å–æ–∑–¥–∞–Ω –¥–ª—è {username}, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é")
    
    def _ensure_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)"""
        if self._connection_tested:
            return self._connection_successful
        
        try:
            print(f"DEBUG: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CalDAV –¥–ª—è {self.username}...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
            self.client = caldav.DAVClient(
                url=self.caldav_url,
                username=self.username,
                password=self.app_password,
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                ssl_verify_cert=True,
                timeout=30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            for attempt in range(3):
                try:
                    self.principal = self.client.principal()
                    self.calendars = self.principal.calendars()
                    break
                except Exception as e:
                    print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    if attempt == 2:  # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        raise e
                    import time
                    time.sleep(2)  # –∂–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            
            if self.calendars and len(self.calendars) > 0:
                self.default_calendar = self.calendars[0]
                self._connection_successful = True
                print(f"DEBUG: CalDAV –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {len(self.calendars)}")
            else:
                print("DEBUG: CalDAV –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self._connection_successful = False
            
        except Exception as e:
            print(f"DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è CalDAV: {e}")
            self.client = None
            self.principal = None
            self.calendars = []
            self.default_calendar = None
            self._connection_successful = False
        
        self._connection_tested = True
        return self._connection_successful
    
    async def ensure_connection_async(self) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        import asyncio
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self._ensure_connection)
    
    def get_events_sync(self, start_date: str, end_date: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ CalDAV (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫)"""
        try:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            if not self._ensure_connection():
                print("DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é")
                return []
            
            if not self.default_calendar:
                print("DEBUG: –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
            try:
                start_dt = datetime.fromisoformat(start_date.replace('Z', '+00:00'))
                end_dt = datetime.fromisoformat(end_date.replace('Z', '+00:00'))
            except ValueError as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç: {e}")
                return []
            
            print(f"DEBUG: –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π —Å {start_dt} –ø–æ {end_dt}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            events = None
            for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
                try:
                    events = self.default_calendar.date_search(start=start_dt, end=end_dt)
                    break
                except Exception as e:
                    print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    if attempt == 2:  # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        raise e
                    import time
                    time.sleep(1)  # –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            
            if not events:
                print("DEBUG: –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            result = []
            for event in events:
                try:
                    cal = Calendar.from_ical(event.data)
                    for component in cal.walk():
                        if component.name == "VEVENT":
                            title = str(component.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                            start = component.get('dtstart')
                            end = component.get('dtend')
                            
                            event_data = {
                                "summary": title,
                                "start": {
                                    "dateTime": start.dt.isoformat() if start else ""
                                },
                                "end": {
                                    "dateTime": end.dt.isoformat() if end else ""
                                }
                            }
                            result.append(event_data)
                            print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {title}")
                
                except Exception as e:
                    print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
                    continue
            
            print(f"DEBUG: –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(result)}")
            return result
            
        except Exception as e:
            print(f"DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            self._connection_tested = False
            return []
    
    async def get_events(self, start_date: str, end_date: str) -> List[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        import asyncio
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self.get_events_sync, start_date, end_date)
    
    def create_event_sync(self, title: str, start_time: str, end_time: str, description: str = "") -> bool:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ CalDAV (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫)"""
        try:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            if not self._ensure_connection():
                print("DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
                return False
            
            if not self.default_calendar:
                print("DEBUG: –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
                return False
            
            # –°–æ–∑–¥–∞–µ–º iCalendar —Å–æ–±—ã—Ç–∏–µ
            cal = Calendar()
            cal.add('prodid', '-//Telegram Bot//CalDAV Event//EN')
            cal.add('version', '2.0')
            
            event = Event()
            event.add('summary', title)
            event.add('description', description)
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
            try:
                start_dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                end_dt = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
            except ValueError as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                return False
            
            event.add('dtstart', start_dt)
            event.add('dtend', end_dt)
            event.add('dtstamp', datetime.now())
            
            import uuid
            event.add('uid', str(uuid.uuid4()))
            
            cal.add_component(event)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
                try:
                    self.default_calendar.add_event(cal.to_ical().decode('utf-8'))
                    print(f"DEBUG: –°–æ–±—ã—Ç–∏–µ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
                    return True
                except Exception as e:
                    print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    if attempt == 2:  # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        raise e
                    import time
                    time.sleep(1)  # –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            
            return False
            
        except Exception as e:
            print(f"DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            self._connection_tested = False
            return False
    
    async def create_event(self, title: str, start_time: str, end_time: str, description: str = "") -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        import asyncio
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self.create_event_sync, title, start_time, end_time, description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
yandex_integration = YandexIntegration()

@router.callback_query(F.data == "mail_inbox")
async def mail_inbox_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞"""
    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    
    await callback.message.edit_text(
        "üì® <b>–í—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞</b>\n\n"
        "üîê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—á—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
        "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É\n"
        "2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n\n"
        "üìß –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–¥–µ—Å—å –±—É–¥—É—Ç:\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
        "‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ\n\n"
        "üöß <i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>",
        reply_markup=keyboards.back_button("menu_back"),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "mail_compose")
async def mail_compose_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—á—Ç—ã
    from utils.email_sender import email_sender
    if not await email_sender.can_send_email(user_id):
        await callback.message.edit_text(
            "‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞</b>\n\n"
            "üîê –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É\n"
            "2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n\n"
            "üí° –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–∏—Å—å–º–∞ —Å AI –ø–æ–º–æ—â—å—é\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ä–∞–∑—É –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏",
            reply_markup=keyboards.back_button("menu_back"),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞
    await callback.message.edit_text(
        "‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞</b>\n\n"
        "üéØ <b>–®–∞–≥ 1 –∏–∑ 3: –ü–æ–ª—É—á–∞—Ç–µ–ª—å</b>\n\n"
        "üìù –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n\n"
        "üë§ <b>–ü–æ –∏–º–µ–Ω–∏:</b> –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
        "<i>–ü—Ä–∏–º–µ—Ä: \"–ê–ª–µ–∫—Å–µ–π\" –∏–ª–∏ \"–ú–∞—Ä–∏—è\"</i>\n\n"
        "üìß <b>–ü–æ email:</b> –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–ø—Ä—è–º—É—é\n"
        "<i>–ü—Ä–∏–º–µ—Ä: \"alex@company.com\"</i>\n\n"
        "ü§ñ <b>–° AI –ø–æ–º–æ—â—å—é:</b> –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É\n"
        "<i>–ü—Ä–∏–º–µ—Ä: \"–ø–∏—Å—å–º–æ –±–æ—Å—Å—É –æ –æ—Ç–ø—É—Å–∫–µ\"</i>\n\n"
        "‚úçÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=keyboards.create_cancel_button("mail_compose_cancel"),
        parse_mode="HTML"
    )
    
    await state.set_state(EmailComposerStates.choosing_recipient)
    await callback.answer()

@router.callback_query(F.data == "calendar_today")
async def calendar_today_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è"""
    user_id = callback.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
    sync = CalendarReminderSync()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    token_data = await user_tokens.get_token_data(user_id, "calendar")
    
    if not token_data or not token_data.get("app_password"):
        await callback.message.edit_text(
            f"üìÖ <b>–°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
            "üîê <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å\n"
            "2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n\n"
            "üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
            reply_markup=create_connect_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è CalDAV
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º email, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        user_email = token_data.get("email")
        
        if not user_email:
            # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º user_info (–µ—Å–ª–∏ –µ—Å—Ç—å)
            user_info = token_data.get("user_info", {})
            user_email = user_info.get("default_email", user_info.get("email"))
        
        if not user_email:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å email —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –µ—Å—Ç—å access_token)
            access_token = token_data.get("access_token")
            if access_token:
                try:
                    headers = {"Authorization": f"OAuth {access_token}"}
                    async with aiohttp.ClientSession() as session:
                        async with session.get("https://login.yandex.ru/info", headers=headers) as response:
                            if response.status == 200:
                                user_data = await response.json()
                                user_email = user_data.get("default_email")
                except:
                    pass
        
        if not user_email:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —á–µ—Ä–µ–∑ CalDAV –Ω—É–∂–µ–Ω email.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å.",
                reply_markup=create_reconnect_keyboard(),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        app_password = token_data.get("app_password")
        if app_password:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
            calendar_client = YandexCalendar(app_password, user_email)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            connection_result = await calendar_client.ensure_connection_async()
            if not connection_result:
                await callback.message.edit_text(
                    "üìÖ <b>–°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n"
                    "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä–µ–º\n\n"
                    "üí° –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:",
                    reply_markup=create_reconnect_keyboard(),
                    parse_mode="HTML"
                )
                await callback.answer()
                return
        else:
            # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —Å OAuth —Ç–æ–∫–µ–Ω–æ–º (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è CalDAV)
            await callback.message.edit_text(
                "üìÖ <b>–°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
                "‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
                "OAuth —Ç–æ–∫–µ–Ω—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è CalDAV.\n\n"
                "üí° –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø–∞—Ä–æ–ª–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
                reply_markup=create_reconnect_keyboard(),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now()
        start_date = today.strftime("%Y-%m-%dT00:00:00")
        end_date = today.strftime("%Y-%m-%dT23:59:59")
        
        print(f"DEBUG: –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {user_id}, email: {user_email}...")
        events = await calendar_client.get_events(start_date, end_date)
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events) if events else 0}")
        
        if events:
            events_text = ""
            for event in events[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Å–æ–±—ã—Ç–∏–π
                title = event.get("summary", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                start = event.get("start", {}).get("dateTime", "")
                if start:
                    try:
                        event_time = datetime.fromisoformat(start.replace("Z", "+00:00"))
                        time_str = event_time.strftime("%H:%M")
                        events_text += f"‚Ä¢ {time_str} - {title}\n"
                    except:
                        events_text += f"‚Ä¢ {title}\n"
                else:
                    events_text += f"‚Ä¢ {title}\n"
            
            message_text = f"üìÖ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ {today.strftime('%d.%m.%Y')}</b>\n\n{events_text}"
            if len(events) > 5:
                message_text += f"\n... –∏ –µ—â–µ {len(events) - 5} —Å–æ–±—ã—Ç–∏–π"
        else:
            message_text = f"üìÖ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ {today.strftime('%d.%m.%Y')}</b>\n\nüÜì <i>–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç</i>"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboards.back_button("menu_back"),
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await callback.message.edit_text(
            f"üìÖ <b>–°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞—Ä–µ–ª\n"
            "‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å:",
            reply_markup=create_reconnect_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data == "calendar_create")
async def calendar_create_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    token_data = await user_tokens.get_token_data(user_id, "calendar") 
    
    if not token_data or not token_data.get("app_password"):
        await callback.message.edit_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            "üîê <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å\n"
            "2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n\n"
            "üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
            reply_markup=create_connect_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
        "üó£Ô∏è <b>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º!</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
        "‚Ä¢ \"–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00\"\n"
        "‚Ä¢ \"–°–æ–∑–≤–æ–Ω —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 10 —É—Ç—Ä–∞\"\n"
        "‚Ä¢ \"–û–±–µ–¥ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ 25 —á–∏—Å–ª–∞ –≤ 13:30\"\n"
        "‚Ä¢ \"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 14:00\"\n\n"
        "ü§ñ <b>AI –ø–æ–π–º–µ—Ç –∏ —Å–æ–∑–¥–∞—Å—Ç —Å–æ–±—ã—Ç–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º!</b>\n\n"
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –Ω–∞–≥–æ–≤–æ—Ä–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=create_back_keyboard(),
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    await state.set_state(CalendarStates.creating_event)
    await state.update_data(user_id=user_id)
    await callback.answer()

@router.callback_query(F.data == "connect_yandex_mail")
async def connect_mail_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É"""
    if not settings.YANDEX_CLIENT_ID:
        await callback.answer(
            "‚ùå Yandex OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ", 
            show_alert=True
        )
        return
    
    auth_url = yandex_integration.get_auth_url("mail")
    
    await callback.message.edit_text(
        "üîê <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—ã</b>\n\n"
        "üì± <b>–®–∞–≥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ –Ø–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç\n"
        "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É\n\n"
        "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Yandex OAuth\n"
        "‚Ä¢ –¢–æ–∫–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –ø–æ—á—Ç–µ\n\n"
        f"üåê <a href='{auth_url}'>üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É</a>\n\n"
        "üìã <i>–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É</i>",
        reply_markup=keyboards.back_button("menu_back"),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    await state.set_state(YandexAuthStates.waiting_for_code)
    await state.update_data(service="mail")
    
    await callback.answer()

def create_calendar_setup_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üìÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_setup_start"),
        InlineKeyboardButton(text="üîë –ß—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?", callback_data="calendar_setup_help"),
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data="calendar_setup_check"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")
    )
    builder.adjust(1, 1, 1, 1)
    return builder.as_markup()

def create_calendar_confirmation_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="calendar_setup_save"),
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="calendar_setup_edit_email"),
        InlineKeyboardButton(text="üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="calendar_setup_edit_password"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="calendar_setup_cancel")
    )
    builder.adjust(1, 2, 1)
    return builder.as_markup()

@router.callback_query(F.data == "connect_yandex_calendar")
async def connect_calendar_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    user_id = callback.from_user.id
    token_data = await user_tokens.get_token_data(user_id, "calendar")
    
    if token_data and token_data.get("app_password"):
        await callback.message.edit_text(
            "‚úÖ <b>–Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
            "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚Ä¢ ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≥–æ–ª–æ—Å–æ–º\n"
            "‚Ä¢ ü§ñ AI –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è\n"
            "‚Ä¢ üìù –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ: \"–¥–æ–±–∞–≤—å –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00\"",
            reply_markup=create_calendar_setup_menu(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "üìÖ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
            "üöÄ <b>–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ:</b>\n"
            "‚Ä¢ üìÖ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º\n"
            "‚Ä¢ üëÄ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å\n"
            "‚Ä¢ üîç –ò—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
            "‚Ä¢ ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Å AI\n"
            "‚Ä¢ ‚è∞ –ü–æ–ª—É—á–∞—Ç—å —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "‚ö° <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–π–º–µ—Ç 3 –º–∏–Ω—É—Ç—ã</b>\n\n"
            "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ø–Ω–¥–µ–∫—Å",
            reply_markup=create_calendar_setup_menu(),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data == "calendar_setup_start")
async def calendar_setup_step1(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 1: –í–≤–æ–¥ email –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    cancel_keyboard = create_cancel_keyboard()
    
    await callback.message.edit_text(
        "üìÖ <b>–®–∞–≥ 1 –∏–∑ 3: –í–∞—à email</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –æ—Ç –Ø–Ω–¥–µ–∫—Å:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: your_name@yandex.ru)\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞:\n"
        "‚Ä¢ @yandex.ru\n"
        "‚Ä¢ @yandex.com\n"
        "‚Ä¢ @ya.ru\n"
        "‚Ä¢ @narod.ru\n\n"
        "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à email –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
        reply_markup=cancel_keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(CalendarSetupStates.waiting_for_email)
    await callback.answer()

@router.callback_query(F.data == "calendar_setup_help")
async def calendar_setup_help(callback: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞—Ä–æ–ª—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    await callback.message.edit_text(
        "üîë <b>–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
        "üì± <b>–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b> - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ "
        "–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –Ø–Ω–¥–µ–∫—Å —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "üõ°Ô∏è <b>–≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ:</b>\n"
        "‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n"
        "‚Ä¢ –ù–µ –¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É\n\n"
        "üìã <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
        "1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –Ω–∞ <b>id.yandex.ru</b>\n"
        "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>\"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\"</b>\n"
        "3Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ <b>\"–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é\"</b> (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞)\n"
        "4Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ <b>\"–ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\"</b>\n"
        "5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ <b>\"–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å\"</b>\n"
        "6Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>\"Telegram Bot –ö–∞–ª–µ–Ω–¥–∞—Ä—å\"</b>\n"
        "7Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å\n\n"
        "üí° <b>–ü–∞—Ä–æ–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:</b> <code>abcdabcdabcdabcd</code>\n\n"
        "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –ù–∞–ø–∏—à–∏—Ç–µ \"–ø–æ–º–æ—â—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è\"",
        reply_markup=create_calendar_setup_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "calendar_setup_check")
async def calendar_setup_check(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    user_id = callback.from_user.id
    token_data = await user_tokens.get_token_data(user_id, "calendar")
    
    if token_data and token_data.get("app_password"):
        email = token_data.get("email", "–ù–µ —É–∫–∞–∑–∞–Ω")
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        check_time = datetime.now().strftime("%H:%M:%S")
        await callback.message.edit_text(
            f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
            f"üìß <b>Email:</b> {escape_email(email)}\n"
            f"üîó <b>–ü—Ä–æ—Ç–æ–∫–æ–ª:</b> CalDAV (caldav.yandex.ru)\n"
            f"üîê <b>–ü–∞—Ä–æ–ª—å:</b> ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\n"
            f"üïê <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> {check_time}\n\n"
            "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n\n"
            "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ \"–¥–æ–±–∞–≤—å –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00\"\n"
            "‚Ä¢ \"–ø–æ–∫–∞–∂–∏ —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è\"\n"
            "‚Ä¢ \"—Å–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –æ–±–µ–¥ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –ø—è—Ç–Ω–∏—Ü–∞ 13:30\"\n\n"
            "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b> –ó–∞–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∏ —Å–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!",
            reply_markup=create_calendar_setup_menu(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
            "üìù <b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ \"üìÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å\"\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n\n"
            "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –ù–∞–∂–º–∏—Ç–µ \"üîë –ß—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?\"",
            reply_markup=create_calendar_setup_menu(),
            parse_mode="HTML"
        )
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
async def save_user_token(user_id: int, service: str, token_data: Dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await user_tokens.save_token(user_id, service, token_data)

async def get_user_token(user_id: int, service: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await user_tokens.get_token(user_id, service)

async def refresh_token(user_id: int, service: str) -> Optional[str]:
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@router.message(CalendarSetupStates.waiting_for_email)
async def calendar_setup_email_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    email = message.text.strip().lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email
    import re
    if not re.match(r'^[a-zA-Z0-9._%+-]+@(yandex\.(ru|com)|ya\.ru|narod\.ru)$', email):
        await message.answer(
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email!</b>\n\n"
            "‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã:</b>\n"
            "‚Ä¢ @yandex.ru\n"
            "‚Ä¢ @yandex.com\n"
            "‚Ä¢ @ya.ru\n"
            "‚Ä¢ @narod.ru\n\n"
            "üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è
    await state.update_data(calendar_email=email)
    
    cancel_keyboard = create_cancel_keyboard()
    
    await message.answer(
        "üîë <b>–®–∞–≥ 2 –∏–∑ 3: –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        f"‚úÖ Email –ø—Ä–∏–Ω—è—Ç: <code>{email}</code>\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å:</b>\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ id.yandex.ru ‚Üí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
        "2. –ù–∞–π–¥–∏—Ç–µ \"–ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\"\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å\n\n"
        "üîê <b>–ü—Ä–∏–º–µ—Ä –ø–∞—Ä–æ–ª—è:</b> <code>abcdabcdabcdabcd</code>\n\n"
        "‚úèÔ∏è <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>",
        reply_markup=cancel_keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(CalendarSetupStates.waiting_for_password)

@router.message(CalendarSetupStates.waiting_for_password)
async def calendar_setup_password_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    app_password = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–æ–±—ã—á–Ω–æ 16 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(app_password) < 12:
        await message.answer(
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!</b>\n\n"
            "‚ùó –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "üí° –û–±—ã—á–Ω–æ —ç—Ç–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∏–¥–∞: abcdabcdabcdabcd\n\n"
            "üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    email = data.get('calendar_email')
    
    if not email:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> Email –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(calendar_password=app_password)
    
    await message.answer(
        "‚úÖ <b>–®–∞–≥ 3 –∏–∑ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n"
        "üìù <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üìß <b>Email:</b> {email}\n"
        f"üîë <b>–ü–∞—Ä–æ–ª—å:</b> {'*' * (len(app_password) - 4) + app_password[-4:]}\n\n"
        "üîç –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CalDAV.\n\n"
        "‚ÑπÔ∏è <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>",
        reply_markup=create_calendar_confirmation_menu(),
        parse_mode="HTML"
    )
    
    await state.set_state(CalendarSetupStates.confirming_setup)

@router.callback_query(F.data == "calendar_setup_save")
async def calendar_setup_save(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    data = await state.get_data()
    email = data.get('calendar_email')
    app_password = data.get('calendar_password')
    
    if not email or not app_password:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=create_calendar_setup_menu(),
            parse_mode="HTML"
        )
        await state.clear()
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.edit_text(
        "üîÑ <b>–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</b>\n\n"
        "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ CalDAV...\n"
        "üîç –ü–æ–∏—Å–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π...\n\n"
        "‚è≥ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>",
        parse_mode="HTML"
    )
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –Ω–∞–¥–µ–∂–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
        test_calendar = YandexCalendar(app_password, email)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        connection_result = await test_calendar.ensure_connection_async()
        
        if connection_result and test_calendar.default_calendar:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            calendar_data = {
                "app_password": app_password,
                "email": email,
                "setup_date": datetime.now().isoformat(),
                "test_result": {
                    "success": True,
                    "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CalDAV —É—Å–ø–µ—à–Ω–æ"
                }
            }
            
            await save_user_token(callback.from_user.id, "calendar", calendar_data)
            
            await callback.message.edit_text(
                f"‚úÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
                f"üìß <b>Email:</b> {escape_email(email)}\n"
                f"üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä–µ–π –Ω–∞–π–¥–µ–Ω–æ:</b> {len(test_calendar.calendars)}\n"
                f"üîó <b>–ü—Ä–æ—Ç–æ–∫–æ–ª:</b> CalDAV —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤\n"
                f"üõ°Ô∏è <b>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</b> 3 –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
                f"üéâ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n"
                f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–º\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                f"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b> \"–¥–æ–±–∞–≤—å –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:00\"",
                reply_markup=keyboards.back_button("menu_back"),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é</b>\n\n"
                "üò¢ <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email\n"
                "‚Ä¢ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–æ–∑–≤–∞–Ω\n"
                "‚Ä¢ –ù–µ –≤–∫–ª—é—á–µ–Ω–∞ 2FA –≤ –∞–∫–∫–∞—É–Ω—Ç–µ\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n\n"
                "üîÑ <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>\n"
                "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
                "2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
                "3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ 2FA –≤–∫–ª—é—á–µ–Ω–∞\n"
                "4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                reply_markup=create_calendar_setup_menu(),
                parse_mode="HTML"
            )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
            f"üö´ {str(e)}\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.",
            reply_markup=create_calendar_setup_menu(),
            parse_mode="HTML"
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "calendar_setup_edit_email")
async def calendar_setup_edit_email(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å email"""
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –æ—Ç –Ø–Ω–¥–µ–∫—Å:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: your_name@yandex.ru)\n\n"
        "‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã:</b>\n"
        "‚Ä¢ @yandex.ru ‚Ä¢ @yandex.com\n"
        "‚Ä¢ @ya.ru ‚Ä¢ @narod.ru",
        parse_mode="HTML"
    )
    
    await state.set_state(CalendarSetupStates.waiting_for_email)
    await callback.answer()

@router.callback_query(F.data == "calendar_setup_edit_password")
async def calendar_setup_edit_password(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"""
    await callback.message.edit_text(
        "üîë <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n"
        "üí° <b>–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</b>\n"
        "1. id.yandex.ru ‚Üí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
        "2. –ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
        "3. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π\n\n"
        "üîê <b>–ü—Ä–∏–º–µ—Ä:</b> <code>abcdabcdabcdabcd</code>",
        parse_mode="HTML"
    )
    
    await state.set_state(CalendarSetupStates.waiting_for_password)
    await callback.answer()

@router.callback_query(F.data == "calendar_setup_cancel")
async def calendar_setup_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await callback.message.edit_text(
        "‚ùå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "üîô –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é.",
        reply_markup=create_calendar_setup_menu(),
        parse_mode="HTML"
    )
    
    await state.clear()
    await callback.answer()

@router.message(YandexAuthStates.waiting_for_code)
async def process_auth_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ—á—Ç—ã"""
    text = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–∏—Å–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    service = data.get('service', 'unknown')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ OAuth –∫–æ–¥–∞ –¥–ª—è –ø–æ—á—Ç—ã
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –∏–∑ URL –∏–ª–∏ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞
    code = None
    if "code=" in text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ URL
        try:
            code = text.split("code=")[1].split("&")[0]
        except:
            pass
    else:
        # –ü—Ä—è–º–æ–π –≤–≤–æ–¥ –∫–æ–¥–∞
        code = text
    
    if not code:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π URL:")
        return
    
    try:
        # –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
        token_data = await yandex_integration.exchange_code_for_token(code)
        
        if token_data and 'access_token' in token_data:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await yandex_integration.get_user_info(token_data['access_token'])
            
            if user_info:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                token_data['user_info'] = user_info
                await save_user_token(message.from_user.id, service, token_data)
                
                service_name = "–Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–∞" if service == "mail" else "–Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
                
                await message.answer(
                    f"‚úÖ <b>{service_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!</b>\n\n"
                    f"üë§ <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {user_info.get('display_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"üìß <b>Email:</b> {escape_email(user_info.get('default_email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}\n\n"
                    f"üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ {service_name}!",
                    reply_markup=keyboards.back_button("menu_back"),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=keyboards.back_button("menu_back")
                )
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥:",
                reply_markup=keyboards.back_button("menu_back")
            )
    
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboards.back_button("menu_back")
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.message(CalendarStates.creating_event)
async def create_calendar_event(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞"""
    try:
        user_data = await state.get_data()
        user_id = user_data.get("user_id")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token_data = await user_tokens.get_token_data(user_id, "calendar")
        if not token_data or not token_data.get("app_password"):
            await message.answer("‚ùå –¢–æ–∫–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.")
            await state.clear()
            return
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò
        from utils.openai_client import openai_client
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:

–¢–µ–∫—Å—Ç: "{message.text}"

–í–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
    "start_time": "YYYY-MM-DDTHH:MM:SS",
    "end_time": "YYYY-MM-DDTHH:MM:SS",
    "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"
}}

–ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≤—Ç—Ä–∞
- –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π 10:00
- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è 1 —á–∞—Å, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –¥—Ä—É–≥–æ–µ
- –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ UTC+3 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
- –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â–∏–π: 2025

–°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}"""

        messages = [{"role": "user", "content": prompt}]
        ai_response = await openai_client.chat_completion(messages, temperature=0.1)
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò
        try:
            import json
            event_data = json.loads(ai_response.strip().strip('```json').strip('```'))
        except:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ-–¥—Ä—É–≥–æ–º—É.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º email, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        user_email = token_data.get("email")
        
        if not user_email:
            # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º user_info (–µ—Å–ª–∏ –µ—Å—Ç—å)
            user_info = token_data.get("user_info", {})
            user_email = user_info.get("default_email", user_info.get("email"))
        
        if not user_email:
            user_email = "user@yandex.ru"  # Fallback
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è  
        app_password = token_data.get("app_password")
        if not app_password:
            await message.answer(
                "‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
                "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_client = YandexCalendar(app_password, user_email)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
        connection_result = await calendar_client.ensure_connection_async()
        if not connection_result:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—é.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        success = await calendar_client.create_event(
            title=event_data.get("title", "–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
            start_time=event_data.get("start_time"),
            end_time=event_data.get("end_time"),
            description=event_data.get("description", "")
        )
        
        if success:
            await message.answer(
                f"‚úÖ <b>–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event_data.get('title')}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {event_data.get('start_time', '').replace('T', ' ')}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}",
                parse_mode="HTML",
                reply_markup=keyboards.back_button("menu_back")
            )
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n"
                "‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n"
                "‚Ä¢ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª",
                parse_mode="HTML"
            )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å–µ–º
@router.message(EmailComposerStates.choosing_recipient)
async def process_recipient_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    user_input = message.text.strip()
    user_id = message.from_user.id
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        from utils.contact_finder import contact_finder
        result = await contact_finder.find_recipient(user_input, user_id)
        
        if result['type'] == 'direct_email':
            # –ü—Ä—è–º–æ–π email –Ω–∞–π–¥–µ–Ω
            await state.update_data(
                recipient_email=result['recipient_email'],
                recipient_name=result['recipient_name']
            )
            
            await message.answer(
                f"‚úÖ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"üìß Email: {escape_email(result['recipient_email'])}\n\n"
                f"üéØ <b>–®–∞–≥ 2 –∏–∑ 3: –¢–µ–º–∞ –ø–∏—Å—å–º–∞</b>\n\n"
                f"üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞:\n"
                f"<i>–ü—Ä–∏–º–µ—Ä: \"–í—Å—Ç—Ä–µ—á–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É\" –∏–ª–∏ \"–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü\"</i>",
                parse_mode="HTML",
                reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
            )
            await state.set_state(EmailComposerStates.entering_subject)
            
        elif result['type'] == 'contact_found':
            # –ö–æ–Ω—Ç–∞–∫—Ç –∏–∑ –±–∞–∑—ã –Ω–∞–π–¥–µ–Ω
            await state.update_data(
                recipient_email=result['recipient_email'],
                recipient_name=result['recipient_name'],
                contact_id=result.get('contact_id')
            )
            
            await message.answer(
                f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ò–º—è: {escape_html(result['recipient_name'])}\n"
                f"üìß Email: {escape_email(result['recipient_email'])}\n\n"
                f"üéØ <b>–®–∞–≥ 2 –∏–∑ 3: –¢–µ–º–∞ –ø–∏—Å—å–º–∞</b>\n\n"
                f"üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞:",
                parse_mode="HTML",
                reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
            )
            await state.set_state(EmailComposerStates.entering_subject)
            
        elif result['type'] == 'multiple_matches':
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ
            response_text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
            response_text += f"–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ \"{user_input}\" –Ω–∞–π–¥–µ–Ω–æ:\n\n"
            
            for i, match in enumerate(result['matches'], 1):
                contact = match['contact']
                response_text += f"{i}. <b>{escape_html(contact.name)}</b>\n"
                if contact.email:
                    response_text += f"   üìß {escape_email(contact.email)}\n"
                if contact.company:
                    response_text += f"   üè¢ {escape_html(contact.company)}\n"
                response_text += "\n"
            
            response_text += "‚úçÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ (1, 2, 3...) –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</i>"
            
            await message.answer(
                response_text,
                parse_mode="HTML",
                reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
            await state.update_data(contact_matches=result['matches'])
            
        elif result['type'] == 'ai_analysis':
            # AI –∞–Ω–∞–ª–∏–∑
            analysis = result['analysis']
            
            if analysis.get('recipient_type') == 'contact_name':
                # AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–º—è - –∏—â–µ–º —Å–Ω–æ–≤–∞
                suggested_name = analysis.get('recipient_info', '')
                retry_result = await contact_finder.find_recipient(suggested_name, user_id)
                
                if retry_result.get('found'):
                    await state.update_data(
                        recipient_email=retry_result['recipient_email'],
                        recipient_name=retry_result['recipient_name'],
                        suggested_subject=analysis.get('suggested_subject', '')
                    )
                    
                    subject_hint = ""
                    if analysis.get('suggested_subject'):
                        subject_hint = f"\nüí° <i>AI –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–º—É: \"{analysis['suggested_subject']}\"</i>"
                    
                    await message.answer(
                        f"ü§ñ <b>AI –Ω–∞—à–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç</b>\n\n"
                        f"üë§ {escape_html(retry_result['recipient_name'])}\n"
                        f"üìß {escape_email(retry_result['recipient_email'])}\n\n"
                        f"üéØ <b>–®–∞–≥ 2 –∏–∑ 3: –¢–µ–º–∞ –ø–∏—Å—å–º–∞</b>\n\n"
                        f"üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞:{subject_hint}",
                        parse_mode="HTML",
                        reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
                    )
                    await state.set_state(EmailComposerStates.entering_subject)
                else:
                    await message.answer(
                        f"ü§ñ <b>AI –∞–Ω–∞–ª–∏–∑</b>\n\n"
                        f"AI –ø–æ–Ω—è–ª, —á—Ç–æ –ø–∏—Å—å–º–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è: <b>{escape_html(analysis.get('recipient_info', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}</b>\n\n"
                        f"‚ùì –ù–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –±–∞–∑–µ.\n\n"
                        f"üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
                        f"‚Ä¢ –¢–æ—á–Ω–æ–µ –∏–º—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
                        f"‚Ä¢ –ò–ª–∏ email –∞–¥—Ä–µ—Å –Ω–∞–ø—Ä—è–º—É—é",
                        parse_mode="HTML",
                        reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
                    )
            else:
                # AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
                await message.answer(
                    f"ü§ñ <b>AI –∞–Ω–∞–ª–∏–∑</b>\n\n"
                    f"–ü–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è: <b>{escape_html(analysis.get('recipient_info', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}</b>\n\n"
                    f"‚ùì –ù–æ –Ω—É–∂–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å.\n\n"
                    f"üìù –£–∫–∞–∂–∏—Ç–µ:\n"
                    f"‚Ä¢ –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞\n"
                    f"‚Ä¢ –ò–ª–∏ email –∞–¥—Ä–µ—Å",
                    parse_mode="HTML",
                    reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
                )
        
        else:
            # –ù–µ –Ω–∞–π–¥–µ–Ω–æ
            await message.answer(
                f"‚ùì <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ \"{user_input}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                f"üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –¢–æ—á–Ω–æ–µ –∏–º—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
                f"‚Ä¢ Email –∞–¥—Ä–µ—Å (example@mail.com)\n"
                f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ (\"–ø–∏—Å—å–º–æ –±–æ—Å—Å—É\")\n\n"
                f"üí° –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ö–æ–Ω—Ç–∞–∫—Ç—ã\"",
                parse_mode="HTML",
                reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
            )
        
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ email –Ω–∞–ø—Ä—è–º—É—é.\n\n"
            f"<code>{str(e)[:100]}...</code>",
            parse_mode="HTML",
            reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
        )

@router.message(EmailComposerStates.entering_subject)
async def process_email_subject(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –ø–∏—Å—å–º–∞"""
    subject = message.text.strip()
    
    if not subject:
        await message.answer(
            "‚ùå <b>–¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π</b>\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞:",
            parse_mode="HTML",
            reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
        )
        return
    
    await state.update_data(subject=subject)
    
    data = await state.get_data()
    recipient_name = data.get('recipient_name', '–ü–æ–ª—É—á–∞—Ç–µ–ª—å')
    
    await message.answer(
        f"‚úÖ <b>–¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>\n\n"
        f"üìù –¢–µ–º–∞: {escape_html(subject)}\n\n"
        f"üéØ <b>–®–∞–≥ 3 –∏–∑ 3: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞</b>\n\n"
        f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        f"‚Ä¢ –ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞\n"
        f"‚Ä¢ \"–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ —Å –ø—Ä–æ—Å—å–±–æ–π –æ –≤—Å—Ç—Ä–µ—á–µ\"\n"
        f"‚Ä¢ \"–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ —Å–º–µ–Ω–µ –≥—Ä–∞—Ñ–∏–∫–∞\"\n\n"
        f"ü§ñ <i>AI –ø–æ–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç</i>",
        parse_mode="HTML",
        reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
    )
    
    await state.set_state(EmailComposerStates.entering_body)

@router.message(EmailComposerStates.entering_body)
async def process_email_body(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∏—Å—å–º–∞"""
    user_input = message.text.strip()
    
    if not user_input:
        await message.answer(
            "‚ùå <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º</b>\n\n"
            "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å:",
            parse_mode="HTML",
            reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
        )
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(
            "ü§ñ <b>AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...</b>\n\n"
            "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–∏—Å—å–º–æ...",
            parse_mode="HTML"
        )
        
        data = await state.get_data()
        recipient_name = data.get('recipient_name', '–ü–æ–ª—É—á–∞—Ç–µ–ª—å')
        subject = data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from utils.user_settings import user_settings
        user_id = message.from_user.id
        sender_name = await user_settings.get_or_request_name(
            user_id, 
            message.from_user.first_name
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞
        from utils.openai_client import openai_client
        
        prompt = f"""
–ü–æ–º–æ–≥–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

–ü–û–õ–£–ß–ê–¢–ï–õ–¨: {recipient_name}
–¢–ï–ú–ê: {subject}
–û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: {sender_name}
–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{user_input}"

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ - —Å–ª–µ–≥–∫–∞ —É–ª—É—á—à–∏ –µ–≥–æ (–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, —Å—Ç–∏–ª—å).
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å - —Å–æ–∑–¥–∞–π –ø–æ–ª–Ω–æ–µ –ø–∏—Å—å–º–æ.

–°–æ–∑–¥–∞–π –ø–∏—Å—å–º–æ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—É—á–∏—Ç—ã–≤–∞–π –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è)
2. –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
3. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

–í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å–∏: {sender_name}
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ø–æ–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
- –ü–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ–π: "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n{sender_name}"

–°—Ç–∏–ª—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π.
–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.
–î–ª–∏–Ω–∞: –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª—è —Ç–µ–º—ã.

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –ø–∏—Å—å–º–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""
        
        messages = [
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ. –°–æ–∑–¥–∞–µ—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π."},
            {"role": "user", "content": prompt}
        ]
        
        ai_response = await openai_client.chat_completion(messages)
        
        await state.update_data(body=ai_response, original_input=user_input)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await processing_msg.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_text = f"üìß <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å—å–º–∞</b>\n\n"
        preview_text += f"üë§ <b>–ö–æ–º—É:</b> {escape_html(recipient_name)}\n"
        preview_text += f"üìù <b>–¢–µ–º–∞:</b> {escape_html(subject)}\n\n"
        preview_text += f"üìÑ <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
        preview_text += f"<code>{escape_html(ai_response[:500])}</code>"
        
        if len(ai_response) > 500:
            preview_text += f"\n<i>... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)</i>"
        
        preview_text += f"\n\nüí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.add(
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="mail_send_confirm"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="mail_edit_body")
        )
        builder.add(
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data="mail_regenerate"),
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="mail_save_draft")
        )
        builder.add(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mail_compose_cancel")
        )
        
        builder.adjust(2, 2, 1)
        
        await message.answer(
            preview_text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(EmailComposerStates.reviewing_email)
        
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞</b>\n\n"
            f"<code>{str(e)[:100]}...</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
            parse_mode="HTML",
            reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞
@router.callback_query(F.data == "mail_compose_cancel")
async def cancel_email_composition(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ—á—Ç–µ",
        reply_markup=keyboards.mail_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–∏—Å—å–º–æ–º
@router.callback_query(F.data == "mail_send_confirm")
async def send_email_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞"""
    try:
        data = await state.get_data()
        user_id = callback.from_user.id
        
        recipient_email = data.get('recipient_email')
        recipient_name = data.get('recipient_name', recipient_email)
        subject = data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
        body = data.get('body', '')
        
        if not recipient_email or not body:
            await callback.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        await callback.message.edit_text(
            "üì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–∏—Å—å–º–æ...</b>\n\n"
            f"üë§ –ö–æ–º—É: {escape_html(recipient_name)}\n"
            f"üìß Email: {escape_email(recipient_email)}\n"
            f"üìù –¢–µ–º–∞: {escape_html(subject)}\n\n"
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        from utils.email_sender import email_sender
        success = await email_sender.send_email(user_id, recipient_email, subject, body)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {escape_html(recipient_name)}\n"
                f"üìß Email: {escape_email(recipient_email)}\n"
                f"üìù –¢–µ–º–∞: {escape_html(subject)}\n"
                f"üìÑ –†–∞–∑–º–µ—Ä: {len(body)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                "üéâ –ü–∏—Å—å–º–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                reply_markup=keyboards.mail_menu(),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –Ω–∞ {escape_email(recipient_email)}\n\n"
                "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã\n"
                "‚Ä¢ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π email –∞–¥—Ä–µ—Å\n\n"
                "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                reply_markup=keyboards.mail_menu(),
                parse_mode="HTML"
            )
        
        await state.clear()
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n"
            f"<code>{str(e)[:100]}...</code>\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            reply_markup=keyboards.mail_menu(),
            parse_mode="HTML"
        )
        await state.clear()
    
    await callback.answer()

@router.callback_query(F.data == "mail_regenerate")
async def regenerate_email_body(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –∑–∞–Ω–æ–≤–æ"""
    try:
        data = await state.get_data()
        original_input = data.get('original_input', '')
        recipient_name = data.get('recipient_name', '–ü–æ–ª—É—á–∞—Ç–µ–ª—å')
        subject = data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
        
        if not original_input:
            await callback.answer("‚ùå –ù–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from utils.user_settings import user_settings
        user_id = callback.from_user.id
        sender_name = await user_settings.get_or_request_name(
            user_id, 
            callback.from_user.first_name
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await callback.message.edit_text(
            "üîÑ <b>–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é –ø–∏—Å—å–º–æ...</b>\n\n"
            "ü§ñ AI —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...",
            parse_mode="HTML"
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        from utils.openai_client import openai_client
        
        prompt = f"""
–°–æ–∑–¥–∞–π –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–£–Æ –≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü–û–õ–£–ß–ê–¢–ï–õ–¨: {recipient_name}
–¢–ï–ú–ê: {subject}
–û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: {sender_name}
–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{original_input}"

–°–æ–∑–¥–∞–π –î–†–£–ì–û–ô –≤–∞—Ä–∏–∞–Ω—Ç –ø–∏—Å—å–º–∞ —Å:
- –ò–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫ –∏–∑–ª–æ–∂–µ–Ω–∏—é
- –î—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å—Ç–∏–ª–µ–º (–Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º)

–í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å–∏: {sender_name}
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ø–æ–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
- –ü–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ–π: "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n{sender_name}"

–ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é. –°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ.

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –ø–∏—Å—å–º–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""
        
        messages = [
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ. –°–æ–∑–¥–∞–µ—à—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∏—Å–µ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π."},
            {"role": "user", "content": prompt}
        ]
        
        new_body = await openai_client.chat_completion(messages)
        await state.update_data(body=new_body)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        preview_text = f"üîÑ <b>–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞</b>\n\n"
        preview_text += f"üë§ <b>–ö–æ–º—É:</b> {escape_html(recipient_name)}\n"
        preview_text += f"üìù <b>–¢–µ–º–∞:</b> {escape_html(subject)}\n\n"
        preview_text += f"üìÑ <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
        preview_text += f"<code>{escape_html(new_body[:500])}</code>"
        
        if len(new_body) > 500:
            preview_text += f"\n<i>... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)</i>"
        
        preview_text += f"\n\nüí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
        
        # –¢–∞ –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.add(
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="mail_send_confirm"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="mail_edit_body")
        )
        builder.add(
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data="mail_regenerate"),
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="mail_save_draft")
        )
        builder.add(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mail_compose_cancel")
        )
        
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            preview_text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è</b>\n\n"
            f"<code>{str(e)[:100]}...</code>",
            parse_mode="HTML",
            reply_markup=keyboards.create_cancel_button("mail_compose_cancel")
        )
    
    await callback.answer()

@router.callback_query(F.data == "mail_save_draft")
async def save_email_draft(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∏—Å—å–º–æ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"""
    try:
        from utils.drafts_manager import drafts_manager, Draft
        
        data = await state.get_data()
        user_id = callback.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        draft = Draft(
            recipient_email=data.get('recipient_email', ''),
            recipient_name=data.get('recipient_name', ''),
            subject=data.get('subject', ''),
            body=data.get('body', '')
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        success = await drafts_manager.save_draft(user_id, draft)
        
        if success:
            await callback.message.edit_text(
                "üíæ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                f"üìù –¢–µ–º–∞: {escape_html(data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã'))}\n"
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {escape_html(data.get('recipient_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}\n\n"
                "‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ \"üìã –ß–µ—Ä–Ω–æ–≤–∏–∫–∏\"\n\n"
                "üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ</i>",
                reply_markup=keyboards.mail_menu(),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                reply_markup=keyboards.mail_menu(),
                parse_mode="HTML"
            )
        
        await state.clear()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)[:50]}...", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data == "calendar_sync_reminders")
async def calendar_sync_reminders_handler(callback: CallbackQuery):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    user_id = callback.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
    sync = CalendarReminderSync()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    token_data = await user_tokens.get_token_data(user_id, "calendar")
    
    if not token_data or not token_data.get("app_password"):
        await callback.message.edit_text(
            "üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
            "üîê <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
            "–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å:",
            reply_markup=create_connect_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...</b>\n\n"
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è...",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
        today = datetime.now()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        email = token_data.get("email")
        app_password = token_data.get("app_password")
        
        if not email or not app_password:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å:",
                reply_markup=create_reconnect_keyboard(),
                parse_mode="HTML"
            )
            return
        
        synced_count = 0
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            tomorrow = today + timedelta(days=1)
            test_event_time = tomorrow.replace(hour=10, minute=0, second=0, microsecond=0)
            
            reminder_id = await sync.sync_calendar_event(
                user_id=user_id,
                event_title="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è",
                event_time=test_event_time,
                event_description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
            )
            
            if reminder_id:
                synced_count += 1
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if synced_count > 0:
                await callback.message.edit_text(
                    f"‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: <b>{synced_count}</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞.\n\n"
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ:\n"
                    "–ú–µ–Ω—é ‚Üí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    reply_markup=keyboards.calendar_menu(),
                    parse_mode="HTML"
                )
            else:
                await callback.message.edit_text(
                    "‚ÑπÔ∏è <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                    "üìÖ –ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –í—Å–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∏\n"
                    "‚Ä¢ –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π\n"
                    "‚Ä¢ –°–æ–±—ã—Ç–∏—è —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã",
                    reply_markup=keyboards.calendar_menu(),
                    parse_mode="HTML"
                )
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
                reply_markup=create_reconnect_keyboard(),
                parse_mode="HTML"
            )
    
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=keyboards.calendar_menu(),
            parse_mode="HTML"
        )
    
    await callback.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")