"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–µ–±-–ø–æ–∏—Å–∫–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.keyboards import BotKeyboards
from utils.web_search import web_searcher

def truncate_message(text: str, max_length: int = 3800) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
    if len(text) <= max_length:
        return text
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º
    lines = text.split('\n')
    result = ""
    
    for line in lines:
        if len(result + line + '\n') > max_length - 150:  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–µ–∑–∫–µ
            break
        result += line + '\n'
    
    result += "\nüìù _–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∫—Ä–∞—â–µ–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram (–º–∞–∫—Å. 4096 —Å–∏–º–≤–æ–ª–æ–≤)_\n\nüí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤_"
    
    return result

router = Router()
logger = logging.getLogger(__name__)

class WebSearchStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
    waiting_for_query = State()
    waiting_for_news_query = State()

keyboards = BotKeyboards()

@router.callback_query(F.data == "web_search")
async def web_search_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
    try:
        keyboard = keyboards.web_search_menu()
        
        text = """üåê **–í–µ–±-–ø–æ–∏—Å–∫**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:

üîç **–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫** - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
üì∞ **–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π** - —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
üí° **–£–º–Ω—ã–π –ø–æ–∏—Å–∫** - –ø–æ–∏—Å–∫ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ SERP API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""

        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞")

@router.callback_query(F.data == "web_search_general")
async def start_general_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫"""
    try:
        await state.set_state(WebSearchStates.waiting_for_query)
        
        keyboard = keyboards.create_cancel_button("web_search")
        
        await callback.message.edit_text(
            text="üîç **–û–±—ã—á–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞")

@router.callback_query(F.data == "web_search_news")
async def start_news_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        await state.set_state(WebSearchStates.waiting_for_news_query)
        
        keyboard = keyboards.create_cancel_button("web_search")
        
        await callback.message.edit_text(
            text="üì∞ **–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")

@router.callback_query(F.data == "web_search_smart")
async def start_smart_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É–º–Ω—ã–π –ø–æ–∏—Å–∫"""
    try:
        await state.set_state(WebSearchStates.waiting_for_query)
        await state.update_data(smart_search=True)
        
        keyboard = keyboards.create_cancel_button("web_search")
        
        await callback.message.edit_text(
            text="üí° **–£–º–Ω—ã–π –ø–æ–∏—Å–∫**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–∞—Å—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")

@router.message(WebSearchStates.waiting_for_query)
async def process_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    try:
        query = message.text.strip()
        if not query:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        search_msg = await message.answer("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        is_smart_search = data.get('smart_search', False)
        
        try:
            if is_smart_search:
                # –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
                result = await web_searcher.search_and_summarize(query)
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
                result = await web_searcher.quick_search(query)
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            result = truncate_message(result)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = keyboards.search_results_menu()
            
            await search_msg.edit_text(
                text=result,
                reply_markup=keyboard,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
        except Exception as search_error:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {search_error}")
            await search_msg.edit_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_error}",
                reply_markup=keyboards.back_button("web_search")
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=keyboards.back_button("web_search")
        )
        await state.clear()

@router.message(WebSearchStates.waiting_for_news_query)
async def process_news_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        query = message.text.strip()
        if not query:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        search_msg = await message.answer("üì∞ –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        try:
            # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            async with web_searcher:
                news_results = await web_searcher.search_news(query, num_results=5)
                
                if not news_results:
                    result = f"üì∞ –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                else:
                    result = f"üì∞ **–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** {query}\n\n"
                    
                    for i, news in enumerate(news_results, 1):
                        title = news.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:70]
                        source = news.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                        date = news.get('date', '')
                        snippet = news.get('snippet', '')[:150]
                        link = news.get('link', '')
                        
                        result += f"üì∞ **{i}. {title}**\n"
                        result += f"   üìÖ {date} | üì° {source}\n"
                        if snippet:
                            result += f"   {snippet}...\n"
                        if link:
                            result += f"   üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({link})\n"
                        result += "\n"
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            result = truncate_message(result)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = keyboards.search_results_menu()
            
            await search_msg.edit_text(
                text=result,
                reply_markup=keyboard,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
        except Exception as search_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {search_error}")
            await search_msg.edit_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {search_error}",
                reply_markup=keyboards.back_button("web_search")
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=keyboards.back_button("web_search")
        )
        await state.clear()

@router.callback_query(F.data == "search_new_query")
async def new_search(callback: CallbackQuery, state: FSMContext):
    """–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    await web_search_menu(callback)

@router.callback_query(F.data == "search_to_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    from handlers.menu_handlers import show_main_menu
    await show_main_menu(callback)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
@router.message(F.text.startswith("/search "))
async def quick_search_command(message: Message):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ /search [–∑–∞–ø—Ä–æ—Å]"""
    try:
        query = message.text[8:].strip()  # –£–±–∏—Ä–∞–µ–º "/search "
        if not query:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: /search –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ")
            return
        
        search_msg = await message.answer("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
        
        try:
            result = await web_searcher.quick_search(query)
            result = truncate_message(result)
            keyboard = keyboards.search_results_menu()
            
            await search_msg.edit_text(
                text=result,
                reply_markup=keyboard,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
        except Exception as search_error:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: {search_error}")
            await search_msg.edit_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_error}",
                reply_markup=keyboards.back_button("menu_back")
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
@router.message(F.text.startswith("/news "))
async def quick_news_command(message: Message):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π /news [–∑–∞–ø—Ä–æ—Å]"""
    try:
        query = message.text[6:].strip()  # –£–±–∏—Ä–∞–µ–º "/news "
        if not query:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π\n–ü—Ä–∏–º–µ—Ä: /news —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
            return
        
        search_msg = await message.answer("üì∞ –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏...")
        
        try:
            async with web_searcher:
                news_results = await web_searcher.search_news(query, num_results=3)
                result = web_searcher.format_search_results(news_results, max_results=3)
            
            result = truncate_message(result)
            keyboard = keyboards.search_results_menu()
            
            await search_msg.edit_text(
                text=result,
                reply_markup=keyboard,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
        except Exception as search_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {search_error}")
            await search_msg.edit_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {search_error}",
                reply_markup=keyboards.back_button("menu_back")
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")