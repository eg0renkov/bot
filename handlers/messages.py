import os
import aiofiles
from aiogram import Router, F
from aiogram.types import Message, Voice, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.openai_client import openai_client
from database.memory import memory
from database.vector_memory import vector_memory
from config.settings import settings
from utils.keyboards import keyboards
from utils.email_sender import email_sender
from utils.temp_emails import temp_emails
from utils.email_improver import email_improver
from utils.web_search import web_searcher
import re

router = Router()

def fix_transcription_errors(text: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not text:
        return text
    
    # –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    corrections = {
        # –ö–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        "–¥–æ–±–∞–≤—å —Ç—É–¥–∞": "–¥–æ–±–∞–≤—å",
        "–¥–æ–±–∞–≤—å —Å—é–¥–∞": "–¥–æ–±–∞–≤—å", 
        "–¥–æ–ø–∏—Å–∞—Ç—å —Ç—É–¥–∞": "–¥–æ–ø–∏—Å–∞—Ç—å",
        "–¥–æ–ø–∏—Å–∫–∏ —Ç—É–¥–∞": "–¥–æ–ø–∏—Å–∞—Ç—å",
        "–¥–æ–ø–∏—Å–∫–∞ —Ç—É–¥–∞": "–¥–æ–ø–∏—Å–∞—Ç—å",
        
        # –ö–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
        "–∏–∑–º–µ–Ω–∏ —Ç—É–¥–∞": "–∏–∑–º–µ–Ω–∏",
        "–∑–∞–º–µ–Ω–∏ —Ç—É–¥–∞": "–∑–∞–º–µ–Ω–∏",
        "–ø–æ–º–µ–Ω—è–π —Ç—É–¥–∞": "–ø–æ–º–µ–Ω—è–π",
        
        # –û–±—Ä–∞—â–µ–Ω–∏—è
        "–¥–æ–±—Ä—ã –¥–µ–Ω—å": "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
        "–¥–æ–±—Ä—ã–π –¥–µ–Ω—è": "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
        "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–∞": "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
        "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π —Ç–µ": "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
        
        # –î—Ä—É–≥–∏–µ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        "—Å —É–≤–∞–∂–µ–Ω–∏–µ": "—Å —É–≤–∞–∂–µ–Ω–∏–µ–º",
        "—Å —É–≤–∞–∂–µ–Ω–∏–µ–º.": "—Å —É–≤–∞–∂–µ–Ω–∏–µ–º,",
    }
    
    result = text
    for error, correction in corrections.items():
        result = result.replace(error, correction)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ "—Ç—É–¥–∞" –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import re
    result = re.sub(r'\b(–¥–æ–±–∞–≤—å|–¥–æ–ø–∏—Å–∞—Ç—å|–∏–∑–º–µ–Ω–∏|–∑–∞–º–µ–Ω–∏|–ø–æ–º–µ–Ω—è–π)\s+—Ç—É–¥–∞\b', r'\1', result, flags=re.IGNORECASE)
    
    if result != text:
        print(f"DEBUG: Fixed transcription: '{text}' -> '{result}'")
    
    return result

class EmailStates(StatesGroup):
    editing_subject = State()
    editing_body = State()

# –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start - —Ç–µ–ø–µ—Ä—å –æ–Ω –≤ menu_handlers.py

@router.message(Command("clear"))
async def clear_history(message: Message):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
    user_id = message.from_user.id
    memory.clear_history(user_id)
    await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "üîô –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–∏—â–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            parse_mode="HTML"
        )

@router.message(Command("help"))
async def help_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é AI.

üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É.

üìù –ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–Ω–∞—Å—Ç—Ä–æ–π–∫—É email/–∫–∞–ª–µ–Ω–¥–∞—Ä—è)
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üß† –ü–∞–º—è—Ç—å:
–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –º–æ–≥—É —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

‚ùì –ü—Ä–æ–±–ª–µ–º—ã?
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear
    """
    await message.answer(help_text)

@router.message(F.voice)
async def handle_voice(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not settings.VOICE_ENABLED:
        await message.answer("–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_message = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        voice: Voice = message.voice
        file_info = await message.bot.get_file(voice.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        voice_file_path = f"temp_voice_{message.from_user.id}.ogg"
        await message.bot.download_file(file_info.file_path, voice_file_path)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        transcribed_text = await openai_client.transcribe_audio(voice_file_path)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcribed_text = fix_transcription_errors(transcribed_text)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(voice_file_path):
            os.remove(voice_file_path)
        
        if not transcribed_text or transcribed_text == "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.":
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await status_message.edit_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcribed_text}\n\nü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
        
        user_id = message.from_user.id
        user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if message.from_user.last_name:
            user_name += f" {message.from_user.last_name}"
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∫–∞–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)
        calendar_command = await extract_calendar_command(transcribed_text)
        if calendar_command:
            print(f"DEBUG: Voice message detected as calendar command: {calendar_command}")
            await status_message.delete()
            return await handle_calendar_command(message, calendar_command, user_id)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è email 
        email_info = await extract_email_info(transcribed_text, user_name)
        if email_info:
            print(f"DEBUG: Voice message detected as email creation command: {email_info}")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è email, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            await status_message.edit_text("üìß –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è email —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!")
            return
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∏–µ email)
        edit_command = await extract_email_edit_command(transcribed_text)
        if edit_command:
            print(f"DEBUG: Voice message detected as email edit command: {edit_command}")
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
            await status_message.delete()
            return await handle_email_edit_command(message, edit_command, user_id)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ AI —á–∞—Ç
        print(f"DEBUG: Voice message processed as regular AI chat")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = memory.get_history(user_id, limit=10)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI
        messages = openai_client.prepare_messages_with_context(transcribed_text, history)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = await openai_client.chat_completion(messages)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        memory.save_message(user_id, transcribed_text, ai_response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        print(f"DEBUG: Sending voice response with quick_actions keyboard")
        try:
            response_text = f"üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {transcribed_text}\n\nü§ñ –ú–æ–π –æ—Ç–≤–µ—Ç:\n{ai_response}"
            quick_keyboard = keyboards.quick_actions()
            print(f"DEBUG: Voice handler - Quick keyboard created")
            
            await status_message.edit_text(
                response_text,
                reply_markup=quick_keyboard,
                parse_mode="HTML"
            )
            print(f"DEBUG: Voice response sent successfully with keyboard")
        except Exception as keyboard_error:
            print(f"DEBUG: Error sending voice response with keyboard: {keyboard_error}")
            # Fallback –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await status_message.edit_text(f"üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {transcribed_text}\n\nü§ñ –ú–æ–π –æ—Ç–≤–µ—Ç:\n{ai_response}")
        
        # TTS –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù - –æ–∑–≤—É—á–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ "üé§ –û–∑–≤—É—á–∏—Ç—å"
        print(f"DEBUG: TTS disabled, no automatic voice response sent")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def format_email_subject(raw_subject: str) -> str:
    """–ò–ò-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –ø–∏—Å—å–º–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    from handlers.email_fix import format_email_subject_safe
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    return await format_email_subject_safe(raw_subject)

async def extract_email_info(text: str, user_name: str = None) -> dict:
    """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Å—å–º–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    from handlers.email_fix import extract_email_info_fixed
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    result = await extract_email_info_fixed(text, user_name)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –∫–æ–¥
    return result

async def extract_calendar_command(text: str) -> dict:
    """–ò–∑–≤–ª–µ—á—å –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    text_lower = text.lower()
    print(f"DEBUG extract_calendar_command: text='{text}', text_lower='{text_lower}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï email –∫–æ–º–∞–Ω–¥–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç @ —Å–∏–º–≤–æ–ª)
    if '@' in text:
        print("DEBUG: Rejected - contains @ symbol")
        return None
    
    # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_exclusions = ['–∫–æ–Ω—Ç–∞–∫—Ç', '–Ω–æ–º–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '+7', '+3', '+8', '+9']
    found_exclusions = [ex for ex in contact_exclusions if ex in text_lower]
    if found_exclusions:
        print(f"DEBUG: Rejected - found contact exclusions: {found_exclusions}")
        return None
    
    calendar_patterns = [
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å "–¥–æ–±–∞–≤—å" –∏ –≤—Ä–µ–º–µ–Ω–µ–º (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
        r"–¥–æ–±–∞–≤[—å–∏].*(?:—á—Ç–æ\s+)?(?:—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–≤\s+\w+)\s+(?:–≤\s+)?(\d{1,2}:?\d{0,2}?)\s*(.+)",
        r"–¥–æ–±–∞–≤[—å–∏].*(?:—á—Ç–æ\s+)?(.+)\s+(?:—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–≤\s+\w+)\s+(?:–≤\s+)?(\d{1,2}:?\d{0,2}?)",
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ "–≤—Å—Ç—Ä–µ—á–∞"
        r"–≤—Å—Ç—Ä–µ—á–∞\s+(.+)",
        r"(.+)\s+–≤—Å—Ç—Ä–µ—á–∞",
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
        r"(.+)\s+–≤\s+(\d{1,2}:?\d{0,2}?)",
        
        # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        r"—Å–æ–∑–¥–∞–π\s+—Å–æ–±—ã—Ç–∏–µ\s+(.+)",
        r"–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π\s+(.+)",
        r"–Ω–∞–ø–æ–º–Ω–∏\s+(.+)",
        
        # –£–ë–†–ê–õ–ò –æ–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω r"–¥–æ–±–∞–≤[—å–∏].*(?:—á—Ç–æ\s+)?(.+)" –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏–ª –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã "–¥–æ–±–∞–≤—å"
        # –¢–µ–ø–µ—Ä—å "–¥–æ–±–∞–≤—å" —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —É–∫–∞–∑–∞–Ω–∏—è–º–∏ –≤—ã—à–µ
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º "–¥–æ–±–∞–≤—å" –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫)
    calendar_keywords = ['–≤—Å—Ç—Ä–µ—á–∞', '—Å–æ–±—ã—Ç–∏–µ', '–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π', '–Ω–∞–ø–æ–º–Ω–∏', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞']
    has_calendar_keywords = any(word in text_lower for word in calendar_keywords)
    
    # –î–ª—è –∫–æ–º–∞–Ω–¥ —Å "–¥–æ–±–∞–≤—å" —Ç—Ä–µ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    if '–¥–æ–±–∞–≤—å' in text_lower and not has_calendar_keywords:
        return None
    
    if not has_calendar_keywords and '–¥–æ–±–∞–≤—å' not in text_lower:
        return None
    
    for pattern in calendar_patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return {
                "text": text,
                "match": match.groups(),
                "is_calendar": True
            }
    
    return None

async def smart_email_edit(current_body: str, edit_command: str, edit_text: str) -> str:
    """AI-powered —É–º–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ai_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Å—å–º–∞ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø–∏—Å—å–º–æ –¢–û–ß–ù–û –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.

–¢–ï–ö–£–©–ï–ï –ü–ò–°–¨–ú–û:
{current_body}

–ö–û–ú–ê–ù–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {edit_command}
–¢–ï–ö–°–¢ –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø/–ò–ó–ú–ï–ù–ï–ù–ò–Ø: {edit_text}

–ü–†–ê–í–ò–õ–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –û–ë–†–ê–©–ï–ù–ò–Ø ("–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–ø—Ä–∏–≤–µ—Ç" + –∏–º—è):
   - –ó–∞–º–µ–Ω—è–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
   - –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–π –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
   - –§–æ—Ä–º–∞—Ç: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, [–ò–º—è]!" –∏–ª–∏ "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!" (–±–µ–∑ –∏–º–µ–Ω–∏)
   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–π –∏–º–µ–Ω–∞ (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –∞ –Ω–µ "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞")

2. –ü–û–î–ü–ò–°–ò ("—Å —É–≤–∞–∂–µ–Ω–∏–µ–º", "–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ" + –∏–º—è):
   - –ó–∞–º–µ–Ω—è–π —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å—å –≤ –∫–æ–Ω—Ü–µ
   - –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–π –≤ –∫–æ–Ω–µ—Ü
   - –§–æ—Ä–º–∞—Ç: "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\\n[–ò–º—è]"

3. –û–°–ù–û–í–ù–û–ô –¢–ï–ö–°–¢:
   - "–¥–æ–±–∞–≤—å" = –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –ø–æ —Å–º—ã—Å–ª—É
   - "–∑–∞–º–µ–Ω–∏" = –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–π —Ç–µ–∫—Å—Ç –∏ –∑–∞–º–µ–Ω–∏—Ç—å
   - "–¥–æ–ø–∏—Å–∞—Ç—å" = –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

4. –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
   - –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∏—Å—å–º–∞ (–∞–±–∑–∞—Ü—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫)
   - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
   - –õ–æ–≥–∏—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

    try:
        messages = [{"role": "user", "content": ai_prompt}]
        result = await openai_client.chat_completion(messages, temperature=0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑—É–º–Ω—ã–π
        if result and len(result.strip()) > 10:
            print(f"DEBUG: AI edit result: {result[:100]}...")
            return result.strip()
        else:
            print(f"DEBUG: AI edit failed, using fallback")
            return await _fallback_email_edit(current_body, edit_command, edit_text)
            
    except Exception as e:
        print(f"DEBUG: AI edit error: {e}")
        return await _fallback_email_edit(current_body, edit_command, edit_text)

async def _fallback_email_edit(current_body: str, edit_command: str, edit_text: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    command_lower = edit_command.lower()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π
    greeting_words = ['–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–ø—Ä–∏–≤–µ—Ç']
    if any(word in edit_text.lower() for word in greeting_words):
        lines = current_body.split('\n')
        formatted_greeting = edit_text.strip()
        if not formatted_greeting.endswith(('!', '.')):
            formatted_greeting += '!'
        lines[0] = formatted_greeting
        return '\n'.join(lines)
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
    signature_words = ['—Å —É–≤–∞–∂–µ–Ω–∏–µ–º', '–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è']
    if any(word in edit_text.lower() for word in signature_words):
        return f"{current_body}\n\n{edit_text}"
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
    return f"{current_body}\n\n{edit_text}"

async def handle_email_edit_command(message, edit_command: dict, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email"""
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    latest_email = temp_emails.get_user_latest_email(user_id)
    
    if not latest_email:
        await message.answer(
            "‚úèÔ∏è <b>–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞</b>\n\n"
            "‚ùå <b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            "üí° <b>–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∏—Å—å–º–æ:</b>\n"
            "\"–Ω–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ email@example.com - –æ–± —Ç–µ–º–µ\"",
            parse_mode="HTML"
        )
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    try:
        current_body = latest_email['body']
        edit_text = edit_command['text']
        original_command = edit_command['original_command']
        
        print(f"DEBUG: Smart editing - Command: '{original_command}', Text: '{edit_text}'")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        new_body = await smart_email_edit(current_body, original_command, edit_text)
        
        print(f"DEBUG: Smart editing result - Body length: {len(new_body)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        temp_emails.update_email(latest_email['id'], body=new_body)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        print(f"DEBUG: Getting updated email data...")
        updated_email = temp_emails.get_email(latest_email['id'])
        
        if updated_email:
            preview_text = temp_emails.format_email_preview(updated_email)
            preview_text += f"\n\n‚úÖ <i>–ü–∏—Å—å–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {edit_command['original_command']}</i>"
            
            print(f"DEBUG: Creating keyboard for updated email...")
            email_keyboard = keyboards.email_confirm_menu(latest_email['id'])
            
            print(f"DEBUG: Sending updated email preview...")
            await message.answer(
                preview_text,
                reply_markup=email_keyboard,
                parse_mode="HTML"
            )
            print(f"DEBUG: Updated email preview sent successfully")
        else:
            print(f"DEBUG: Failed to get updated email data")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞",
                parse_mode="HTML"
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—Å—å–º–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ",
            parse_mode="HTML"
        )

async def handle_calendar_command(message: Message, calendar_command: dict, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        from database.user_tokens import user_tokens
        token_data = await user_tokens.get_token_data(user_id, "calendar")
        
        print(f"DEBUG: Calendar token_data for user {user_id}: {token_data}")
        print(f"DEBUG: app_password exists: {token_data.get('app_password') if token_data else 'token_data is None'}")
        
        if not token_data or not token_data.get("app_password"):
            await message.answer(
                "üìÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞</b>\n\n"
                "‚ùå <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å\n"
                "2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n\n"
                "üí° –ù–∞–∂–º–∏—Ç–µ ¬´üì± –ú–µ–Ω—é¬ª ‚Üí ¬´üìÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ö–∞–ª–µ–Ω–¥–∞—Ä—å¬ª",
                parse_mode="HTML",
                reply_markup=keyboards.main_menu()
            )
            return
        
        await message.answer(
            "üìÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!</b>\n\n"
            f"üìù <b>–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:</b> {calendar_command['text']}\n\n"
            "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å –ø–æ–º–æ—â—å—é –ò–ò...",
            parse_mode="HTML"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò –∞–Ω–∞–ª–∏–∑–∞
        await create_calendar_event_from_text(message, calendar_command['text'], user_id, token_data)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.")

async def create_calendar_event_from_text(message: Message, text: str, user_id: int, token_data: dict):
    """–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è
        from utils.openai_client import openai_client
        from datetime import datetime, timedelta
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:

–¢–µ–∫—Å—Ç: "{text}"

–í–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
    "start_time": "YYYY-MM-DDTHH:MM:SS",
    "end_time": "YYYY-MM-DDTHH:MM:SS",
    "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"
}}

–ü–†–ê–í–ò–õ–ê –ü–ê–†–°–ò–ù–ì–ê –í–†–ï–ú–ï–ù–ò:
- "–≤ 15" = 15:00 (–∞ –Ω–µ 12:00!)
- "–≤ 14" = 14:00 
- "–≤ 9" = 09:00
- "–≤ 10 —É—Ç—Ä–∞" = 10:00
- "–≤ 15 —á–∞—Å–æ–≤" = 15:00
- "–≤ –ø–æ–ª–¥–µ–Ω—å" = 12:00
- "–≤ —á–∞—Å –¥–Ω—è" = 13:00
- "–≤ 2 —á–∞—Å–∞" = 14:00 (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ —É—Ç—Ä–æ/–¥–µ–Ω—å)

–ü–†–ê–í–ò–õ–ê –î–ê–¢–´:
- "–∑–∞–≤—Ç—Ä–∞" = –∑–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
- "—Å–µ–≥–æ–¥–Ω—è" = —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞  
- "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" = —á–µ—Ä–µ–∑ 2 –¥–Ω—è
- –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Å–µ–≥–æ–¥–Ω—è

–ü–†–ê–í–ò–õ–ê –ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–ò:
- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏–µ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å
- –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ UTC+3 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
- –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â–∏–π: 2025
- –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π 10:00

–°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}"""

        messages = [{"role": "user", "content": prompt}]
        ai_response = await openai_client.chat_completion(messages, temperature=0.1)
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò
        try:
            import json
            event_data = json.loads(ai_response.strip().strip('```json').strip('```'))
        except:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ-–¥—Ä—É–≥–æ–º—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º app_password, –∞ –Ω–µ access_token)
        app_password = token_data.get("app_password")
        user_email = token_data.get("email", "user@yandex.ru")
        
        print(f"DEBUG: Creating calendar client with email: {user_email}, password exists: {bool(app_password)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º app_password –≤–º–µ—Å—Ç–æ access_token)
        from handlers.yandex_integration import YandexCalendar
        calendar_client = YandexCalendar(app_password, user_email)
        success = await calendar_client.create_event(
            title=event_data.get("title", "–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
            start_time=event_data.get("start_time"),
            end_time=event_data.get("end_time"),
            description=event_data.get("description", "")
        )
        
        if success:
            await message.answer(
                f"‚úÖ <b>–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event_data.get('title')}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {event_data.get('start_time', '').replace('T', ' ')}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}",
                parse_mode="HTML",
                reply_markup=keyboards.main_menu()
            )
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n"
                "‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n"
                "‚Ä¢ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª",
                parse_mode="HTML"
            )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")

async def extract_email_edit_command(text: str) -> dict:
    """–ò–∑–≤–ª–µ—á—å –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email"""
    
    # –í–ê–ñ–ù–û: –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç email –∞–¥—Ä–µ—Å, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞, –∞ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
    import re
    if re.search(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', text):
        print(f"DEBUG: Text contains email address, skipping edit command extraction")
        return None
    
    # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    text_lower = text.lower()
    contact_exclusions = ['–∫–æ–Ω—Ç–∞–∫—Ç', '–Ω–æ–º–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '+7', '+3', '+8', '+9']
    found_exclusions = [ex for ex in contact_exclusions if ex in text_lower]
    if found_exclusions:
        print(f"DEBUG: Email edit skipped - found contact exclusions: {found_exclusions}")
        return None
    
    # –°–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ "–ø–∏—à–∏" –≤ –Ω–∞—á–∞–ª–µ
    normalized_text = text.strip()
    if normalized_text.lower().startswith(('–ø–∏—à–∏,', '–ø–∏—à–∏ ', '–Ω–∞–ø–∏—à–∏,', '–Ω–∞–ø–∏—à–∏ ')):
        # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ "–ø–∏—à–∏" –∏–∑ –Ω–∞—á–∞–ª–∞
        parts = normalized_text.split(' ', 1)
        if len(parts) > 1:
            normalized_text = parts[1].strip()
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –∑–∞–ø—è—Ç—É—é
            if normalized_text.startswith(','):
                normalized_text = normalized_text[1:].strip()
    
    edit_patterns = [
        # –ö–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–¥–æ–ø–∏—Å—ã–≤–∞–Ω–∏—è
        r"–¥–æ–ø–∏—à[–∏—å].*?(.+)",
        r"–¥–æ–±–∞[–≤—å].*?(.+)",
        r"–¥–æ–ø–æ–ª–Ω[–∏—å].*?(.+)",
        r"–¥–æ–±–∞–≤—å\s+(.+)",
        r"–¥–æ–ø–∏—Å–∞—Ç—å\s+(.+)",
        r"–¥–æ–ø–æ–ª–Ω–∏—Ç—å\s+(.+)",
        r"–ø—Ä–∏–±–∞[–≤—å].*?(.+)",
        r"–≤–∫–ª—é—á[–∏—å].*?(.+)",
        r"–≤—Å—Ç–∞[–≤—å].*?(.+)",
        
        # –ö–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è/–∑–∞–º–µ–Ω—ã
        r"–∏–∑–º–µ–Ω[–∏—å].*?(.+)",
        r"–∑–∞–º–µ–Ω[–∏—å].*?(.+)",
        r"–ø–æ–º–µ–Ω—è[–π—å].*?(.+)",
        r"—Å–º–µ–Ω[–∏—å].*?(.+)",
        r"–æ–±–Ω–æ–≤[–∏—å].*?(.+)",
        
        # –ö–æ–º–∞–Ω–¥—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        r"–∏—Å–ø—Ä–∞–≤[—å–∏].*?(.+)",
        r"–ø–æ–ø—Ä–∞–≤[—å–∏].*?(.+)",
        r"–æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä.*?(.+)",
        r"—Ä–µ–¥–∞–∫—Ç–∏—Ä.*?(.+)",
        r"–ø—Ä–∞–≤–∫[–∞–∏].*?(.+)",
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
        r"–ø–µ—Ä–µ–ø–∏—à[–∏—å].*?(.+)",
        r"–ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä.*?(.+)",
        r"–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä.*?(.+)",
        r"–ø–µ—Ä–µ—Ä–∞–±–æ—Ç.*?(.+)",
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ª—É—á—à–µ–Ω–∏—è
        r"—É–ª—É—á—à[–∏—å].*?(.+)",
        r"–¥–æ—Ä–∞–±–æ—Ç–∞[–π—å].*?(.+)",
        r"—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤.*?(.+)",
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã
        r"—Å–¥–µ–ª–∞[–π—å].*?(.+)",
        r"–Ω–∞–ø–∏—à[–∏—å].*?(–µ—â–µ|—Ç–∞–∫–∂–µ|—Ç–æ–∂–µ|–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ).*?(.+)"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π
    for text_to_check in [text, normalized_text]:
        for pattern in edit_patterns:
            match = re.search(pattern, text_to_check, re.IGNORECASE)
            if match:
                edit_text = match.group(1).strip()
                return {
                    "type": "edit",
                    "text": edit_text,
                    "original_command": text  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ "–ø–∏—à–∏"
    if normalized_text != text and any(word in normalized_text.lower() for word in ['–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ']):
        return {
            "type": "edit",
            "text": normalized_text,
            "original_command": text
        }
    
    return None

async def extract_search_query(text: str) -> str:
    """–ò–∑–≤–ª–µ—á—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º
    search_patterns = [
        r"–Ω–∞–π–¥–∏ –ø–∏—Å—å–º–∞ –æ—Ç (.+)",
        r"–Ω–∞–π—Ç–∏ –ø–∏—Å—å–º–∞ –æ—Ç (.+)",
        r"–Ω–∞–π–¥–∏ –ø–∏—Å—å–º–∞ (.+)",
        r"–Ω–∞–π—Ç–∏ –ø–∏—Å—å–º–∞ (.+)",
        r"–ø–æ–∏—Å–∫ –ø–∏—Å–µ–º –æ—Ç (.+)",
        r"–ø–æ–∏—Å–∫ –ø–∏—Å–µ–º (.+)",
        r"–ø–æ–∫–∞–∂–∏ –ø–∏—Å—å–º–∞ –æ—Ç (.+)",
        r"–ø–æ–∫–∞–∂–∏ –ø–∏—Å—å–º–∞ (.+)",
        r"–ø–∏—Å—å–º–∞ –æ—Ç (.+)",
        r"–∏—â–∏ –ø–∏—Å—å–º–∞ (.+)",
    ]
    
    for pattern in search_patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            query = match.group(1).strip()
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
            query = re.sub(r'\b(–ø–∏—Å—å–º–∞|–ø–∏—Å—å–º–æ|–æ—Ç|–æ–±|–ø—Ä–æ|–æ|–≤|–∑–∞|—Å)\b', '', query, flags=re.IGNORECASE).strip()
            return query if query else None
    
    return None

async def extract_web_search_query(text: str) -> dict:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º –∏ –µ–≥–æ —Ç–∏–ø"""
    text_lower = text.lower().strip()
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è - –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞/–∫–∞–ª–µ–Ω–¥–∞—Ä—è/–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    email_keywords = [
        '–Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ', '–Ω–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ', '–æ—Ç–ø—Ä–∞–≤—å –ø–∏—Å—å–º–æ',
        '—Å–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ', '—Å–æ–∑–¥–∞–π –ø–∏—Å—å–º–æ', '—Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ', '—Å–æ—Å—Ç–∞–≤—å –ø–∏—Å—å–º–æ',
        'email', '–º–µ–π–ª', '–ø–æ—á—Ç–∞'
    ]
    
    calendar_keywords = [
        '—Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', '—Å–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ', '–¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ', '–¥–æ–±–∞–≤—å —Å–æ–±—ã—Ç–∏–µ',
        '–∫–∞–ª–µ–Ω–¥–∞—Ä—å', '–≤—Å—Ç—Ä–µ—á–∞', '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
    ]
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞ –∏–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è - –ù–ï –≤–µ–±-–ø–æ–∏—Å–∫
    for keyword in email_keywords + calendar_keywords:
        if keyword in text_lower:
            return None
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    news_keywords = [
        '–Ω–æ–≤–æ—Å—Ç–∏', '–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏', '—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
        '—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç', '—Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è', '–Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è', '–Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
        '—á—Ç–æ –Ω–æ–≤–æ–≥–æ', '–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Å–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π', '–Ω–æ–≤–æ—Å—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    search_keywords = [
        '–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', '–ø–æ–∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', '–Ω–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ', '–ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ',
        '—á—Ç–æ —Ç–∞–∫–æ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ', '–Ω–∞–π–¥–∏ –¥–∞–Ω–Ω—ã–µ –æ', '–ø–æ–∏—â–∏ –¥–∞–Ω–Ω—ã–µ –æ',
        '–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ', '–ø–æ—Å–ª–µ–¥–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
    for keyword in news_keywords:
        if keyword in text_lower:
            # –£–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å
            query = text_lower.replace(keyword, '').strip()
            if not query:
                query = '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'
            return {'type': 'news', 'query': query}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    for keyword in search_keywords:
        if keyword in text_lower:
            query = text_lower.replace(keyword, '').strip()
            if query:
                return {'type': 'search', 'query': query}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–∏—Å–∫–æ–º
    question_patterns = [
        r'—á—Ç–æ —Ç–∞–∫–æ–µ (.+)\??',
        r'–∫—Ç–æ —Ç–∞–∫–æ–π (.+)\??',
        r'–∫—Ç–æ —Ç–∞–∫–∞—è (.+)\??', 
        r'–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è (.+)\??',
        r'–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (.+)\??',
        r'—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç (.+)\??',
        r'–∫–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç (.+)\??',
        r'(.+) —ç—Ç–æ —á—Ç–æ\??',
        r'–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ (.+)\??',
        r'—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ (.+)',
        r'—Ä–∞—Å—Å–∫–∞–∂–∏ –æ (.+)',
        r'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ (.+)',
        r'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ (.+)'
    ]
    
    for pattern in question_patterns:
        match = re.search(pattern, text_lower)
        if match:
            query = match.group(1).strip()
            # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏ - —ç—Ç–æ –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            if '–Ω–æ–≤–æ—Å—Ç' in query:
                return {'type': 'news', 'query': query}
            return {'type': 'search', 'query': query}
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ (–ø—Ä–∏–∑–Ω–∞–∫ –∏–º–µ–Ω/–±—Ä–µ–Ω–¥–æ–≤)
    # –∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if (('?' in text or '—á—Ç–æ' in text_lower or '–∫—Ç–æ' in text_lower or 
         '–≥–¥–µ' in text_lower or '–∫–∞–∫' in text_lower or '—Ä–∞—Å—Å–∫–∞–∂–∏' in text_lower) and
        re.search(r'[–ê-–Ø][–∞-—è]+ [–ê-–Ø][–∞-—è]+', text)):  # –ò–º—è –§–∞–º–∏–ª–∏—è
        # –£–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = text.strip()
        return {'type': 'search', 'query': query}
    
    return None

def truncate_message(text: str, max_length: int = 3800) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
    if len(text) <= max_length:
        return text
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º
    lines = text.split('\n')
    result = ""
    
    for line in lines:
        if len(result + line + '\n') > max_length - 150:  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–µ–∑–∫–µ
            break
        result += line + '\n'
    
    result += "\nüìù _–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∫—Ä–∞—â–µ–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram (–º–∞–∫—Å. 4096 —Å–∏–º–≤–æ–ª–æ–≤)_\n\nüí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤_"
    
    return result

async def handle_web_search_command(message: Message, web_search_info: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
    try:
        search_type = web_search_info['type']
        query = web_search_info['query']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞
        if search_type == 'news':
            status_msg = await message.answer(f"üì∞ –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏: {query}\n\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        else:
            status_msg = await message.answer(f"üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫: {query}\n\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        try:
            if search_type == 'news':
                # –î–ª—è –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–¥–∫—É
                if query.strip() in ['–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', '–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏', '', '—Å–µ–≥–æ–¥–Ω—è', '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è']:
                    result = await web_searcher.get_daily_news_summary()
                else:
                    # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
                    async with web_searcher:
                        news_results = await web_searcher.search_news(query, num_results=8)
                        
                        if not news_results:
                            result = f"üì∞ –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                        else:
                            result = f"üì∞ **–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** {query}\n\n"
                            
                            for i, news in enumerate(news_results[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ª—É—á—à–∏—Ö
                                title = news.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:100]
                                source = news.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                                date = news.get('date', '')
                                snippet = news.get('snippet', '')[:120]
                                link = news.get('link', '')
                                
                                result += f"üì∞ **{i}. {title}**\n"
                                result += f"   üì° {source}"
                                if date:
                                    result += f" | üìÖ {date}"
                                result += "\n"
                                if snippet:
                                    result += f"   {snippet}...\n"
                                if link:
                                    result += f"   üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫]({link})\n"
                                result += "\n"
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
                result = await web_searcher.quick_search(query)
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            result = truncate_message(result)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = keyboards.search_results_menu()
            
            await status_msg.edit_text(
                text=result,
                reply_markup=keyboard,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
        except Exception as search_error:
            print(f"ERROR: Web search failed: {search_error}")
            await status_msg.edit_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_error}",
                reply_markup=keyboards.back_button("menu_back")
            )
    
    except Exception as e:
        print(f"ERROR: handle_web_search_command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞")

@router.message(F.text)
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"üî• HANDLER STARTED: handle_text_message called with text: '{message.text}'")
    try:
        user_id = message.from_user.id
        user_message = message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if message.from_user.last_name:
            user_name += f" {message.from_user.last_name}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ü–†–ò–û–†–ò–¢–ï–¢!)
        print(f"DEBUG: Checking calendar command for: '{user_message}'")
        calendar_command = await extract_calendar_command(user_message)
        print(f"DEBUG: Calendar command result: {calendar_command}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ (–ü–†–ò–û–†–ò–¢–ï–¢ –ù–ê–î –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï–ú!)
        print(f"DEBUG: Checking for email command in text: '{user_message}'")
        email_info = await extract_email_info(user_message, user_name)
        print(f"DEBUG: Email extraction result: {email_info}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞)
        edit_command = None
        if not email_info:
            print(f"DEBUG: Checking for email edit command in text: '{user_message}'")
            edit_command = await extract_email_edit_command(user_message)
            print(f"DEBUG: Email edit extraction result: {edit_command}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º
        search_query = await extract_search_query(user_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–µ–±-–ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        web_search_info = await extract_web_search_query(user_message)
        
        if calendar_command:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            return await handle_calendar_command(message, calendar_command, user_id)
        
        if edit_command:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return await handle_email_edit_command(message, edit_command, user_id)
        
        if web_search_info:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±-–ø–æ–∏—Å–∫
            return await handle_web_search_command(message, web_search_info)
        
        if search_query:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø–æ—á—Ç–∞
            if not await email_sender.can_send_email(user_id):
                await message.answer(
                    "üîç <b>–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É</b>\n\n"
                    "üîß <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å:</b>\n"
                    "1. –ù–∞–∂–º–∏—Ç–µ ¬´üì± –ú–µ–Ω—é¬ª\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´üìß –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ü–æ—á—Ç—É¬ª\n"
                    "3. –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n\n"
                    "üí° –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–∏—Å—å–º–∞!",
                    parse_mode="HTML",
                    reply_markup=keyboards.main_menu()
                )
                return
            
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞
                from utils.html_utils import escape_html
                status_msg = await message.answer(f"üîç –ò—â—É –ø–∏—Å—å–º–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{escape_html(search_query)}</b>\n\n‚è≥ –ü–æ–∏—Å–∫...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                from utils.email_sender_real import real_email_sender
                search_results = await real_email_sender.search_emails(user_id, search_query, limit=10)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                import json
                import os
                search_cache_dir = "data/search_cache"
                os.makedirs(search_cache_dir, exist_ok=True)
                
                cache_file = os.path.join(search_cache_dir, f"user_{user_id}_last_search.json")
                cache_data = {
                    'query': search_query,
                    'results': search_results,
                    'timestamp': __import__('datetime').datetime.now().isoformat()
                }
                
                try:
                    with open(cache_file, 'w', encoding='utf-8') as f:
                        json.dump(cache_data, f, ensure_ascii=False, indent=2)
                except Exception as cache_error:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ–∏—Å–∫–∞: {cache_error}")
                
                if not search_results:
                    await status_msg.edit_text(
                        f"üîç <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                        f"üìù <b>–ó–∞–ø—Ä–æ—Å:</b> {escape_html(search_query)}\n"
                        f"üì≠ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ü–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                        f"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                        f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n"
                        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
                        parse_mode="HTML"
                    )
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞  
                from utils.html_utils import truncate_and_escape
                
                results_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
                results_text += f"üìù <b>–ó–∞–ø—Ä–æ—Å:</b> {escape_html(search_query)}\n"
                results_text += f"üì¨ <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(search_results)} –ø–∏—Å–µ–º\n\n"
                
                for i, email_data in enumerate(search_results, 1):
                    sender = email_data.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
                    subject = email_data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
                    date = email_data.get('date', '')
                    
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    sender_escaped = truncate_and_escape(sender, 25)
                    subject_escaped = truncate_and_escape(subject, 35)
                    
                    results_text += f"<b>{i}.</b> üë§ {sender_escaped}\n"
                    results_text += f"üìù {subject_escaped}\n"
                    if date:
                        results_text += f"üïê {escape_html(str(date)[:16])}\n"
                    results_text += "\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(results_text) > 3500:
                    results_text = results_text[:3500] + "\n\n..."
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                builder = InlineKeyboardBuilder()
                
                # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                builder.button(
                    text="üìñ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", 
                    callback_data=f"search_details_{len(search_results)}"
                )
                
                # –ö–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é –≤—Ö–æ–¥—è—â–∏—Ö
                builder.button(
                    text="üì® –ö –≤—Ö–æ–¥—è—â–∏–º", 
                    callback_data="mail_inbox"
                )
                
                # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
                builder.button(
                    text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", 
                    callback_data="mail_search"
                )
                
                # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
                builder.button(
                    text="‚ùå –í—ã–π—Ç–∏", 
                    callback_data="menu_back"
                )
                
                builder.adjust(1, 3)  # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ —Ä—è–¥
                
                await status_msg.edit_text(
                    results_text, 
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
                return
                
            except Exception as e:
                await status_msg.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º</b>\n\n"
                    f"üí• <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {escape_html(str(e)[:100])}...\n\n"
                    f"üîß <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>",
                    parse_mode="HTML"
                )
                return
        
        if email_info:
            print(f"DEBUG: Email info detected: {email_info}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞
            if not email_info.get('email') or not email_info.get('subject') or not email_info.get('body'):
                print(f"DEBUG: Invalid email_info data - missing required fields")
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞</b>\n\n"
                    "üîß <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:</b>\n"
                    "‚Ä¢ Email –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
                    "‚Ä¢ –¢–µ–º—É –ø–∏—Å—å–º–∞\n\n"
                    "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                    "\"–æ—Ç–ø—Ä–∞–≤—å test@example.com –æ –≤–∞–∂–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ\"",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
            body_clean = email_info['body'].strip()
            if len(body_clean) < 10:
                print(f"DEBUG: Body too short: '{body_clean}' (length: {len(body_clean)})")
                await message.answer(
                    "‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–µ–ª–æ –ø–∏—Å—å–º–∞</b>\n\n"
                    "üîß <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                    "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤ –∫–æ–º–∞–Ω–¥—É\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É\n\n"
                    "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                    "\"–æ—Ç–ø—Ä–∞–≤—å test@example.com –æ –≤–∞–∂–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ –∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞\"",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø–æ—á—Ç–∞
            can_send = await email_sender.can_send_email(user_id)
            print(f"DEBUG: can_send_email result: {can_send}")
            
            if not can_send:
                print(f"DEBUG: Email not connected for user {user_id}")
                await message.answer(
                    "üìß <b>–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É</b>\n\n"
                    "üîß <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å:</b>\n"
                    "1. –ù–∞–∂–º–∏—Ç–µ ¬´üì± –ú–µ–Ω—é¬ª\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´üìß –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ü–æ—á—Ç—É¬ª\n"
                    "3. –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n\n"
                    "üí° –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–∞!",
                    parse_mode="HTML",
                    reply_markup=keyboards.main_menu()
                )
                return
            else:
                print(f"DEBUG: Email IS connected for user {user_id}, proceeding with email creation...")
            try:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞–µ–º –ø–∏—Å—å–º–æ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
                status_msg = await message.answer("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∏—Å—å–º–æ...")
                
                print(f"DEBUG: Starting email processing for user {user_id}")
                print(f"DEBUG: Email recipient: {email_info['email']}")
                print(f"DEBUG: Original subject: '{email_info['subject']}'")
                print(f"DEBUG: Original body length: {len(email_info['body'])}")
                print(f"DEBUG: Original body preview: '{email_info['body'][:100]}...'")
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if not email_info['body'] or len(email_info['body'].strip()) < 5:
                    raise ValueError(f"Body is too short or empty: '{email_info['body']}'")
                
                # –û–¢–ö–õ–Æ–ß–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–£–ª—É—á—à–∏—Ç—å –ø–∏—Å—å–º–æ"
                print(f"DEBUG: Using original email content without auto-improvement")
                improved_subject = email_info["subject"] 
                improved_body = email_info["body"]
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
                print(f"DEBUG: Creating temp email...")
                print(f"DEBUG: Email data - to: {email_info['email']}, subject: {improved_subject}, body length: {len(improved_body)}")
                try:
                    email_id = temp_emails.create_email(
                        user_id=user_id,
                        to_email=email_info["email"],
                        subject=improved_subject,
                        body=improved_body
                    )
                    print(f"DEBUG: Temp email created with ID: {email_id}")
                except Exception as create_error:
                    print(f"DEBUG: Failed to create temp email: {create_error}")
                    import traceback
                    print(f"DEBUG: Full create email error: {traceback.format_exc()}")
                    raise create_error
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await status_msg.delete()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                print(f"DEBUG: Getting email data for preview...")
                try:
                    email_data = temp_emails.get_email(email_id)
                    if not email_data:
                        raise Exception(f"Failed to get email data for ID: {email_id}")
                    
                    preview_text = temp_emails.format_email_preview(email_data)
                    print(f"DEBUG: Preview text created, length: {len(preview_text)}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ –µ—Å–ª–∏ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    if improved_subject != email_info.get("original_subject", improved_subject) or \
                       improved_body != email_info.get("original_body", improved_body):
                        preview_text += "\n\n‚ú® <i>–ü–∏—Å—å–º–æ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–µ–Ω–æ AI</i>"
                    
                    print(f"DEBUG: Creating email confirm menu for email_id: {email_id}")
                    keyboard = keyboards.email_confirm_menu(email_id)
                    print(f"DEBUG: Keyboard created: {type(keyboard)}")
                    
                    print(f"DEBUG: Sending preview message...")
                    await message.answer(
                        preview_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                    print(f"DEBUG: Preview message sent successfully")
                    return  # –í–ê–ñ–ù–û: –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
                    
                except Exception as preview_error:
                    print(f"DEBUG: Preview creation failed: {preview_error}")
                    raise preview_error
                
            except Exception as e:
                import traceback
                error_details = traceback.format_exc()
                print(f"DEBUG: Full error traceback:")
                print(error_details)
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                try:
                    if 'status_msg' in locals():
                        await status_msg.delete()
                except:
                    pass
                
                await message.answer(
                    "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å—å–º–∞</b>\n\n"
                    f"üîß <b>–î–µ—Ç–∞–ª–∏:</b> {str(e)[:200]}\n\n"
                    "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                    parse_mode="HTML",
                    reply_markup=keyboards.main_menu()
                )
                return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_message = await message.answer("ü§ñ –î—É–º–∞—é...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if vector_memory:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = await vector_memory.get_enhanced_context(user_id, user_message, 5)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            messages = await prepare_messages_with_vector_context(user_message, context)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ø–∞–º—è—Ç—å
            history = memory.get_history(user_id, limit=10)
            messages = openai_client.prepare_messages_with_context(user_message, history)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = await openai_client.chat_completion(messages)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–º–µ–Ω–∏ –∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        name_question_handled = await handle_name_questions(message, user_message, ai_response)
        if name_question_handled:
            return  # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –æ–± –∏–º–µ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Å–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
        await check_and_create_contact(message, user_message, ai_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        if vector_memory:
            await vector_memory.save_conversation(user_id, user_message, ai_response)
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞–Ω–∏—è
            await vector_memory.analyze_and_extract_knowledge(user_id, f"{user_message} {ai_response}")
        else:
            memory.save_message(user_id, user_message, ai_response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        print(f"DEBUG: Sending AI response with quick_actions keyboard")
        try:
            quick_keyboard = keyboards.quick_actions()
            print(f"DEBUG: Quick keyboard created: {quick_keyboard}")
            
            if len(ai_response) > settings.MAX_MESSAGE_LENGTH:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = [ai_response[i:i+settings.MAX_MESSAGE_LENGTH] 
                        for i in range(0, len(ai_response), settings.MAX_MESSAGE_LENGTH)]
                
                print(f"DEBUG: Message too long, sending {len(parts)} parts")
                await status_message.edit_text(
                    parts[0], 
                    reply_markup=quick_keyboard,
                    parse_mode="HTML"
                )
                for part in parts[1:]:
                    await message.answer(part, parse_mode="HTML")
            else:
                print(f"DEBUG: Sending single message with keyboard")
                await status_message.edit_text(
                    ai_response,
                    reply_markup=quick_keyboard,
                    parse_mode="HTML"
                )
                print(f"DEBUG: Message sent successfully with keyboard")
        except Exception as keyboard_error:
            print(f"DEBUG: Error sending message with keyboard: {keyboard_error}")
            # Fallback –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await status_message.edit_text(ai_response, parse_mode="HTML")
        
        # TTS —É–±—Ä–∞–Ω - –æ–∑–≤—É—á–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–ª–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        print(f"DEBUG: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–∑–≤—É—á–∫–∏")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def prepare_messages_with_vector_context(current_message: str, context: dict) -> list:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    messages = [
        {
            "role": "system",
            "content": """–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é. 
            –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
            –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë."""
        }
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    if context.get('knowledge_base'):
        knowledge_text = "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        for kb in context['knowledge_base']:
            knowledge_text += f"- {kb['topic']}: {kb['content']}\n"
        
        messages.append({
            "role": "system", 
            "content": knowledge_text
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
    if context.get('similar_conversations'):
        similar_text = "–ü–æ—Ö–æ–∂–∏–µ —Ç–µ–º—ã –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ:\n"
        for conv in context['similar_conversations'][:2]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
            similar_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–ª: {conv['user_message'][:100]}...\n"
            similar_text += f"–û—Ç–≤–µ—Ç –±—ã–ª: {conv['ai_response'][:100]}...\n\n"
        
        messages.append({
            "role": "system",
            "content": similar_text
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–∞–≤–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é
    for item in context.get('recent_history', []):
        if item.get('user_message'):
            messages.append({
                "role": "user",
                "content": item['user_message']
            })
        if item.get('ai_response'):
            messages.append({
                "role": "assistant",
                "content": item['ai_response']
            })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.append({
        "role": "user",
        "content": current_message
    })
    
    return messages

def correct_name_case(name: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂"""
    if not name:
        return name
    
    # –°–ª–æ–≤–∞—Ä—å —á–∞—Å—Ç—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–¥–µ–∂–∞—Ö
    name_corrections = {
        # –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
        '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∞': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        '–ª–µ–æ–Ω–∏–¥–∞': '–õ–µ–æ–Ω–∏–¥', 
        '–≤–ª–∞–¥–∏–º–∏—Ä–∞': '–í–ª–∞–¥–∏–º–∏—Ä',
        '–¥–º–∏—Ç—Ä–∏—è': '–î–º–∏—Ç—Ä–∏–π',
        '—Å–µ—Ä–≥–µ—è': '–°–µ—Ä–≥–µ–π',
        '–∞–Ω–¥—Ä–µ—è': '–ê–Ω–¥—Ä–µ–π',
        '–∞–ª–µ–∫—Å–µ—è': '–ê–ª–µ–∫—Å–µ–π',
        '–Ω–∏–∫–æ–ª–∞—è': '–ù–∏–∫–æ–ª–∞–π',
        '–º–∏—Ö–∞–∏–ª–∞': '–ú–∏—Ö–∞–∏–ª',
        '–ø–∞–≤–ª–∞': '–ü–∞–≤–µ–ª',
        '–∏–≥–æ—Ä—è': '–ò–≥–æ—Ä—å',
        '–æ–ª–µ–≥–∞': '–û–ª–µ–≥',
        '–∞–Ω—Ç–æ–Ω–∞': '–ê–Ω—Ç–æ–Ω',
        '—Ä–æ–º–∞–Ω–∞': '–†–æ–º–∞–Ω',
        '–º–∞–∫—Å–∏–º–∞': '–ú–∞–∫—Å–∏–º',
        '–∞—Ä—Ç–µ–º–∞': '–ê—Ä—Ç–µ–º',
        '–∏–≤–∞–Ω–∞': '–ò–≤–∞–Ω',
        '–ø–µ—Ç—Ä–∞': '–ü–µ—Ç—Ä',
        '—é—Ä–∏—è': '–Æ—Ä–∏–π',
        '–≤–∏–∫—Ç–æ—Ä–∞': '–í–∏–∫—Ç–æ—Ä',
        '–µ–≤–≥–µ–Ω–∏—è': '–ï–≤–≥–µ–Ω–∏–π',
        '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–∞': '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
        '–≤–∞–ª–µ—Ä–∏—è': '–í–∞–ª–µ—Ä–∏–π',
        
        # –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞
        '–∞–Ω–Ω—ã': '–ê–Ω–Ω–∞',
        '–µ–ª–µ–Ω—ã': '–ï–ª–µ–Ω–∞', 
        '–º–∞—Ä–∏–∏': '–ú–∞—Ä–∏—è',
        '–æ–ª—å–≥–∏': '–û–ª—å–≥–∞',
        '—Ç–∞—Ç—å—è–Ω—ã': '–¢–∞—Ç—å—è–Ω–∞',
        '–Ω–∞—Ç–∞–ª–∏–∏': '–ù–∞—Ç–∞–ª–∏—è',
        '–Ω–∞—Ç–∞–ª—å–µ': '–ù–∞—Ç–∞–ª—å—è',
        '—Å–≤–µ—Ç–ª–∞–Ω—ã': '–°–≤–µ—Ç–ª–∞–Ω–∞',
        '–∏—Ä–∏–Ω—ã': '–ò—Ä–∏–Ω–∞',
        '–ª—é–¥–º–∏–ª—ã': '–õ—é–¥–º–∏–ª–∞',
        '–≥–∞–ª–∏–Ω—ã': '–ì–∞–ª–∏–Ω–∞',
        '–≤–∞–ª–µ–Ω—Ç–∏–Ω—ã': '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞',
        '–Ω–∏–Ω—ã': '–ù–∏–Ω–∞',
        '–ª—é–±–æ–≤–∏': '–õ—é–±–æ–≤—å',
        '–µ–∫–∞—Ç–µ—Ä–∏–Ω—ã': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
        '–∞–ª–µ–Ω—ã': '–ê–ª–µ–Ω–∞',
        '—é–ª–∏–∏': '–Æ–ª–∏—è',
        '–∞–Ω–∞—Å—Ç–∞—Å–∏–∏': '–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
        '–¥–∞—Ä—å–∏': '–î–∞—Ä—å—è',
        '–≤–µ—Ä—ã': '–í–µ—Ä–∞',
        '–Ω–∞–¥–µ–∂–¥—ã': '–ù–∞–¥–µ–∂–¥–∞',
        '—Å–æ—Ñ–∏–∏': '–°–æ—Ñ–∏—è',
        '–≤–∏–∫—Ç–æ—Ä–∏–∏': '–í–∏–∫—Ç–æ—Ä–∏—è'
    }
    
    name_lower = name.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if name_lower in name_corrections:
        return name_corrections[name_lower]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –æ–∫–æ–Ω—á–∞–Ω–∏–π
    if name_lower.endswith('–∞') and len(name_lower) > 3:
        # –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞ –Ω–∞ -–∞ (–õ–µ–æ–Ω–∏–¥–∞ -> –õ–µ–æ–Ω–∏–¥)
        base_name = name_lower[:-1]
        if base_name + '–∞' in name_corrections:
            return name_corrections[base_name + '–∞']
        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å "–¥" (–õ–µ–æ–Ω–∏–¥–∞ -> –õ–µ–æ–Ω–∏–¥)
        if not base_name.endswith('–¥'):
            test_name = base_name + '–¥'
            if test_name.capitalize() in ['–õ–µ–æ–Ω–∏–¥', '–î–∞–≤–∏–¥', '–≠–¥—É–∞—Ä–¥']:
                return test_name.capitalize()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
    return name.strip().capitalize()

async def check_and_create_contact(message: Message, user_message: str, ai_response: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç—ã AI –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        user_id = message.from_user.id
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        contact_patterns = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –∏–º–µ–Ω–µ–º –∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            r"–¥–æ–±–∞–≤[—å–∏]\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+([–ê-–Ø–∞-—è]+(?:\s+[–ê-–Ø–∞-—è]+)*)\s+(\+?[0-9\-\(\)\s]{7,15})",
            r"—Å–æ–∑–¥–∞–π\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+([–ê-–Ø–∞-—è]+(?:\s+[–ê-–Ø–∞-—è]+)*)\s+(\+?[0-9\-\(\)\s]{7,15})",
            r"—Å–æ—Ö—Ä–∞–Ω–∏\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+([–ê-–Ø–∞-—è]+(?:\s+[–ê-–Ø–∞-—è]+)*)\s+(\+?[0-9\-\(\)\s]{7,15})",
            r"–∑–∞–ø–∏—à–∏\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+([–ê-–Ø–∞-—è]+(?:\s+[–ê-–Ø–∞-—è]+)*)\s+(\+?[0-9\-\(\)\s]{7,15})",
            
            # –° –∏–º–µ–Ω–µ–º –∏ email
            r"–¥–æ–±–∞–≤[—å–∏]\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+([–ê-–Ø–∞-—è]+(?:\s+[–ê-–Ø–∞-—è]+)*)\s+([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})",
            r"—Å–æ–∑–¥–∞–π\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+([–ê-–Ø–∞-—è]+(?:\s+[–ê-–Ø–∞-—è]+)*)\s+([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})",
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ —Å –∏–º–µ–Ω–µ–º (fallback)
            r"–¥–æ–±–∞–≤[—å–∏]\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+)",
            r"—Å–æ–∑–¥–∞–π\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+)",
            r"—Å–æ—Ö—Ä–∞–Ω–∏\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+)",
            r"–∑–∞–ø–∏—à–∏\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+)",
            r"–Ω–æ–≤—ã–π\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+)",
            
            # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–µ–±—è (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            r"–º–µ–Ω—è\s+–∑–æ–≤—É—Ç\s+(.+)",
            r"–º–æ–µ\s+–∏–º—è\s+(.+)",
            r"—è\s+([–ê-–Ø–∞-—è]{2,}(?:\s+[–ê-–Ø–∞-—è]{2,})*)",
            
            # –°—Ç–∞—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            r"–¥–æ–±–∞–≤[—å–∏]\s+(.+?)\s*[-‚Äì‚Äî]\s*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})",
            r"–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+?)\s*[-‚Äì‚Äî]\s*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})",
            
            # –ü—Ä–æ—Å—Ç–æ –∏–º—è –∏ email —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
            r"([–ê-–Ø–∞-—è]{2,}(?:\s+[–ê-–Ø–∞-—è]{2,})*)\s+([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})"
        ]
        
        import re
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for pattern in contact_patterns:
            match = re.search(pattern, user_message, re.IGNORECASE)
            if match:
                print(f"DEBUG: Contact creation pattern matched: {pattern}")
                
                if len(match.groups()) >= 2:
                    # –ï—Å—Ç—å –∏ –∏–º—è –∏ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä (email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
                    name = match.group(1).strip()
                    second_param = match.group(2).strip() if match.group(2) else None
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –≤–æ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ - email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
                    if second_param and '@' in second_param:
                        # –≠—Ç–æ email
                        email = second_param.strip()
                        phone = None
                    elif second_param and (second_param.startswith('+') or re.match(r'^[0-9\-\(\)\s]+$', second_param)):
                        # –≠—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        phone = second_param.strip()
                        email = None
                        print(f"DEBUG: Detected phone number: '{phone}'")
                    elif '@' in match.group(1):
                        # Email –≤ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ, –ø–∞—Ä—Å–∏–º –ø–æ-–¥—Ä—É–≥–æ–º—É
                        parts = match.group(1).strip().split()
                        email_part = None
                        name_parts = []
                        
                        for part in parts:
                            if '@' in part:
                                email_part = part
                            else:
                                name_parts.append(part)
                        
                        name = ' '.join(name_parts).strip()
                        email = email_part
                        phone = None
                    else:
                        email = None
                        phone = None
                else:
                    # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–∞—Ä—Å–∏–º –µ–≥–æ
                    contact_text = match.group(1).strip()
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ email –≤ —Ç–µ–∫—Å—Ç–µ
                    email_match = re.search(r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})', contact_text)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ç–µ–∫—Å—Ç–µ
                    phone_match = re.search(r'(\+?[0-9\-\(\)\s]{7,15})', contact_text)
                    
                    if email_match:
                        email = email_match.group(1)
                        phone = None
                        # –ò–º—è - —ç—Ç–æ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
                        name = contact_text.replace(email, '').strip()
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                        name = re.sub(r'[-‚Äì‚Äî\s]+$', '', name).strip()
                    elif phone_match:
                        phone = phone_match.group(1)
                        email = None
                        print(f"DEBUG: Fallback detected phone: '{phone}'")
                        # –ò–º—è - —ç—Ç–æ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
                        name = contact_text.replace(phone, '').strip()
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                        name = re.sub(r'[-‚Äì‚Äî\s]+$', '', name).strip()
                    else:
                        # –ù–µ—Ç email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–æ–ª—å–∫–æ –∏–º—è
                        name = contact_text
                        email = None
                        phone = None
                
                if name and len(name) > 1:
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    corrected_name = correct_name_case(name)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–µ–±—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ
                    is_self_introduction = any(re.search(pattern, user_message, re.IGNORECASE) for pattern in [
                        r"–º–µ–Ω—è\s+–∑–æ–≤—É—Ç", r"–º–æ–µ\s+–∏–º—è", r"—è\s+"
                    ])
                    
                    await create_contact_from_text(message, corrected_name, email, user_id, is_self_introduction, phone)
                    return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç AI –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
        ai_patterns = [
            r"—Å–æ–∑–¥–∞–ª\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+)",
            r"–¥–æ–±–∞–≤–∏–ª\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+)",
            r"—Å–æ—Ö—Ä–∞–Ω–∏–ª\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+)",
            r"–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+?)\s+—Å–æ–∑–¥–∞–Ω",
            r"–∫–æ–Ω—Ç–∞–∫—Ç\s+(.+?)\s+–¥–æ–±–∞–≤–ª–µ–Ω"
        ]
        
        for pattern in ai_patterns:
            match = re.search(pattern, ai_response, re.IGNORECASE)
            if match:
                print(f"DEBUG: AI response indicates contact creation: {match.group(1)}")
                # AI –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º –¥—É–±–ª–∏–∫–∞—Ç
                return True
        
        return False
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        return False

async def handle_name_questions(message: Message, user_message: str, ai_response: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–º–µ–Ω–∏ –∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        user_id = message.from_user.id
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –∏–º–µ–Ω–∏
        name_question_patterns = [
            r"–∫–∞–∫\s+–º–µ–Ω—è\s+–∑–æ–≤—É—Ç",
            r"–∫–∞–∫\s+–º–æ–µ\s+–∏–º—è",
            r"–∫–∞–∫–æ–µ\s+–º–æ–µ\s+–∏–º—è",
            r"–∫–∞–∫\s+–º–µ–Ω—è\s+–∑–≤–∞—Ç—å",
            r"–º–æ–µ\s+–∏–º—è",
            r"–∑–Ω–∞–µ—à—å\s+–º–æ–µ\s+–∏–º—è",
            r"–ø–æ–º–Ω–∏—à—å\s+–º–æ–µ\s+–∏–º—è",
            r"–∫–∞–∫\s+–º–µ–Ω—è\s+–Ω–∞–∑—ã–≤–∞—Ç—å",
            r"–∑–Ω–∞–µ—à—å.*–∫–∞–∫.*–∑–æ–≤—É—Ç",
            r"–ø–æ–º–Ω–∏—à—å.*–∫–∞–∫.*–∑–æ–≤—É—Ç"
        ]
        
        import re
        user_message_lower = user_message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–ø—Ä–æ—Å –æ–± –∏–º–µ–Ω–∏
        is_name_question = any(re.search(pattern, user_message_lower) for pattern in name_question_patterns)
        
        if not is_name_question:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–º–µ–Ω–∏
        from database.contacts import contacts_manager
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏
        user_contacts = await contacts_manager.get_all_contacts(user_id)
        user_contact = None
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π "–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–º
        for contact in user_contacts:
            if contact.notes and ("–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" in contact.notes.lower() or 
                                "–º–æ–µ –∏–º—è" in contact.notes.lower() or
                                "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" in contact.notes.lower()):
                user_contact = contact
                break
        
        if user_contact:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            await message.answer(
                f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user_contact.name}!</b>\n\n"
                f"‚úÖ <b>–Ø –ø–æ–º–Ω—é —Ç–µ–±—è!</b>\n\n"
                f"üìù <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:</b>\n"
                f"üë§ <b>–ò–º—è:</b> {user_contact.name}\n"
                + (f"üìß <b>Email:</b> {user_contact.email}\n" if user_contact.email else "") +
                + (f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_contact.phone}\n" if user_contact.phone else "") +
                + (f"üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {user_contact.notes}\n" if user_contact.notes else "") +
                f"\nüí° <b>–•–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?</b> –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏: \"–ú–µ–Ω—è –∑–æ–≤—É—Ç [–Ω–æ–≤–æ–µ –∏–º—è]\"",
                parse_mode="HTML"
            )
        else:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            
            builder.button(text="üëã –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!", callback_data="introduce_myself")
            builder.button(text="üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è —Å–µ–π—á–∞—Å", callback_data="save_name_now")
            builder.button(text="ü§ñ –ü—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è", callback_data="just_chat")
            
            builder.adjust(1, 1, 1)
            
            await message.answer(
                f"üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
                f"üòä <b>–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, –Ω–æ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–∑–Ω–∞–∫–æ–º–ª—é—Å—å!</b>\n\n"
                f"ü§ù <b>–Ø —É–º–µ—é:</b>\n"
                f"‚Ä¢ üìù –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–≤–æ–µ –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
                f"‚Ä¢ üë• –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n"
                f"‚Ä¢ üìß –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–∞\n"
                f"‚Ä¢ üìÖ –†–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º\n"
                f"‚Ä¢ üß† –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã\n\n"
                f"üí° <b>–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?</b>",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if vector_memory:
            corrected_response = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª –æ —Å–≤–æ–µ–º –∏–º–µ–Ω–∏. {'–Ø –∑–Ω–∞—é –µ–≥–æ –∏–º—è: ' + user_contact.name if user_contact else '–Ø –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.'}"
            await vector_memory.save_conversation(user_id, user_message, corrected_response)
        else:
            from database.memory import memory
            corrected_response = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª –æ —Å–≤–æ–µ–º –∏–º–µ–Ω–∏. {'–Ø –∑–Ω–∞—é –µ–≥–æ –∏–º—è: ' + user_contact.name if user_contact else '–Ø –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.'}"
            memory.save_message(user_id, user_message, corrected_response)
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ–± –∏–º–µ–Ω–∏: {e}")
        return False

async def create_contact_from_text(message: Message, name: str, email: str, user_id: int, is_self_introduction: bool = False, phone: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from database.contacts import contacts_manager, Contact
        
        # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        name = name.strip()
        if not name or len(name) < 2:
            await message.answer("‚ùå –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å
        if email:
            email = email.strip().lower()
            import re
            if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
                await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å: {email}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç
        existing_contacts = await contacts_manager.search_contacts(user_id, name)
        
        if existing_contacts:
            for contact in existing_contacts:
                if contact.name.lower() == name.lower():
                    await message.answer(
                        f"‚ÑπÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
                        f"üë§ <b>–ò–º—è:</b> {contact.name}\n"
                        f"üìß <b>Email:</b> {contact.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {contact.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç.",
                        parse_mode="HTML"
                    )
                    return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∑–∞–º–µ—Ç–∫–∏
        if is_self_introduction:
            notes = "–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –º–æ–µ –∏–º—è"
            contact_type = "–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        else:
            notes = "–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"
            contact_type = "–∫–æ–Ω—Ç–∞–∫—Ç"
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞
        new_contact = Contact(
            name=name,
            email=email or '',
            phone=phone or '',
            notes=notes
        )
        
        print(f"DEBUG: Creating contact - name: '{name}', email: '{email}', phone: '{phone}'")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É
        success = await contacts_manager.add_contact(user_id, new_contact)
        contact_id = new_contact.id if success else None
        
        if contact_id:
            if is_self_introduction:
                success_message = f"üéâ <b>–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!</b>\n\n"
                success_message += f"‚úÖ <b>–Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n"
                success_message += f"üë§ <b>–ò–º—è:</b> {name}\n"
                
                if email:
                    success_message += f"üìß <b>Email:</b> {email}\n"
                
                success_message += f"\nü§ñ <b>–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏!</b>\n"
                success_message += f"üí° <b>–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–∫–∞–∂–∏:</b> \"–ú–µ–Ω—è –∑–æ–≤—É—Ç [–Ω–æ–≤–æ–µ –∏–º—è]\""
            else:
                success_message = f"‚úÖ <b>–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                success_message += f"üë§ <b>–ò–º—è:</b> {name}\n"
                
                if email:
                    success_message += f"üìß <b>Email:</b> {email}\n"
                
                if phone:
                    success_message += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
                
                success_message += f"\nüí° –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç: –ú–µ–Ω—é ‚Üí üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            
            if is_self_introduction:
                builder.button(text="üì± –ú–µ–Ω—é", callback_data="menu_back")
                builder.button(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"contact_edit_{contact_id}")
                if email:
                    builder.button(text="üìß –ù–∞–ø–∏—Å–∞—Ç—å —Å–µ–±–µ –ø–∏—Å—å–º–æ", callback_data=f"contact_email_{email}")
                builder.adjust(1, 1, 1)
            else:
                builder.button(text="üë• –ö –∫–æ–Ω—Ç–∞–∫—Ç–∞–º", callback_data="contacts_menu")
                builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"contact_edit_{contact_id}")
                if email:
                    builder.button(text="üìß –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", callback_data=f"contact_email_{email}")
                builder.adjust(2, 1)
            
            await message.answer(
                success_message,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
            
            print(f"DEBUG: Contact created successfully - ID: {contact_id}, Name: {name}, Email: {email}, Phone: {phone}")
            return True
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>\n\n"
            f"üîß <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {str(e)[:100]}\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é: üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã",
            parse_mode="HTML"
        )
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∏—Å–µ–º
@router.callback_query(F.data.startswith("email_send_"))
async def send_email_callback(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ"""
    email_id = callback.data.split("_")[-1]
    email_data = temp_emails.get_email(email_id)
    
    if not email_data:
        await callback.answer("‚ùå –ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if email_data["user_id"] != callback.from_user.id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Å—å–º—É", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    success = await email_sender.send_email(
        user_id=email_data["user_id"],
        to_email=email_data["to_email"],
        subject=email_data["subject"],
        body=email_data["body"]
    )
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üìß <b>–ö–æ–º—É:</b> {email_data['to_email']}\n"
            f"üìù <b>–¢–µ–º–∞:</b> {email_data['subject']}\n"
            f"üíå <b>–¢–µ–∫—Å—Ç:</b> {email_data['body'][:150]}{'...' if len(email_data['body']) > 150 else ''}",
            parse_mode="HTML"
        )
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        temp_emails.delete_email(email_id)
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@router.callback_query(F.data.startswith("email_edit_subject_"))
async def edit_subject_callback(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É –ø–∏—Å—å–º–∞"""
    email_id = callback.data.split("_")[-1]
    email_data = temp_emails.get_email(email_id)
    
    if not email_data or email_data["user_id"] != callback.from_user.id:
        await callback.answer("‚ùå –ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Å—å–º—É", callback_data=f"email_back_{email_id}")]
    ])
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –ø–∏—Å—å–º–∞</b>\n\n"
        f"üìß <b>–ö–æ–º—É:</b> {email_data['to_email']}\n"
        f"üìù <b>–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞:</b> {email_data['subject']}\n\n"
        f"üí° –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –ø–∏—Å—å–º–∞:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await state.set_state(EmailStates.editing_subject)
    await state.update_data(email_id=email_id)
    await callback.answer()

@router.callback_query(F.data.startswith("email_edit_body_"))
async def edit_body_callback(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"""
    email_id = callback.data.split("_")[-1]
    email_data = temp_emails.get_email(email_id)
    
    if not email_data or email_data["user_id"] != callback.from_user.id:
        await callback.answer("‚ùå –ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Å—å–º—É", callback_data=f"email_back_{email_id}")]
    ])
    
    await callback.message.edit_text(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞</b>\n\n"
        f"üìß <b>–ö–æ–º—É:</b> {email_data['to_email']}\n"
        f"üìù <b>–¢–µ–º–∞:</b> {email_data['subject']}\n\n"
        f"üíå <b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n{email_data['body']}\n\n"
        f"üí° –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await state.set_state(EmailStates.editing_body)
    await state.update_data(email_id=email_id)
    await callback.answer()

@router.callback_query(F.data.startswith("email_save_draft_"))
async def save_draft_callback(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∏—Å—å–º–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"""
    try:
        email_id = callback.data.split("_")[-1]
        email_data = temp_emails.get_email(email_id)
        
        if not email_data or email_data["user_id"] != callback.from_user.id:
            await callback.answer("‚ùå –ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from database.drafts import drafts_manager
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
        draft_data = {
            "to": email_data["to_email"],
            "subject": email_data["subject"],
            "body": email_data["body"]
        }
        draft_id = drafts_manager.create_draft(email_data["user_id"], draft_data)
        
        await callback.message.edit_text(
            f"üíæ <b>–ü–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏!</b>\n\n"
            f"üìß <b>–ö–æ–º—É:</b> {email_data['to_email']}\n"
            f"üìù <b>–¢–µ–º–∞:</b> {email_data['subject']}\n"
            f"üÜî <b>ID —á–µ—Ä–Ω–æ–≤–∏–∫–∞:</b> {draft_id}\n\n"
            f"üí° –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ß–µ—Ä–Ω–æ–≤–∏–∫–∏' —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        temp_emails.delete_email(email_id)
        await callback.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏!")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("email_improve_"))
async def improve_email_callback(callback: CallbackQuery):
    """–£–ª—É—á—à–∏—Ç—å –ø–∏—Å—å–º–æ —Å –ø–æ–º–æ—â—å—é AI"""
    email_id = callback.data.split("_")[-1]
    email_data = temp_emails.get_email(email_id)
    
    if not email_data or email_data["user_id"] != callback.from_user.id:
        await callback.answer("‚ùå –ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–ª—É—á—à–µ–Ω–∏—è
    await callback.message.edit_text(
        "ü§ñ <b>–£–ª—É—á—à–∞—é –ø–∏—Å—å–º–æ —Å –ø–æ–º–æ—â—å—é AI...</b>\n\n"
        "‚è≥ –ò—Å–ø—Ä–∞–≤–ª—è—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ —Å—Ç–∏–ª—å...",
        parse_mode="HTML"
    )
    
    try:
        # –£–ª—É—á—à–∞–µ–º –ø–∏—Å—å–º–æ
        improved_subject, improved_body = await email_improver.improve_email(
            email_data["subject"], 
            email_data["body"]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        temp_emails.update_email(email_id, subject=improved_subject, body=improved_body)
        email_data = temp_emails.get_email(email_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_text = temp_emails.format_email_preview(email_data)
        preview_text += "\n\n‚ú® <i>–ü–∏—Å—å–º–æ —É–ª—É—á—à–µ–Ω–æ AI: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è –∏ —Å—Ç–∏–ª—å</i>"
        
        await callback.message.edit_text(
            preview_text,
            reply_markup=keyboards.email_confirm_menu(email_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Å—å–º–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=keyboards.email_confirm_menu(email_id),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("email_expand_"))
async def expand_email_callback(callback: CallbackQuery):
    """–î–æ–ø–æ–ª–Ω–∏—Ç—å –ø–∏—Å—å–º–æ —Å –ø–æ–º–æ—â—å—é AI"""
    email_id = callback.data.split("_")[-1]
    email_data = temp_emails.get_email(email_id)
    
    if not email_data or email_data["user_id"] != callback.from_user.id:
        await callback.answer("‚ùå –ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    await callback.message.edit_text(
        "üß† <b>–î–æ–ø–æ–ª–Ω—è—é –ø–∏—Å—å–º–æ —Å –ø–æ–º–æ—â—å—é AI...</b>\n\n"
        "‚è≥ –î–æ–±–∞–≤–ª—è—é –¥–µ—Ç–∞–ª–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —É–ª—É—á—à–∞—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...",
        parse_mode="HTML"
    )
    
    try:
        from utils.openai_client import openai_client
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∏—Å—å–º–∞
        prompt = f"""–î–æ–ø–æ–ª–Ω–∏ —ç—Ç–æ –¥–µ–ª–æ–≤–æ–µ –ø–∏—Å—å–º–æ, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º:

–¢–ï–ú–ê: {email_data["subject"]}

–¢–ï–ö–£–©–ò–ô –¢–ï–ö–°–¢:
{email_data["body"]}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ—Ö—Ä–∞–Ω–∏ –≤–µ–∂–ª–∏–≤—ã–π –¥–µ–ª–æ–≤–æ–π —Ç–æ–Ω
2. –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
3. –°–¥–µ–ª–∞–π –ø–∏—Å—å–º–æ –±–æ–ª–µ–µ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º
4. –î–ª–∏–Ω–∞: 3-5 –∞–±–∑–∞—Ü–µ–≤
5. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å + –∑–∞–∫–ª—é—á–µ–Ω–∏–µ + –ø–æ–¥–ø–∏—Å—å
6. –ù–ï –∏–∑–º–µ–Ω—è–π —Ç–µ–º—É –ø–∏—Å—å–º–∞

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:"""

        messages = [
            {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ. –î–æ–ø–æ–ª–Ω—è–π –ø–∏—Å—å–º–∞, –¥–µ–ª–∞—è –∏—Ö –±–æ–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å."},
            {"role": "user", "content": prompt}
        ]
        
        expanded_body = await openai_client.chat_completion(messages)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        temp_emails.update_email(email_id, body=expanded_body)
        email_data = temp_emails.get_email(email_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_text = temp_emails.format_email_preview(email_data)
        preview_text += "\n\nüß† <i>–ü–∏—Å—å–º–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–æ AI: –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç</i>"
        
        await callback.message.edit_text(
            preview_text,
            reply_markup=keyboards.email_confirm_menu(email_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∏—Å—å–º–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=keyboards.email_confirm_menu(email_id),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("email_back_"))
async def back_to_email_callback(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–∏—Å—å–º–∞"""
    email_id = callback.data.split("_")[-1]
    email_data = temp_emails.get_email(email_id)
    
    if not email_data or email_data["user_id"] != callback.from_user.id:
        await callback.answer("‚ùå –ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    preview_text = temp_emails.format_email_preview(email_data)
    await callback.message.edit_text(
        preview_text,
        reply_markup=keyboards.email_confirm_menu(email_id),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("email_cancel_"))
async def cancel_email_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞"""
    email_id = callback.data.split("_")[-1]
    
    await callback.message.edit_text(
        "‚ùå <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Å–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∏.",
        parse_mode="HTML"
    )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
    temp_emails.delete_email(email_id)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(EmailStates.editing_subject)
async def handle_subject_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã"""
    data = await state.get_data()
    email_id = data.get("email_id")
    
    if not email_id:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    new_subject = message.text.strip()
    if not new_subject:
        await message.answer("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É
    temp_emails.update_email(email_id, subject=new_subject)
    email_data = temp_emails.get_email(email_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = temp_emails.format_email_preview(email_data)
    
    await message.answer(
        preview_text,
        reply_markup=keyboards.email_confirm_menu(email_id),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.message(EmailStates.editing_body)
async def handle_body_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    email_id = data.get("email_id")
    
    if not email_id:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    new_body = message.text.strip()
    if not new_body:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    temp_emails.update_email(email_id, body=new_body)
    email_data = temp_emails.get_email(email_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = temp_emails.format_email_preview(email_data)
    
    await message.answer(
        preview_text,
        reply_markup=keyboards.email_confirm_menu(email_id),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.callback_query(F.data.startswith("search_details_"))
async def search_details_callback(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    user_id = callback.from_user.id
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        import json
        import os
        from utils.html_utils import escape_html, truncate_and_escape
        
        cache_file = os.path.join("data/search_cache", f"user_{user_id}_last_search.json")
        
        if not os.path.exists(cache_file):
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        with open(cache_file, 'r', encoding='utf-8') as f:
            cache_data = json.load(f)
        
        search_results = cache_data.get('results', [])
        search_query = cache_data.get('query', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        if not search_results:
            await callback.answer("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        detailed_text = f"üìñ <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∏—Å–∫–∞</b>\n\n"
        detailed_text += f"üîç <b>–ó–∞–ø—Ä–æ—Å:</b> {escape_html(search_query)}\n"
        detailed_text += f"üì¨ <b>–ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º:</b> {len(search_results)}\n\n"
        
        for i, email_data in enumerate(search_results, 1):
            sender = email_data.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
            subject = email_data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
            date = email_data.get('date', '')
            content = email_data.get('content', email_data.get('body', ''))
            
            detailed_text += f"<b>üìß –ü–∏—Å—å–º–æ {i}:</b>\n"
            detailed_text += f"üë§ <b>–û—Ç:</b> {truncate_and_escape(sender, 40)}\n"
            detailed_text += f"üìù <b>–¢–µ–º–∞:</b> {truncate_and_escape(subject, 50)}\n"
            
            if date:
                detailed_text += f"üïê <b>–î–∞—Ç–∞:</b> {escape_html(str(date)[:19])}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            if content:
                content_preview = truncate_and_escape(content.strip(), 150)
                detailed_text += f"üìÑ <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n{content_preview}\n"
            
            detailed_text += "\n" + "‚îÄ" * 30 + "\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(detailed_text) > 3500:
                detailed_text = detailed_text[:3500] + "\n\n<i>... –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ –ø–∏—Å—å–º–∞ ...</i>"
                break
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.button(text="üì® –ö –≤—Ö–æ–¥—è—â–∏–º", callback_data="mail_inbox")
        builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="mail_search")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="search_back")
        builder.button(text="‚ùå –í—ã–π—Ç–∏", callback_data="menu_back")
        
        builder.adjust(2, 2)
        
        await callback.message.edit_text(
            detailed_text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π: {str(e)[:50]}...", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data == "search_back")
async def search_back_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫—Ä–∞—Ç–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
    user_id = callback.from_user.id
    
    try:
        import json
        import os
        from utils.html_utils import escape_html, truncate_and_escape
        
        cache_file = os.path.join("data/search_cache", f"user_{user_id}_last_search.json")
        
        if not os.path.exists(cache_file):
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        with open(cache_file, 'r', encoding='utf-8') as f:
            cache_data = json.load(f)
        
        search_results = cache_data.get('results', [])
        search_query = cache_data.get('query', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –í–æ—Å—Å–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
        results_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
        results_text += f"üìù <b>–ó–∞–ø—Ä–æ—Å:</b> {escape_html(search_query)}\n"
        results_text += f"üì¨ <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(search_results)} –ø–∏—Å–µ–º\n\n"
        
        for i, email_data in enumerate(search_results, 1):
            sender = email_data.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
            subject = email_data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
            date = email_data.get('date', '')
            
            sender_escaped = truncate_and_escape(sender, 25)
            subject_escaped = truncate_and_escape(subject, 35)
            
            results_text += f"<b>{i}.</b> üë§ {sender_escaped}\n"
            results_text += f"üìù {subject_escaped}\n"
            if date:
                results_text += f"üïê {escape_html(str(date)[:16])}\n"
            results_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.button(
            text="üìñ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", 
            callback_data=f"search_details_{len(search_results)}"
        )
        builder.button(text="üì® –ö –≤—Ö–æ–¥—è—â–∏–º", callback_data="mail_inbox")
        builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="mail_search")
        builder.button(text="‚ùå –í—ã–π—Ç–∏", callback_data="menu_back")
        
        builder.adjust(1, 3)
        
        await callback.message.edit_text(
            results_text,
            parse_mode="HTML", 
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}...", show_alert=True)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
@router.callback_query(F.data == "introduce_myself")
async def introduce_myself_callback(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"""
    await callback.message.edit_text(
        f"üëã <b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!</b>\n\n"
        f"üí¨ <b>–ù–∞–ø–∏—à–∏ –º–Ω–µ:</b>\n"
        f"\"–ú–µ–Ω—è –∑–æ–≤—É—Ç [—Ç–≤–æ–µ –∏–º—è]\"\n\n"
        f"üìß <b>–ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å email:</b>\n"
        f"\"–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω, –º–æ–π email ivan@example.com\"\n\n"
        f"üí° –Ø –∑–∞–ø–æ–º–Ω—é —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±—É–¥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∏–º–µ–Ω–∏!",
        parse_mode="HTML"
    )
    await callback.answer("–ñ–¥—É —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º! üòä")

@router.callback_query(F.data == "save_name_now")  
async def save_name_now_callback(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    await callback.message.edit_text(
        f"üìù <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏</b>\n\n"
        f"‚úèÔ∏è <b>–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</b>\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ \"–ê–ª–µ–∫—Å–∞–Ω–¥—Ä\"\n"
        f"‚Ä¢ \"–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞\"\n"
        f"‚Ä¢ \"–ò–≤–∞–Ω email@example.com\"\n\n"
        f"üí° –Ø —Å–æ—Ö—Ä–∞–Ω—é —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏!",
        parse_mode="HTML"
    )
    await callback.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è!")

@router.callback_query(F.data == "just_chat")
async def just_chat_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
    await callback.message.edit_text(
        f"ü§ñ <b>–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è!</b>\n\n"
        f"üí¨ <b>–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:</b>\n"
        f"‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–æ–π –ø–∏—Å–µ–º\n"  
        f"‚Ä¢ –†–∞–±–æ—Ç–æ–π —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º\n"
        f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n"
        f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n\n"
        f"üìù <b>–ï—Å–ª–∏ –ø–æ–∑–∂–µ –∑–∞—Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–µ –∏–º—è, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏:</b>\n"
        f"\"–ú–µ–Ω—è –∑–æ–≤—É—Ç [–∏–º—è]\"",
        parse_mode="HTML"
    )
    await callback.answer("–ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é! üòä")

@router.message(~F.text & ~F.voice)
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –≥–æ–ª–æ—Å)"""
    await message.answer("ü§î –Ø –ø–æ–∫–∞ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")