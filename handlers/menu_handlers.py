from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.keyboards import keyboards
from database.vector_memory import vector_memory
from config.settings import settings
from utils.html_utils import escape_html, escape_email, truncate_and_escape
from utils.email_analyzer import email_analyzer

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ handlers/auth.py –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

@router.message(F.text == "üì± –ú–µ–Ω—é")
async def show_full_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    menu_text = """
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:

<i>üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω—É–∂–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º</i>
    """
    
    await message.answer(
        menu_text,
        reply_markup=keyboards.full_menu(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–µ–Ω—é
@router.callback_query(F.data == "close_menu")
async def close_menu(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")

@router.callback_query(F.data == "menu_chat")
async def menu_chat_callback(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ —Å AI"""
    await callback.message.edit_text(
        "üí¨ <b>–ß–∞—Ç —Å AI</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Å –ø–æ–º–æ—â—å—é ChatGPT!\n\n"
        "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –∑–∞–¥–∞—á–∞–º–∏\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç—ã\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω—è—é —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã\n\n"
        "üí° <i>–ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å!</i>",
        reply_markup=keyboards.back_button("menu_back"),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "menu_voice")
async def menu_voice_callback(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
    await callback.message.edit_text(
        "üé§ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è:\n"
        "‚Ä¢ üéß –†–∞—Å–ø–æ–∑–Ω–∞—é –≤–∞—à—É —Ä–µ—á—å\n"
        "‚Ä¢ ü§ñ –û–±—Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ AI\n"
        "‚Ä¢ üîä –û—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "üìù <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ Telegram\n"
        "2. –ó–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ\n\n"
        "‚ú® <i>–¢–∞–∫–∂–µ –ø–æ—Å–ª–µ –º–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å ¬´üé§ –û–∑–≤—É—á–∏—Ç—å¬ª</i>",
        reply_markup=keyboards.back_button("menu_back"),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞ - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–í–´–ú
@router.callback_query(F.data == "settings_email_search")
async def settings_email_search_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º"""
    user_id = callback.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
    import json
    import os
    
    settings_dir = "data/search_settings"
    os.makedirs(settings_dir, exist_ok=True)
    settings_file = os.path.join(settings_dir, f"user_{user_id}_search.json")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_settings = {
        'search_limit': 10,           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        'content_analysis': False,    # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∏—Å–µ–º
        'search_in_body': True,       # –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞
        'search_in_attachments': False, # –ü–æ–∏—Å–∫ –≤ –≤–ª–æ–∂–µ–Ω–∏—è—Ö
        'date_range_days': 365,       # –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –≤ –¥–Ω—è—Ö
        'priority_search': False      # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ (–±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –º–µ–Ω–µ–µ —Ç–æ—á–Ω–æ)
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_settings = default_settings.copy()
    if os.path.exists(settings_file):
        try:
            with open(settings_file, 'r', encoding='utf-8') as f:
                user_settings = json.load(f)
                current_settings.update(user_settings)
        except Exception as e:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            pass
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    text = "üîç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º</b>\n\n"
    text += "üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
    
    text += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: <b>{current_settings['search_limit']}</b>\n"
    text += f"üîç –ü–æ–∏—Å–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º: {'‚úÖ' if current_settings['search_in_body'] else '‚ùå'}\n"
    text += f"üß† AI –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è: {'‚úÖ' if current_settings['content_analysis'] else '‚ùå'}\n"
    text += f"üìé –ü–æ–∏—Å–∫ –≤ –≤–ª–æ–∂–µ–Ω–∏—è—Ö: {'‚úÖ' if current_settings['search_in_attachments'] else '‚ùå'}\n"
    text += f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞: <b>{current_settings['date_range_days']}</b> –¥–Ω–µ–π\n"
    text += f"‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫: {'‚úÖ' if current_settings['priority_search'] else '‚ùå'}\n\n"
    
    text += "üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n"
    text += "‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ\n"
    text += "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ - –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö\n"
    text += "‚Ä¢ –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –ø–æ–∏—Å–∫"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    builder.add(InlineKeyboardButton(
        text=f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {current_settings['search_limit']}", 
        callback_data="search_setting_limit"
    ))
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
    body_text = "üîç –ü–æ–∏—Å–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º: " + ("‚úÖ" if current_settings['search_in_body'] else "‚ùå")
    builder.add(InlineKeyboardButton(text=body_text, callback_data="search_toggle_body"))
    
    ai_text = "üß† AI –∞–Ω–∞–ª–∏–∑: " + ("‚úÖ" if current_settings['content_analysis'] else "‚ùå")
    builder.add(InlineKeyboardButton(text=ai_text, callback_data="search_toggle_ai"))
    
    attach_text = "üìé –ü–æ–∏—Å–∫ –≤ –≤–ª–æ–∂–µ–Ω–∏—è—Ö: " + ("‚úÖ" if current_settings['search_in_attachments'] else "‚ùå")
    builder.add(InlineKeyboardButton(text=attach_text, callback_data="search_toggle_attachments"))
    
    days_text = f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω: {current_settings['date_range_days']} –¥–Ω"
    builder.add(InlineKeyboardButton(text=days_text, callback_data="search_setting_days"))
    
    priority_text = "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫: " + ("‚úÖ" if current_settings['priority_search'] else "‚ùå")
    builder.add(InlineKeyboardButton(text=priority_text, callback_data="search_toggle_priority"))
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.add(
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="search_save_settings"),
        InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="search_reset_settings")
    )
    
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="category_settings"))
    
    # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞: –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–æ 2 –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.adjust(1, 1, 1, 1, 1, 1, 2, 1)
    
    await callback.message.edit_text(
        text, 
        reply_markup=builder.as_markup(), 
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "menu_back")
async def menu_back_callback(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
        reply_markup=keyboards.full_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "category_mail")
async def category_mail_callback(callback: CallbackQuery):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü–æ—á—Ç–∞"""
    user_id = callback.from_user.id
    from utils.email_sender import email_sender
    is_connected = await email_sender.can_send_email(user_id)
    
    status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if is_connected else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
    
    await callback.message.edit_text(
        f"üìß <b>–ü–æ—á—Ç–∞</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º\n"
        "‚Ä¢ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏\n"
        "‚Ä¢ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∏—Å–µ–º\n\n"
        "üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=keyboards.mail_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "category_calendar")
async def category_calendar_callback(callback: CallbackQuery):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–∞–ª–µ–Ω–¥–∞—Ä—å"""
    user_id = callback.from_user.id
    from database.user_tokens import user_tokens
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    token_data = await user_tokens.get_token_data(user_id, "calendar")
    is_connected = bool(token_data and token_data.get("app_password"))
    
    status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if is_connected else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
    
    await callback.message.edit_text(
        f"üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≥–æ–ª–æ—Å–æ–º\n"
        "‚Ä¢ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á\n\n"
        "üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=keyboards.calendar_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "category_memory")
async def category_memory_callback(callback: CallbackQuery):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü–∞–º—è—Ç—å"""
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if vector_memory else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    
    await callback.message.edit_text(
        f"üß† <b>–ü–∞–º—è—Ç—å –±–æ—Ç–∞</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n\n"
        "üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=keyboards.category_memory_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "category_ai")
async def category_ai_callback(callback: CallbackQuery):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è: AI –ü–æ–º–æ—â–Ω–∏–∫"""
    await callback.message.edit_text(
        "üí¨ <b>AI –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
        "ü§ñ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ –ü–æ–º–æ—â—å —Å –∑–∞–¥–∞—á–∞–º–∏\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ\n\n"
        "üé® <b>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
        "‚Ä¢ üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç\n"
        "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º\n"
        "‚Ä¢ üìù –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏\n"
        "‚Ä¢ üß† –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        "üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=keyboards.ai_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "category_settings")
async def category_settings_callback(callback: CallbackQuery):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–≤—É–∫–∏\n"
        "‚Ä¢ –Ø–∑—ã–∫ –∏ —Ä–µ–≥–∏–æ–Ω\n"
        "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n"
        "üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b>",
        reply_markup=keyboards.category_settings_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "help_menu")
async def help_menu_callback(callback: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞ –∏–∑ –º–µ–Ω—é"""
    help_text = """
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

üìß <b>–ü–æ—á—Ç–∞ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ø–Ω–¥–µ–∫—Å —Å–µ—Ä–≤–∏—Å—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–∏—Å—å–º–∞–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏

üß† <b>–ü–∞–º—è—Ç—å:</b>
‚Ä¢ –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
‚Ä¢ –ò—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤–∞–∂–Ω—ã–µ –∑–Ω–∞–Ω–∏—è

üí° <b>–°–æ–≤–µ—Ç:</b> –ó–∞–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å!
    """
    
    await callback.message.edit_text(
        help_text,
        reply_markup=keyboards.back_button("menu_back"),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "memory_stats")
async def memory_stats_callback(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏"""
    if not vector_memory:
        await callback.answer("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", show_alert=True)
        return
    
    try:
        user_id = callback.from_user.id
        stats = await vector_memory.get_user_stats(user_id)
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏</b>

üí¨ –í—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: <code>{stats.get('total_conversations', 0)}</code>
üß† –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: <code>{stats.get('knowledge_entries', 0)}</code>
üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{stats.get('avg_conversation_length', 0):.0f}</code> —Å–∏–º–≤–æ–ª–æ–≤

üìÖ –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: <code>{stats.get('first_interaction', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}</code>
üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: <code>{stats.get('last_interaction', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}</code>

üí° <i>–ü–∞–º—è—Ç—å —É–ª—É—á—à–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º!</i>
        """
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboards.back_button("memory_menu"),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data.startswith("yandex_"))
async def yandex_handlers(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ø–Ω–¥–µ–∫—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    action = callback.data.replace("yandex_", "")
    
    if action == "benefits":
        await callback.message.edit_text(
            "üåü <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å</b>\n\n"
            "üìß <b>–Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–∞:</b>\n"
            "‚Ä¢ –ß—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ AI\n"
            "‚Ä¢ –£–º–Ω–æ–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\n\n"
            "üìÖ <b>–Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≥–æ–ª–æ—Å–æ–º\n"
            "‚Ä¢ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á\n\n"
            "üîí <i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ!</i>",
            reply_markup=keyboards.yandex_connect_menu(),
            parse_mode="HTML"
        )
    
    await callback.answer()


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.callback_query(F.data == "settings_menu")
async def settings_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=keyboards.settings_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "memory_menu")
async def memory_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–∞–º—è—Ç–∏"""
    await callback.message.edit_text(
        "üß† <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.memory_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "mail_inbox")
async def mail_inbox_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—á—Ç—ã
    from utils.email_sender import email_sender
    if not await email_sender.can_send_email(user_id):
        await callback.message.edit_text(
            "üìß <b>–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞</b>\n\n"
            "üîß <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìß –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ü–æ—á—Ç—É¬ª\n"
            "2. –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–∏—Å—å–º–∞–º\n\n"
            "üí° –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ß–∏—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞\n"
            "‚Ä¢ –ò—Å–∫–∞—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é AI",
            reply_markup=keyboards.back_button("menu_back"),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            "üìß <b>–ó–∞–≥—Ä—É–∂–∞—é –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞...</b>\n\n"
            "‚è≥ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É...",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–∞
        from utils.email_sender_real import real_email_sender
        emails = await real_email_sender.get_inbox_emails(user_id, limit=10)
        
        if not emails:
            await callback.message.edit_text(
                "üìß <b>–í—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞</b>\n\n"
                "üì≠ –í –ø–∞–ø–∫–µ ¬´–í—Ö–æ–¥—è—â–∏–µ¬ª –Ω–µ—Ç –ø–∏—Å–µ–º\n\n"
                "üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                "‚Ä¢ –í—Å–µ –ø–∏—Å—å–º–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã\n"
                "‚Ä¢ –ü–∏—Å—å–º–∞ –≤ –¥—Ä—É–≥–∏—Ö –ø–∞–ø–∫–∞—Ö\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏",
                reply_markup=keyboards.back_button("menu_back"),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
        emails_text = "üìß <b>–í—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞</b>\n\n"
        
        for i, email_data in enumerate(emails, 1):
            sender = email_data.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
            subject = email_data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
            date = email_data.get('date', '')
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            sender = truncate_and_escape(sender, 30)
            subject = truncate_and_escape(subject, 40)
            
            emails_text += f"<b>{i}.</b> üë§ {sender}\n"
            emails_text += f"üìù {subject}\n"
            if date:
                emails_text += f"üïê {escape_html(date[:16])}\n"
            emails_text += "\n"
        
        emails_text += "üí° <i>–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∏—Å—å–º–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: \"–Ω–∞–π–¥–∏ –ø–∏—Å—å–º–∞ –æ—Ç [–∏–º—è]\"</i>"
        
        await callback.message.edit_text(
            emails_text,
            reply_markup=keyboards.inbox_menu(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º</b>\n\n"
            f"üí• <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {str(e)[:100]}...\n\n"
            "üîß <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            "‚Ä¢ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            reply_markup=keyboards.back_button("menu_back"),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data == "mail_search")
async def mail_search_callback(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ –ø–∏—Å–µ–º"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—á—Ç—ã
    from utils.email_sender import email_sender
    if not await email_sender.can_send_email(user_id):
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–∏—Å–µ–º</b>\n\n"
            "üîê –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É\n"
            "2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n\n"
            "üéØ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ –ø–∏—Å—å–º–∞\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\n"
            "‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ –ø–∏—Å–µ–º",
            reply_markup=keyboards.back_button("menu_back"),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–∏—Å–µ–º</b>\n\n"
        "üí° <b>–ö–∞–∫ –∏—Å–∫–∞—Ç—å –ø–∏—Å—å–º–∞:</b>\n"
        "–ó–∞–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞\n\n"
        "üéØ <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
        "‚Ä¢ \"–Ω–∞–π–¥–∏ –ø–∏—Å—å–º–∞ –æ—Ç –ò–≤–∞–Ω\"\n"
        "‚Ä¢ \"–Ω–∞–π–¥–∏ –ø–∏—Å—å–º–∞ –æ–± —Ä–∞–±–æ—Ç–µ\"\n"
        "‚Ä¢ \"–Ω–∞–π–¥–∏ –ø–∏—Å—å–º–∞ –∑–∞ –≤—á–µ—Ä–∞\"\n"
        "‚Ä¢ \"–ø–æ–∫–∞–∂–∏ –ø–∏—Å—å–º–∞ —Å –≤–∞–∂–Ω—ã–º–∏\"\n\n"
        "ü§ñ <b>AI –Ω–∞–π–¥–µ—Ç:</b>\n"
        "‚Ä¢ –ü–æ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n"
        "‚Ä¢ –ü–æ —Ç–µ–º–µ –ø–∏—Å—å–º–∞\n"
        "‚Ä¢ –ü–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\n"
        "‚Ä¢ –ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º",
        reply_markup=keyboards.back_button("menu_back"),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("settings_"))
async def settings_handlers(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    setting = callback.data.replace("settings_", "")
    
    if setting == "voice":
        await callback.message.edit_text(
            "üé§ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞</b>\n\n"
            "üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n"
            "‚Ä¢ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: ‚úÖ –í–∫–ª—é—á–µ–Ω\n"
            "‚Ä¢ –Ø–∑—ã–∫: üá∑üá∫ –†—É—Å—Å–∫–∏–π\n"
            "‚Ä¢ –ì–æ–ª–æ—Å: –ñ–µ–Ω—Å–∫–∏–π\n\n"
            "üöß <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>",
            reply_markup=keyboards.back_button("category_settings"),
            parse_mode="HTML"
        )
    elif setting == "vector":
        await callback.message.edit_text(
            "üß† <b>–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if vector_memory else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
            "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Supabase\n"
            "‚Ä¢ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: OpenAI\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π: 10,000\n\n"
            "üí° <i>–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å —É–ª—É—á—à–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</i>",
            reply_markup=keyboards.back_button("category_settings"),
            parse_mode="HTML"
        )
    elif setting == "notifications":
        await callback.message.edit_text(
            "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            "üì± <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\n"
            "‚Ä¢ –ó–≤—É–∫: ‚úÖ –í–∫–ª—é—á–µ–Ω\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\n\n"
            "üöß <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>",
            reply_markup=keyboards.back_button("category_settings"),
            parse_mode="HTML"
        )
    elif setting == "language":
        await callback.message.edit_text(
            "üåê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞</b>\n\n"
            "üó£Ô∏è <b>–¢–µ–∫—É—â–∏–π —è–∑—ã–∫:</b> üá∑üá∫ –†—É—Å—Å–∫–∏–π\n\n"
            "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:</b>\n"
            "‚Ä¢ üá∑üá∫ –†—É—Å—Å–∫–∏–π (—Ç–µ–∫—É—â–∏–π)\n"
            "‚Ä¢ üá∫üá∏ English\n"
            "‚Ä¢ üá©üá™ Deutsch\n\n"
            "üöß <i>–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>",
            reply_markup=keyboards.back_button("category_settings"),
            parse_mode="HTML"
        )
    elif setting == "theme":
        # –≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await callback.message.edit_text(
            "üé® <b>–í–Ω–µ—à–Ω–∏–π –≤–∏–¥</b>\n\n"
            "‚ö†Ô∏è <i>–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>\n\n"
            "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π.",
            reply_markup=keyboards.back_button("category_settings"),
            parse_mode="HTML"
        )
    elif setting == "privacy":
        # –≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await callback.message.edit_text(
            "üîê <b>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</b>\n\n"
            "‚ö†Ô∏è <i>–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>\n\n"
            "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π.",
            reply_markup=keyboards.back_button("category_settings"),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("memory_"))
async def memory_handlers(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–º—è—Ç–∏"""
    action = callback.data.replace("memory_", "")
    
    if action == "search":
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏</b>\n\n"
            "üí° <b>–ö–∞–∫ –∏—Å–∫–∞—Ç—å:</b>\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é\n\n"
            "üéØ <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–æ–≤:</b>\n"
            "‚Ä¢ \"–ß—Ç–æ –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏ –ø—Ä–æ Python?\"\n"
            "‚Ä¢ \"–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö\"\n"
            "‚Ä¢ \"–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã\"\n\n"
            "üß† <i>AI –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏</i>",
            reply_markup=keyboards.back_button("memory_menu"),
            parse_mode="HTML"
        )
    elif action == "save":
        await callback.message.edit_text(
            "üíæ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è</b>\n\n"
            "üìù <b>–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:</b>\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ \"–ó–∞–ø–æ–º–Ω–∏: –º–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç —Å–∏–Ω–∏–π\"\n"
            "‚Ä¢ \"–°–æ—Ö—Ä–∞–Ω–∏: –≤—Å—Ç—Ä–µ—á–∞ –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00\"\n"
            "‚Ä¢ \"–ó–∞–ø–∏—à–∏: –ø—Ä–æ–µ–∫—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è SuperBot\"\n\n"
            "üß† <i>–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞–≤—Å–µ–≥–¥–∞</i>",
            reply_markup=keyboards.back_button("memory_menu"),
            parse_mode="HTML"
        )
    elif action == "clear":
        await callback.message.edit_text(
            "üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏</b>\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n"
            "‚Ä¢ –í—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è\n"
            "‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏\n\n"
            "üöß <i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞",
            reply_markup=keyboards.back_button("memory_menu"),
            parse_mode="HTML"
        )
    elif action == "help":
        await callback.message.edit_text(
            "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞–º—è—Ç–∏</b>\n\n"
            "üß† <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞–º—è—Ç—å:</b>\n"
            "‚Ä¢ –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Å–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–º—ã\n"
            "‚Ä¢ –£–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
            "üîß <b>–ö–æ–º–∞–Ω–¥—ã –ø–∞–º—è—Ç–∏:</b>\n"
            "‚Ä¢ /memory_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /search_memory - –ø–æ–∏—Å–∫\n"
            "‚Ä¢ /save_knowledge - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å\n"
            "‚Ä¢ /clear_memory - –æ—á–∏—Å—Ç–∏—Ç—å\n\n"
            "üí° <i>–ü–∞–º—è—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–º–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!</i>",
            reply_markup=keyboards.back_button("memory_menu"),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data == "mail_analyze_inbox")
async def mail_analyze_inbox_callback(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º —Å –ø–æ–º–æ—â—å—é AI"""
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if callback.from_user.last_name:
        user_name += f" {callback.from_user.last_name}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—á—Ç—ã
    from utils.email_sender import email_sender
    if not await email_sender.can_send_email(user_id):
        await callback.message.edit_text(
            "üîç <b>–ê–Ω–∞–ª–∏–∑ –ø–∏—Å–µ–º</b>\n\n"
            "üîê –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É\n"
            "2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n\n"
            "üí° –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è AI —Å–º–æ–∂–µ—Ç:\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞\n"
            "‚Ä¢ –í—ã–¥–µ–ª—è—Ç—å –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã\n"
            "‚Ä¢ –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å—Ä–æ—á–Ω—ã–µ –ø–∏—Å—å–º–∞",
            reply_markup=keyboards.back_button("menu_back"),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
        await callback.message.edit_text(
            "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞...</b>\n\n"
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∏—Å—å–º–∞...",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        from utils.email_sender_real import real_email_sender
        emails = await real_email_sender.get_inbox_emails(user_id, limit=5)
        
        if not emails:
            await callback.message.edit_text(
                "üîç <b>–ê–Ω–∞–ª–∏–∑ –ø–∏—Å–µ–º</b>\n\n"
                "üì≠ –í –ø–∞–ø–∫–µ ¬´–í—Ö–æ–¥—è—â–∏–µ¬ª –Ω–µ—Ç –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                "üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞–ø–∫–∏\n"
                "‚Ä¢ –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤",
                reply_markup=keyboards.back_button("menu_back"),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await callback.message.edit_text(
            f"üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞...</b>\n\n"
            f"üìß –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(emails)}\n"
            f"ü§ñ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...",
            parse_mode="HTML"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        analysis = await email_analyzer.analyze_emails_summary(emails, user_name)
        insights = await email_analyzer.get_email_insights(emails)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        result_text = f"üîç <b>AI –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º</b>\n\n"
        result_text += analysis
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result_text += f"\n\nüìä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        result_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {insights['total_emails']}\n"
        result_text += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {insights['unique_senders']}\n"
        
        if insights['urgent_count'] > 0:
            result_text += f"‚Ä¢ ‚ö° –°—Ä–æ—á–Ω—ã—Ö –ø–∏—Å–µ–º: {insights['urgent_count']}\n"
        
        spam_levels = {
            'low': 'üü¢ –ù–∏–∑–∫–∏–π',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π', 
            'high': 'üî¥ –í—ã—Å–æ–∫–∏–π'
        }
        result_text += f"‚Ä¢ üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å —Å–ø–∞–º–∞: {spam_levels.get(insights['spam_likelihood'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        result_text += "\nüí° <i>–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º</i>"
        
        await callback.message.edit_text(
            result_text,
            reply_markup=keyboards.inbox_menu(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Å–µ–º</b>\n\n"
            f"üí• <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {str(e)[:100]}...\n\n"
            "üîß <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
            "‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ",
            reply_markup=keyboards.back_button("menu_back"),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data == "mail_folders")
async def mail_folders_callback(callback: CallbackQuery):
    """–ü–∞–ø–∫–∏ –ø–æ—á—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "mail_labels")
async def mail_labels_callback(callback: CallbackQuery):
    """–ú–µ—Ç–∫–∏ –ø–æ—á—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

# –î—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ search_toggle_ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ

@router.callback_query(F.data.startswith("search_toggle_"))
async def search_toggle_callback(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞"""
    user_id = callback.from_user.id
    setting = callback.data.replace("search_toggle_", "")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    import json
    import os
    
    settings_dir = "data/search_settings"
    settings_file = os.path.join(settings_dir, f"user_{user_id}_search.json")
    
    default_settings = {
        'search_limit': 10,
        'content_analysis': False,
        'search_in_body': True,
        'search_in_attachments': False,
        'date_range_days': 365,
        'priority_search': False
    }
    
    current_settings = default_settings.copy()
    if os.path.exists(settings_file):
        try:
            with open(settings_file, 'r', encoding='utf-8') as f:
                user_settings = json.load(f)
                current_settings.update(user_settings)
        except:
            pass
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    setting_map = {
        'body': 'search_in_body',
        'ai': 'content_analysis', 
        'attachments': 'search_in_attachments',
        'speed': 'priority_search'
    }
    
    if setting in setting_map:
        key = setting_map[setting]
        current_settings[key] = not current_settings[key]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(current_settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)[:30]}...", show_alert=True)
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await settings_email_search_callback(callback)

@router.callback_query(F.data.startswith("search_setting_"))
async def search_setting_callback(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞"""
    user_id = callback.from_user.id 
    setting = callback.data.replace("search_setting_", "")
    
    if setting == "limit":
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç: 5 ‚Üí 10 ‚Üí 20 ‚Üí 50 ‚Üí 5
        limits = [5, 10, 20, 50]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        import json
        import os
        
        settings_dir = "data/search_settings"
        settings_file = os.path.join(settings_dir, f"user_{user_id}_search.json")
        
        current_limit = 10  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if os.path.exists(settings_file):
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    user_settings = json.load(f)
                    current_limit = user_settings.get('search_limit', 10)
            except:
                pass
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ª–∏–º–∏—Ç
        try:
            current_index = limits.index(current_limit)
            new_limit = limits[(current_index + 1) % len(limits)]
        except ValueError:
            new_limit = limits[0]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        default_settings = {
            'search_limit': 10,
            'content_analysis': False,
            'search_in_body': True,
            'search_in_attachments': False,
            'date_range_days': 365,
            'priority_search': False
        }
        
        current_settings = default_settings.copy()
        if os.path.exists(settings_file):
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    user_settings = json.load(f)
                    current_settings.update(user_settings)
            except:
                pass
        
        current_settings['search_limit'] = new_limit
        
        try:
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(current_settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)[:30]}...", show_alert=True)
            return
    
    elif setting == "days":
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω: 30 ‚Üí 90 ‚Üí 180 ‚Üí 365 ‚Üí 30
        ranges = [30, 90, 180, 365]
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–Ω–µ–π
        import json
        import os
        
        settings_dir = "data/search_settings"
        settings_file = os.path.join(settings_dir, f"user_{user_id}_search.json")
        
        current_days = 365
        if os.path.exists(settings_file):
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    user_settings = json.load(f)
                    current_days = user_settings.get('date_range_days', 365)
            except:
                pass
        
        try:
            current_index = ranges.index(current_days)
            new_days = ranges[(current_index + 1) % len(ranges)]
        except ValueError:
            new_days = ranges[0]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        default_settings = {
            'search_limit': 10,
            'content_analysis': False,
            'search_in_body': True,
            'search_in_attachments': False,
            'date_range_days': 365,
            'priority_search': False
        }
        
        current_settings = default_settings.copy()
        if os.path.exists(settings_file):
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    user_settings = json.load(f)
                    current_settings.update(user_settings)
            except:
                pass
        
        current_settings['date_range_days'] = new_days
        
        try:
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(current_settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)[:30]}...", show_alert=True)
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await settings_email_search_callback(callback)

@router.callback_query(F.data == "search_save_settings")
async def search_save_settings_callback(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞"""
    await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", show_alert=True)

@router.callback_query(F.data == "search_reset_settings")
async def search_reset_settings_callback(callback: CallbackQuery): 
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    user_id = callback.from_user.id
    
    import os
    
    settings_dir = "data/search_settings"
    settings_file = os.path.join(settings_dir, f"user_{user_id}_search.json")
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤–µ—Ä–Ω–µ—Ç—Å—è –∫ —É–º–æ–ª—á–∞–Ω–∏—é)
    try:
        if os.path.exists(settings_file):
            os.remove(settings_file)
        await callback.answer("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {str(e)[:30]}...", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await settings_email_search_callback(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@router.callback_query(F.data == "calendar_connect")
async def calendar_connect_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handler –∏–∑ yandex_integration
    from handlers.yandex_integration import connect_calendar_handler
    
    # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    await connect_calendar_handler(callback, state)

@router.callback_query(F.data == "calendar_today")
async def calendar_today_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handler –∏–∑ yandex_integration
    from handlers.yandex_integration import calendar_today_handler
    
    # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    await calendar_today_handler(callback)

@router.callback_query(F.data == "calendar_week")
async def calendar_week_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handler –∏–∑ yandex_integration
    from handlers.yandex_integration import calendar_week_handler
    
    # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    await calendar_week_handler(callback)

@router.callback_query(F.data == "calendar_create")
async def calendar_create_callback(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handler –∏–∑ yandex_integration
    from handlers.yandex_integration import calendar_create_handler
    
    # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    await calendar_create_handler(callback, state)

@router.callback_query(F.data == "calendar_sync_reminders")
async def calendar_sync_reminders_callback(callback: CallbackQuery):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    await callback.message.edit_text(
        "üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
        "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ üìÖ –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è ‚Üí ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Üí üìÖ –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è\n"
        "‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n"
        "‚Ä¢ üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ –í—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: 15 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è: –≤–∫–ª—é—á–µ–Ω–æ\n"
        "‚Ä¢ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å\n\n"
        "üöß <i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n"
        "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
        reply_markup=keyboards.back_button("category_calendar"),
        parse_mode="HTML"
    )
    await callback.answer()

