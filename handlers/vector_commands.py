from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from database.vector_memory import vector_memory
from config.settings import settings

router = Router()

@router.message(Command("memory_stats"))
async def memory_stats_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not vector_memory:
        await message.answer("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return
    
    try:
        user_id = message.from_user.id
        stats = await vector_memory.get_user_stats(user_id)
        
        if not stats:
            await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π –ø–∞–º—è—Ç–∏:**

üí¨ –í—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {stats.get('total_conversations', 0)}
üß† –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {stats.get('knowledge_entries', 0)}
üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {stats.get('avg_conversation_length', 0):.0f} —Å–∏–º–≤–æ–ª–æ–≤

üìÖ –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {stats.get('first_interaction', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {stats.get('last_interaction', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

üí° –ß–µ–º –±–æ–ª—å—à–µ –º—ã –æ–±—â–∞–µ–º—Å—è, —Ç–µ–º –ª—É—á—à–µ —è –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è!
        """
        
        await message.answer(stats_text)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏")

@router.message(Command("clear_memory"))
async def clear_memory_command(message: Message):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not vector_memory:
        await message.answer("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return
    
    try:
        user_id = message.from_user.id
        success = await vector_memory.clear_user_memory(user_id)
        
        if success:
            await message.answer("‚úÖ –í–∞—à–∞ –ø–∞–º—è—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!\n\nüîÑ –ù–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏")

@router.message(Command("search_memory"))
async def search_memory_command(message: Message):
    """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    if not vector_memory:
        await message.answer("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(" ", 1)
        if len(command_parts) < 2:
            await message.answer("üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search_memory <–≤–∞—à –∑–∞–ø—Ä–æ—Å>\n\n–ü—Ä–∏–º–µ—Ä: /search_memory –º—É–∑—ã–∫–∞")
            return
        
        query = command_parts[1]
        user_id = message.from_user.id
        
        # –ò—â–µ–º –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö
        similar_conversations = await vector_memory.search_similar_conversations(user_id, query, 3)
        
        # –ò—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        knowledge_results = await vector_memory.search_knowledge_base(user_id, query, 2)
        
        if not similar_conversations and not knowledge_results:
            await message.answer(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏")
            return
        
        response = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** '{query}'\n\n"
        
        if similar_conversations:
            response += "üí¨ **–ü–æ—Ö–æ–∂–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã:**\n"
            for i, conv in enumerate(similar_conversations, 1):
                similarity = conv.get('similarity', 0) * 100
                response += f"{i}. (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {similarity:.0f}%)\n"
                response += f"   –í—ã: {conv['user_message'][:100]}...\n"
                response += f"   –Ø: {conv['ai_response'][:100]}...\n\n"
        
        if knowledge_results:
            response += "üß† **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:**\n"
            for i, knowledge in enumerate(knowledge_results, 1):
                similarity = knowledge.get('similarity', 0) * 100
                response += f"{i}. {knowledge['topic']} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {similarity:.0f}%)\n"
                response += f"   {knowledge['content'][:150]}...\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(response) > settings.MAX_MESSAGE_LENGTH:
            parts = [response[i:i+settings.MAX_MESSAGE_LENGTH] 
                    for i in range(0, len(response), settings.MAX_MESSAGE_LENGTH)]
            
            for part in parts:
                await message.answer(part)
        else:
            await message.answer(response)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ø–∞–º—è—Ç–∏")

@router.message(Command("save_knowledge"))
async def save_knowledge_command(message: Message):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    if not vector_memory:
        await message.answer("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(" ", 2)
        if len(command_parts) < 3:
            await message.answer("""
üíæ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π**

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /save_knowledge <—Ç–µ–º–∞> <–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è>

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /save_knowledge –º—É–∑—ã–∫–∞ –õ—é–±–ª—é —Ä–æ–∫ –∏ –¥–∂–∞–∑
‚Ä¢ /save_knowledge —Ä–∞–±–æ—Ç–∞ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç Python
‚Ä¢ /save_knowledge —Ö–æ–±–±–∏ –ò–≥—Ä–∞—é –Ω–∞ –≥–∏—Ç–∞—Ä–µ
            """)
            return
        
        topic = command_parts[1]
        content = command_parts[2]
        user_id = message.from_user.id
        
        await vector_memory.save_to_knowledge_base(user_id, topic, content, importance=2.0)
        
        await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!\n\nüìù –¢–µ–º–∞: {topic}\nüí≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {content}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")

@router.message(Command("vector_help"))
async def vector_help_command(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    help_text = """
üß† **–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –±–æ—Ç–∞**

–Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞!

üìã **–ö–æ–º–∞–Ω–¥—ã –ø–∞–º—è—Ç–∏:**
‚Ä¢ `/memory_stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π –ø–∞–º—è—Ç–∏
‚Ä¢ `/search_memory <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
‚Ä¢ `/save_knowledge <—Ç–µ–º–∞> <–∏–Ω—Ñ–æ>` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ `/clear_memory` - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å
‚Ä¢ `/vector_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
‚Ä¢ –ù–∞—Ö–æ–∂—É –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–º—ã –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –°—Ç–∞–Ω–æ–≤–ª—é—Å—å —É–º–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º

üéØ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ –ü–æ–º–Ω—é –¥–µ—Ç–∞–ª–∏ –º–µ—Å—è—á–Ω–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–Ω–∏–º–∞—é —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ù–µ –ø–æ–≤—Ç–æ—Ä—è—é –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    """
    
    if vector_memory:
        help_text += "\n‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    else:
        help_text += "\n‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    
    await message.answer(help_text)