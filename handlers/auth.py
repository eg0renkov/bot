from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.auth import auth_manager

router = Router()

class AuthStates(StatesGroup):
    waiting_for_token = State()

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if auth_manager.is_user_authorized(user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from utils.keyboards import keyboards
        welcome_name = f", {user_name}" if user_name != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" else ""
        await message.answer(
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ{welcome_name}!</b>\n\n"
            f"ü§ñ <b>AI –ü–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n"
            f"üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>",
            parse_mode="HTML",
            reply_markup=keyboards.main_menu()
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ–º —Ç–æ–∫–µ–Ω
        builder = InlineKeyboardBuilder()
        builder.button(text="üîë –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞", callback_data="enter_token")
        builder.button(text="‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø?", callback_data="access_help")
        
        await message.answer(
            f"üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            f"ü§ñ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è <b>—Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞</b>.\n\n"
            f"üîë <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω</b> - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
            f"‚ùì <b>–ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞</b> - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )

@router.callback_query(F.data == "enter_token")
async def enter_token_callback(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞"""
    user_id = callback.from_user.id
    
    if auth_manager.is_user_authorized(user_id):
        await callback.message.edit_text(
            "‚úÖ <b>–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")
    
    await callback.message.edit_text(
        f"üîë <b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
        f"‚úèÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</b>\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        f"‚Ä¢ –¢–æ–∫–µ–Ω —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É\n"
        f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
        f"üí° <b>–§–æ—Ä–º–∞—Ç:</b> –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AuthStates.waiting_for_token)
    await callback.answer("–ñ–¥—É –≤–∞—à —Ç–æ–∫–µ–Ω...")

@router.callback_query(F.data == "access_help")
async def access_help_callback(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–∞"""
    stats = auth_manager.get_auth_stats()
    
    await callback.message.edit_text(
        f"‚ùì <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É</b>\n\n"
        f"üîê <b>–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
        f"üìû <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
        f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞\n"
        f"‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç–µ —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_authorized']}\n"
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: {stats['token_hint']}\n\n"
        f"üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
        f"‚Ä¢ –¢–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É\n"
        f"‚Ä¢ –í —Å–ª—É—á–∞–µ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ - —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "cancel_auth")
async def cancel_auth_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await state.clear()
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîë –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="enter_token")
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="access_help")
    
    await callback.message.edit_text(
        f"‚ùå <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        f"üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω\n\n"
        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.message(AuthStates.waiting_for_token)
async def process_token(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    token = message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{token}' (–¥–ª–∏–Ω–∞: {len(token)})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token_check = auth_manager.check_token_format(token)
    print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {token_check}")
    
    if token_check['valid']:
        # –¢–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = auth_manager.authorize_user(user_id, token)
        
        if success:
            await state.clear()
            
            from utils.keyboards import keyboards
            await message.answer(
                f"‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å{', ' + user_name if user_name != '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' else ''}!</b>\n\n"
                f"ü§ñ <b>AI –ü–æ–º–æ—â–Ω–∏–∫ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>\n\n"
                f"üí° <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
                f"‚Ä¢ üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é AI\n"
                f"‚Ä¢ üìß –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–∞–º–∏\n"
                f"‚Ä¢ üìÖ –†–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º\n"
                f"‚Ä¢ üë• –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n"
                f"‚Ä¢ ‚è∞ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                f"‚Ä¢ üß† –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã\n\n"
                f"üöÄ <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>",
                parse_mode="HTML",
                reply_markup=keyboards.main_menu()
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: user_id={user_id}, username=@{message.from_user.username}, name={user_name}")
        else:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
    else:
        # –¢–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π
        builder = InlineKeyboardBuilder()
        builder.button(text="üîë –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="enter_token")
        builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="access_help")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")
        
        await message.answer(
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            f"üîç <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {token_check['hint']}\n\n"
            f"üí° <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</b>\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞\n"
            f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤\n\n"
            f"üîí <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: user_id={user_id}, username=@{message.from_user.username}, hint={token_check['hint']}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
@router.message(Command("auth_stats"))
async def auth_stats_command(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    if not auth_manager.is_user_authorized(user_id):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        return
    
    stats = auth_manager.get_auth_stats()
    
    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
        f"üë• <b>–í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö:</b> {stats['total_authorized']}\n"
        f"üîë <b>–¢–æ–∫–µ–Ω (–ø–æ–¥—Å–∫–∞–∑–∫–∞):</b> {stats['token_hint']}\n\n"
        f"üìù <b>ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n" +
        '\n'.join([f"‚Ä¢ {uid}" for uid in stats['authorized_users'][:10]]) +
        (f"\n... –∏ –µ—â–µ {len(stats['authorized_users']) - 10}" if len(stats['authorized_users']) > 10 else ""),
        parse_mode="HTML"
    )

@router.message(Command("reset_auth"))
async def reset_auth_command(message: Message):
    """–°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    if auth_manager.revoke_user_access(user_id):
        await message.answer(
            f"üîÑ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start"
        )
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")

@router.message(Command("debug_token"))
async def debug_token_command(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞"""
    if len(message.text.split()) < 2:
        await message.answer(
            "üîç <b>–û—Ç–ª–∞–¥–∫–∞ —Ç–æ–∫–µ–Ω–∞</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/debug_token –í–ê–®_–¢–û–ö–ï–ù</code>\n\n"
            f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.",
            parse_mode="HTML"
        )
        return
    
    token = ' '.join(message.text.split()[1:])  # –í—Å—ë –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    check_result = auth_manager.check_token_format(token)
    
    await message.answer(
        f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞</b>\n\n"
        f"‚úÖ <b>–í–∞–ª–∏–¥–Ω—ã–π:</b> {'–î–∞' if check_result['valid'] else '–ù–µ—Ç'}\n"
        f"üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {check_result['hint']}\n\n"
        f"üìù <b>–î–µ—Ç–∞–ª–∏:</b>\n"
        f"‚Ä¢ –î–ª–∏–Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ: {len(token)}\n"
        f"‚Ä¢ –î–ª–∏–Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ: {len(auth_manager.access_token)}\n"
        f"‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {token.strip().startswith(auth_manager.access_token[:4])}\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: <code>SECURE_BOT_ACCESS_2024</code>",
        parse_mode="HTML"
    )