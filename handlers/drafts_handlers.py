from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.keyboards import keyboards
from utils.drafts_manager import drafts_manager
from utils.openai_client import openai_client

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
class DraftStates(StatesGroup):
    creating_to = State()
    creating_subject = State()
    creating_body = State()
    editing_draft = State()
    ai_composing = State()

@router.callback_query(F.data == "mail_drafts")
async def show_drafts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"""
    await show_drafts_page(callback, page=0)

@router.callback_query(F.data.startswith("drafts_page_"))
async def show_drafts_page_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"""
    page = int(callback.data.replace("drafts_page_", ""))
    await show_drafts_page(callback, page)

async def show_drafts_page(callback: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
    page_data = await drafts_manager.get_drafts_page(user_id, page=page, per_page=5)
    
    if page_data['total_drafts'] == 0:
        await callback.message.edit_text(
            "üìã <b>–ß–µ—Ä–Ω–æ–≤–∏–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤.\n\n"
            "üìù <b>–°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ¬ª\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø–∏—Å—å–º–∞ –Ω–∞ –ø–æ—Ç–æ–º\n\n"
            "üí° <i>–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>",
            reply_markup=keyboards.mail_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    text = f"üìã <b>–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ ({page_data['total_drafts']})</b>\n"
    if page_data['total_pages'] > 1:
        text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {page_data['total_pages']}\n"
    text += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    for i, draft in enumerate(page_data['drafts']):
        subject = draft.subject or "–ë–µ–∑ —Ç–µ–º—ã"
        recipient = draft.recipient_name or draft.recipient_email or "–ë–µ–∑ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        button_text = f"üìß {subject[:15]}{'...' if len(subject) > 15 else ''}"
        if recipient and recipient != "–ë–µ–∑ –ø–æ–ª—É—á–∞—Ç–µ–ª—è":
            button_text += f" ‚Üí {recipient[:10]}{'...' if len(recipient) > 10 else ''}"
        
        builder.button(
            text=button_text,
            callback_data=f"draft_open_{draft.id}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    pagination_buttons = []
    if page_data['has_prev']:
        pagination_buttons.append(("‚óÄÔ∏è –ü—Ä–µ–¥", f"drafts_page_{page - 1}"))
    if page_data['has_next']:
        pagination_buttons.append(("–°–ª–µ–¥ ‚ñ∂Ô∏è", f"drafts_page_{page + 1}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ä—è–¥
    if pagination_buttons:
        for btn_text, btn_data in pagination_buttons:
            builder.button(text=btn_text, callback_data=btn_data)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.button(text="‚úçÔ∏è –ù–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="draft_create_new")
    builder.button(text="‚óÄÔ∏è –ö –ø–æ—á—Ç–µ", callback_data="category_mail")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    # 5 —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ (–ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥), –ø–∞–≥–∏–Ω–∞—Ü–∏—è (–≤ –æ–¥–∏–Ω —Ä—è–¥), —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤ –æ–¥–∏–Ω —Ä—è–¥)
    adjust_pattern = [1] * len(page_data['drafts'])  # –ß–µ—Ä–Ω–æ–≤–∏–∫–∏
    if pagination_buttons:
        adjust_pattern.append(len(pagination_buttons))  # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    adjust_pattern.extend([1, 1])  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    
    builder.adjust(*adjust_pattern)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.callback_query(F.data == "draft_create_new")
async def create_new_draft(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–∑–µ—Ä"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π composer
    from handlers.yandex_integration import mail_compose_handler
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ–º–ø–æ–∑–µ—Ä–∞
    callback.data = "mail_compose"
    await mail_compose_handler(callback)
    
    await callback.answer()

@router.callback_query(F.data.startswith("draft_send_"))
async def send_draft(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–∞–∫ –ø–∏—Å—å–º–æ"""
    draft_id = callback.data.replace("draft_send_", "")
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        draft = await drafts_manager.get_draft_by_id(user_id, draft_id)
        
        if not draft:
            await callback.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not draft.recipient_email:
            await callback.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å", show_alert=True)
            return
        
        if not draft.subject:
            await callback.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ç–µ–º–∞ –ø–∏—Å—å–º–∞", show_alert=True)
            return
        
        if not draft.body:
            await callback.answer("‚ùå –ü–∏—Å—å–º–æ –ø—É—Å—Ç–æ–µ", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        from utils.html_utils import escape_html
        
        text = f"üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞</b>\n\n"
        text += f"üë§ <b>–ö–æ–º—É:</b> {escape_html(draft.recipient_name or draft.recipient_email)}\n"
        text += f"üìù <b>–¢–µ–º–∞:</b> {escape_html(draft.subject)}\n\n"
        text += f"üìÑ <b>–¢–µ–∫—Å—Ç:</b>\n{escape_html(draft.get_preview(200))}\n\n"
        text += "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –ø–∏—Å—å–º–æ?"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.button(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"draft_confirm_send_{draft_id}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"draft_open_{draft_id}")
        
        builder.adjust(2)
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}...", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data.startswith("draft_confirm_send_"))
async def confirm_send_draft(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    draft_id = callback.data.replace("draft_confirm_send_", "")
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        draft = await drafts_manager.get_draft_by_id(user_id, draft_id)
        
        if not draft:
            await callback.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
        from handlers.yandex_integration import send_email
        from utils.user_settings import user_settings
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_name = await user_settings.get_or_request_name(
            user_id, 
            callback.from_user.first_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        success = await send_email(
            recipient_email=draft.recipient_email,
            subject=draft.subject,
            body=draft.body,
            sender_name=sender_name,
            user_id=user_id
        )
        
        if success:
            # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await drafts_manager.delete_draft(user_id, draft_id)
            
            await callback.message.edit_text(
                "‚úÖ <b>–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {draft.recipient_name or draft.recipient_email}\n"
                f"üìù –¢–µ–º–∞: {draft.subject}\n\n"
                "üìã –ß–µ—Ä–Ω–æ–≤–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω",
                reply_markup=keyboards.back_button("category_mail"),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                reply_markup=create_draft_actions_keyboard(draft_id),
                parse_mode="HTML"
            )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)[:50]}...", show_alert=True)
    
    await callback.answer()

# –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π email composer

@router.callback_query(F.data.startswith("draft_open_"))
async def open_draft(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"""
    draft_id = callback.data.replace("draft_open_", "")
    user_id = callback.from_user.id
    
    draft = await drafts_manager.get_draft_by_id(user_id, draft_id)
    
    if not draft:
        await callback.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"üìß <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–∏—Å—å–º–∞</b>\n\n"
    text += f"üë§ <b>–ö–æ–º—É:</b> {draft.recipient_name or draft.recipient_email or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    text += f"üìù <b>–¢–µ–º–∞:</b> {draft.subject or '–ë–µ–∑ —Ç–µ–º—ã'}\n"
    text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {draft.created_at[:16] if draft.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
    text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {draft.updated_at[:16] if draft.updated_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞
    preview = draft.get_preview(500)
    text += f"üìÑ <b>–¢–µ–∫—Å—Ç:</b>\n{preview}"
    
    if len(draft.body or '') > 500:
        text += "\n\n<i>... —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω ...</i>"
    
    await callback.message.edit_text(
        text,
        reply_markup=create_draft_actions_keyboard(draft_id),
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("draft_edit_"))
async def edit_draft(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"""
    draft_id = callback.data.replace("draft_edit_", "")
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞</b>\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=create_edit_menu(draft_id),
        parse_mode="HTML"
    )
    
    await state.update_data(editing_draft_id=draft_id)
    await callback.answer()

@router.callback_query(F.data.startswith("draft_delete_"))
async def delete_draft(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"""
    draft_id = callback.data.replace("draft_delete_", "")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫?\n\n"
        "‚ö†Ô∏è <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
        reply_markup=create_delete_confirmation(draft_id),
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("draft_confirm_delete_"))
async def confirm_delete_draft(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    draft_id = callback.data.replace("draft_confirm_delete_", "")
    user_id = callback.from_user.id
    
    success = await drafts_manager.delete_draft(user_id, draft_id)
    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω!</b>",
            reply_markup=keyboards.back_button("mail_drafts"),
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "draft_clear_old")
async def clear_old_drafts(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer(
        "üóÉÔ∏è –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        show_alert=True
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_draft_actions_keyboard(draft_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"draft_edit_{draft_id}")
    builder.button(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"draft_send_{draft_id}")
    builder.button(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"draft_copy_{draft_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"draft_delete_{draft_id}")
    builder.button(text="‚óÄÔ∏è –ö —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º", callback_data="mail_drafts")
    
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def create_edit_menu(draft_id: str):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data=f"draft_edit_to_{draft_id}")
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"draft_edit_subject_{draft_id}")
    builder.button(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"draft_edit_body_{draft_id}")
    builder.button(text="ü§ñ –£–ª—É—á—à–∏—Ç—å —Å AI", callback_data=f"draft_improve_ai_{draft_id}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"draft_open_{draft_id}")
    
    builder.adjust(2, 1, 1, 1)
    return builder.as_markup()

def create_delete_confirmation(draft_id: str):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"draft_confirm_delete_{draft_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"draft_open_{draft_id}")
    
    builder.adjust(2)
    return builder.as_markup()