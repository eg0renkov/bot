"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import re
import logging
from typing import Optional
from database.reminders import ReminderDB
from utils.keyboards import ReminderKeyboards

logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
class ReminderStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_time = State()
    waiting_for_repeat = State()
    editing_reminder = State()
    waiting_for_default_time = State()  # –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
reminder_db = ReminderDB()
keyboards = ReminderKeyboards()

@router.message(Command("reminder", "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))
async def reminder_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    stats = await reminder_db.get_user_stats(user_id)
    
    text = "‚è∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
    text += f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats.get('active_reminders', 0)}\n"
    text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed_reminders', 0)}\n"
    text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('upcoming_today', 0)}\n"
    text += f"‚Ä¢ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {stats.get('upcoming_week', 0)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await message.answer(
        text,
        reply_markup=keyboards.reminder_menu(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "reminders_menu")
async def reminders_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = callback.from_user.id
    
    stats = await reminder_db.get_user_stats(user_id)
    
    text = "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
    text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_reminders', 0)}\n"
    text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('upcoming_today', 0)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.reminder_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "reminder_create")
async def create_reminder_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º</i>",
        parse_mode="HTML"
    )
    await state.set_state(ReminderStates.waiting_for_title)
    await callback.answer()

@router.message(ReminderStates.waiting_for_title)
async def process_reminder_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.update_data(title=message.text)
    
    await message.answer(
        "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        parse_mode="HTML"
    )
    await state.set_state(ReminderStates.waiting_for_description)

@router.message(ReminderStates.waiting_for_description)
async def process_reminder_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if message.text != "/skip":
        await state.update_data(description=message.text)
    else:
        await state.update_data(description=None)
    
    await message.answer(
        "‚è∞ <b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "‚Ä¢ <code>—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç</code>\n"
        "‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ –≤ 14:00</code>\n"
        "‚Ä¢ <code>25.12 –≤ 10:30</code>\n"
        "‚Ä¢ <code>25.12.2024 15:00</code>\n"
        "‚Ä¢ <code>–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00</code>",
        parse_mode="HTML",
        reply_markup=keyboards.quick_time_buttons()
    )
    await state.set_state(ReminderStates.waiting_for_time)

@router.callback_query(F.data.startswith("quick_time_"))
async def process_quick_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
    time_option = callback.data.replace("quick_time_", "")
    
    now = datetime.now()
    reminder_time = None
    repeat_type = "none"
    
    if time_option == "15min":
        reminder_time = now + timedelta(minutes=15)
    elif time_option == "30min":
        reminder_time = now + timedelta(minutes=30)
    elif time_option == "1hour":
        reminder_time = now + timedelta(hours=1)
    elif time_option == "3hours":
        reminder_time = now + timedelta(hours=3)
    elif time_option == "tomorrow":
        reminder_time = now.replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=1)
    elif time_option == "tomorrow_evening":
        reminder_time = now.replace(hour=18, minute=0, second=0, microsecond=0) + timedelta(days=1)
    
    if reminder_time:
        await state.update_data(
            remind_at=reminder_time,
            repeat_type=repeat_type
        )
        await save_reminder(callback.message, state, callback.from_user.id)
        await callback.answer()

@router.message(ReminderStates.waiting_for_time)
async def process_reminder_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    time_text = message.text.lower()
    reminder_time = None
    repeat_type = "none"
    
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
        if "—á–µ—Ä–µ–∑" in time_text:
            # –§–æ—Ä–º–∞—Ç: —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤
            match = re.search(r'—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω)', time_text)
            if match:
                amount = int(match.group(1))
                unit = match.group(2)
                now = datetime.now()
                
                if "–º–∏–Ω—É—Ç" in unit:
                    reminder_time = now + timedelta(minutes=amount)
                elif "—á–∞—Å" in unit:
                    reminder_time = now + timedelta(hours=amount)
                elif "–¥–Ω" in unit or "–¥–µ–Ω—å" in unit:
                    reminder_time = now + timedelta(days=amount)
        
        elif "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" in time_text:
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            match = re.search(r'(\d{1,2}):(\d{2})', time_text)
            if match:
                hour = int(match.group(1))
                minute = int(match.group(2))
                reminder_time = datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0)
                if reminder_time < datetime.now():
                    reminder_time += timedelta(days=1)
                repeat_type = "daily"
        
        elif "–∑–∞–≤—Ç—Ä–∞" in time_text:
            # –ó–∞–≤—Ç—Ä–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            match = re.search(r'(\d{1,2}):(\d{2})', time_text)
            if match:
                hour = int(match.group(1))
                minute = int(match.group(2))
                reminder_time = datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0) + timedelta(days=1)
            else:
                # –ó–∞–≤—Ç—Ä–∞ –≤ 9:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                reminder_time = datetime.now().replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=1)
        
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            # –§–æ—Ä–º–∞—Ç: 25.12 –≤ 10:30 –∏–ª–∏ 25.12.2024 15:00
            patterns = [
                r'(\d{1,2})\.(\d{1,2})\s+–≤?\s*(\d{1,2}):(\d{2})',  # 25.12 –≤ 10:30
                r'(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})',  # 25.12.2024 15:00
            ]
            
            for pattern in patterns:
                match = re.search(pattern, time_text)
                if match:
                    if len(match.groups()) == 4:  # –î–µ–Ω—å.–º–µ—Å—è—Ü –≤—Ä–µ–º—è
                        day, month, hour, minute = match.groups()
                        year = datetime.now().year
                        reminder_time = datetime(year, int(month), int(day), int(hour), int(minute))
                        if reminder_time < datetime.now():
                            reminder_time = reminder_time.replace(year=year + 1)
                    elif len(match.groups()) == 5:  # –î–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ –≤—Ä–µ–º—è
                        day, month, year, hour, minute = match.groups()
                        reminder_time = datetime(int(year), int(month), int(day), int(hour), int(minute))
                    break
        
        if reminder_time:
            await state.update_data(
                remind_at=reminder_time,
                repeat_type=repeat_type
            )
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if repeat_type == "none":
                await message.answer(
                    "üîÅ <b>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>\n\n"
                    "–ù—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
                    reply_markup=keyboards.repeat_options(),
                    parse_mode="HTML"
                )
                await state.set_state(ReminderStates.waiting_for_repeat)
            else:
                await save_reminder(message, state, message.from_user.id)
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ <code>—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç</code>\n"
                "‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ –≤ 14:00</code>\n"
                "‚Ä¢ <code>25.12 –≤ 10:30</code>",
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.",
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("repeat_"))
async def process_repeat_option(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    repeat_option = callback.data.replace("repeat_", "")
    
    repeat_mapping = {
        "none": ("none", 0),
        "daily": ("daily", 1),
        "weekly": ("weekly", 1),
        "monthly": ("monthly", 1),
        "yearly": ("yearly", 1)
    }
    
    repeat_type, repeat_interval = repeat_mapping.get(repeat_option, ("none", 0))
    
    await state.update_data(
        repeat_type=repeat_type,
        repeat_interval=repeat_interval
    )
    
    await save_reminder(callback.message, state, callback.from_user.id)
    await callback.answer()

async def save_reminder(message: Message, state: FSMContext, user_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    
    try:
        reminder_id = await reminder_db.create_reminder(
            user_id=user_id,
            title=data['title'],
            description=data.get('description'),
            remind_at=data['remind_at'],
            repeat_type=data.get('repeat_type', 'none'),
            repeat_interval=data.get('repeat_interval', 0)
        )
        
        if reminder_id:
            time_str = data['remind_at'].strftime("%d.%m.%Y –≤ %H:%M")
            repeat_str = ""
            if data.get('repeat_type') != 'none':
                repeat_types = {
                    'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
                    'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
                    'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
                    'yearly': '–ï–∂–µ–≥–æ–¥–Ω–æ'
                }
                repeat_str = f"\nüîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {repeat_types.get(data.get('repeat_type'), '–ù–µ—Ç')}"
            
            await message.edit_text(
                f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"üìå {data['title']}\n"
                f"‚è∞ {time_str}{repeat_str}\n\n"
                f"–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=keyboards.back_to_reminders(),
                parse_mode="HTML"
            )
        else:
            await message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=keyboards.back_to_reminders(),
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
            reply_markup=keyboards.back_to_reminders(),
            parse_mode="HTML"
        )
    
    await state.clear()

@router.callback_query(F.data == "reminder_list")
async def show_reminders_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = callback.from_user.id
    
    reminders = await reminder_db.get_user_reminders(user_id, active_only=True)
    
    if not reminders:
        await callback.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –æ –≤–∞–∂–Ω–æ–º!",
            reply_markup=keyboards.empty_list_menu(),
            parse_mode="HTML"
        )
    else:
        text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
        
        for i, reminder in enumerate(reminders[:10], 1):
            time_str = reminder['remind_at'].strftime("%d.%m %H:%M")
            repeat_icon = "üîÅ" if reminder.get('repeat_type') != 'none' else ""
            text += f"{i}. {repeat_icon} <b>{reminder['title']}</b>\n"
            text += f"   ‚è∞ {time_str}\n"
            if reminder.get('description'):
                text += f"   üìù {reminder['description'][:50]}...\n" if len(reminder['description']) > 50 else f"   üìù {reminder['description']}\n"
            text += "\n"
        
        if len(reminders) > 10:
            text += f"<i>... –∏ –µ—â–µ {len(reminders) - 10} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</i>\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboards.reminders_list_menu(reminders[:10]),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("reminder_view_"))
async def view_reminder(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = int(callback.data.replace("reminder_view_", ""))
    
    reminder = await reminder_db.get_reminder(reminder_id)
    
    if not reminder:
        await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    repeat_types = {
        'none': '–ù–µ—Ç',
        'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
        'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
        'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
        'yearly': '–ï–∂–µ–≥–æ–¥–Ω–æ'
    }
    
    text = f"üìå <b>{reminder['title']}</b>\n\n"
    
    if reminder.get('description'):
        text += f"üìù {reminder['description']}\n\n"
    
    text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {reminder['remind_at'].strftime('%d.%m.%Y –≤ %H:%M')}\n"
    text += f"üîÅ <b>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:</b> {repeat_types.get(reminder.get('repeat_type', 'none'), '–ù–µ—Ç')}\n"
    text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if reminder.get('is_active') else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n"
    
    if reminder.get('created_at'):
        text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {reminder['created_at'].strftime('%d.%m.%Y')}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.reminder_actions(reminder_id),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("reminder_delete_"))
async def delete_reminder(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = int(callback.data.replace("reminder_delete_", ""))
    
    success = await reminder_db.delete_reminder(reminder_id)
    
    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>",
            reply_markup=keyboards.back_to_reminders(),
            parse_mode="HTML"
        )
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("reminder_complete_"))
async def complete_reminder(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ"""
    reminder_id = int(callback.data.replace("reminder_complete_", ""))
    
    success = await reminder_db.complete_reminder(reminder_id)
    
    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>",
            reply_markup=keyboards.back_to_reminders(),
            parse_mode="HTML"
        )
        await callback.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
    else:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("reminder_snooze_"))
async def snooze_reminder(callback: CallbackQuery):
    """–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    parts = callback.data.split("_")
    reminder_id = int(parts[2])
    minutes = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    reminder = await reminder_db.get_reminder(reminder_id)
    
    if reminder:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        new_time = datetime.now() + timedelta(minutes=minutes)
        success = await reminder_db.update_reminder(
            reminder_id,
            remind_at=new_time,
            notification_sent=False
        )
        
        if success:
            await callback.message.edit_text(
                f"‚è±Ô∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç</b>\n\n"
                f"–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ {new_time.strftime('%H:%M')}",
                parse_mode="HTML"
            )
            await callback.answer(f"–û—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–∏", show_alert=True)
    else:
        await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

@router.callback_query(F.data == "reminder_stats")
async def show_reminder_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = callback.from_user.id
    
    stats = await reminder_db.get_user_stats(user_id)
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
    text += f"üìù <b>–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ:</b> {stats.get('total_reminders', 0)}\n"
    text += f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {stats.get('completed_reminders', 0)}\n"
    text += f"‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {stats.get('active_reminders', 0)}\n\n"
    
    text += "üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ:</b>\n"
    text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('upcoming_today', 0)}\n"
    text += f"‚Ä¢ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {stats.get('upcoming_week', 0)}\n\n"
    
    if stats.get('completed_reminders', 0) > 0 and stats.get('total_reminders', 0) > 0:
        completion_rate = (stats['completed_reminders'] / stats['total_reminders']) * 100
        text += f"üéØ <b>–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {completion_rate:.1f}%"
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.back_to_reminders(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "reminder_settings")
async def show_reminder_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = callback.from_user.id
    
    settings = await reminder_db.get_user_settings(user_id)
    
    text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
    text += f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('enabled', True) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
    text += f"üîä –ó–≤—É–∫: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if settings.get('sound_enabled', True) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
    text += f"‚è∞ –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.get('default_notification_time', '09:00')}\n"
    text += f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.get('timezone', 'Europe/Moscow')}\n"
    text += f"‚è±Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –∑–∞: {settings.get('advance_notification', 10)} –º–∏–Ω—É—Ç\n"
    text += f"üìã –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if settings.get('daily_summary', False) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.settings_menu(settings),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("setting_toggle_"))
async def toggle_setting(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    setting = callback.data.replace("setting_toggle_", "")
    user_id = callback.from_user.id
    
    success = await reminder_db.toggle_setting(user_id, setting)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_reminder_settings(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

@router.callback_query(F.data == "setting_notification_time")
async def set_notification_time(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    await callback.message.edit_text(
        "‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>09:00</code> –∏–ª–∏ <code>18:30</code>\n\n"
        "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /skip",
        parse_mode="HTML"
    )
    await state.set_state(ReminderStates.waiting_for_default_time)
    await callback.answer()

@router.message(ReminderStates.waiting_for_default_time)
async def process_default_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    user_id = message.from_user.id
    
    if message.text == "/skip":
        settings = await reminder_db.get_user_settings(user_id)
        current_time = settings.get('default_notification_time', '09:00')
        await message.answer(
            f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>{current_time}</b>",
            reply_markup=keyboards.back_to_reminders(),
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    import re
    match = re.match(r'^(\d{1,2}):(\d{2})$', message.text)
    
    if match:
        hour = int(match.group(1))
        minute = int(match.group(2))
        
        if 0 <= hour <= 23 and 0 <= minute <= 59:
            time_str = f"{hour:02d}:{minute:02d}:00"
            
            success = await reminder_db.update_user_settings(
                user_id,
                default_notification_time=time_str
            )
            
            if success:
                await message.answer(
                    f"‚úÖ <b>–í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:</b> {hour:02d}:{minute:02d}\n\n"
                    "–¢–µ–ø–µ—Ä—å –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è.",
                    reply_markup=keyboards.back_to_reminders(),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                    reply_markup=keyboards.back_to_reminders(),
                    parse_mode="HTML"
                )
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode="HTML"
            )
            return
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>09:00</code> –∏–ª–∏ <code>18:30</code>",
            parse_mode="HTML"
        )
        return
    
    await state.clear()

@router.callback_query(F.data == "setting_advance_time")
async def set_advance_time(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    settings = await reminder_db.get_user_settings(user_id)
    current_advance = settings.get('advance_notification', 10)
    
    await callback.message.edit_text(
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_advance} –º–∏–Ω—É—Ç</b>\n\n"
        "–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        reply_markup=keyboards.advance_time_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("advance_"))
async def process_advance_time(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    minutes = int(callback.data.replace("advance_", ""))
    user_id = callback.from_user.id
    
    success = await reminder_db.update_user_settings(
        user_id,
        advance_notification=minutes
    )
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>\n\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ <b>{minutes} –º–∏–Ω—É—Ç</b> –¥–æ —Å–æ–±—ã—Ç–∏—è.",
            reply_markup=keyboards.back_to_reminders(),
            parse_mode="HTML"
        )
        await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)