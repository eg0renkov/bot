from aiogram import Router, F
from aiogram.types import CallbackQuery
from utils.openai_client import openai_client
from database.vector_memory import vector_memory
import os

router = Router()

@router.callback_query(F.data == "quick_voice")
async def quick_voice_handler(callback: CallbackQuery):
    """–û–∑–≤—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ —ç–º–æ–¥–∑–∏
        message_text = callback.message.text or callback.message.caption or ""
        
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        import re
        clean_text = re.sub(r'<[^>]+>', '', message_text)
        clean_text = re.sub(r'[ü§ñüìùüí≠‚ú®üéØüìäüîçüí°‚ö°üöÄüé®üåüüí´üé≠üé™üé®üéØ]', '', clean_text)
        clean_text = clean_text.replace('–ú–æ–π –æ—Ç–≤–µ—Ç:', '').replace('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', '').strip()
        
        if not clean_text or len(clean_text) < 10:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è", show_alert=True)
            return
        
        if len(clean_text) > 800:
            clean_text = clean_text[:800] + "..."
        
        await callback.answer("üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        voice_response = await openai_client.text_to_speech(clean_text)
        
        if voice_response:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            voice_file_path = f"temp_voice_{callback.from_user.id}.mp3"
            with open(voice_file_path, 'wb') as f:
                f.write(voice_response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            from aiogram.types import FSInputFile
            voice_file = FSInputFile(voice_file_path)
            await callback.message.answer_voice(voice_file, caption="üé§ –û–∑–≤—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(voice_file_path):
                os.remove(voice_file_path)
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, TTS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data == "quick_save")
async def quick_save_handler(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –∑–Ω–∞–Ω–∏—è"""
    try:
        message_text = callback.message.text or callback.message.caption or ""
        user_id = callback.from_user.id
        
        if not message_text or len(message_text.strip()) < 10:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        import re
        clean_text = re.sub(r'<[^>]+>', '', message_text)
        clean_text = clean_text.replace('–ú–æ–π –æ—Ç–≤–µ—Ç:', '').replace('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', '').strip()
        
        if vector_memory:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å
            await vector_memory.save_to_knowledge_base(
                user_id, 
                "–í–∞–∂–Ω—ã–π –æ—Ç–≤–µ—Ç AI", 
                clean_text, 
                importance=2.0
            )
            await callback.answer("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å!")
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            import json
            import os
            from datetime import datetime
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            save_dir = f"data/saved_responses"
            os.makedirs(save_dir, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{save_dir}/user_{user_id}_{timestamp}.json"
            
            save_data = {
                "user_id": user_id,
                "timestamp": datetime.now().isoformat(),
                "content": clean_text,
                "type": "ai_response"
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, ensure_ascii=False, indent=2)
            
            await callback.answer("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª!")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data == "quick_retry")
async def quick_retry_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å AI"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(
            "üîÑ <b>–ü–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å AI</b>\n\n"
            "üí° <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n"
            "1Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ</b>\n"
            "2Ô∏è‚É£ <b>–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:</b>\n"
            "   ‚Ä¢ \"–û–±—ä—è—Å–Ω–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É\"\n"
            "   ‚Ä¢ \"–î–∞–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\"\n"
            "   ‚Ä¢ \"–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç\"\n\n"
            "3Ô∏è‚É£ <b>–ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n\n"
            "ü§ñ –Ø –¥–∞–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç!",
            parse_mode="HTML"
        )
        await callback.answer("–ñ–¥—É –≤–∞—à –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ retry: {e}")
        await callback.answer("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")

@router.callback_query(F.data == "quick_more")
async def quick_more_handler(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üìö –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_detailed"),
            InlineKeyboardButton(text="üí° –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã", callback_data="more_examples")
        )
        builder.add(
            InlineKeyboardButton(text="üéØ –û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏", callback_data="more_simple"),
            InlineKeyboardButton(text="üîÄ –ü–æ–∫–∞–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã", callback_data="more_alternatives")
        )
        builder.add(
            InlineKeyboardButton(text="üìñ –î–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="more_sources"),
            InlineKeyboardButton(text="üß© –†–∞–∑–±–µ—Ä–∏ –ø–æ —à–∞–≥–∞–º", callback_data="more_steps")
        )
        builder.adjust(2, 2, 2)
        
        await callback.message.answer(
            "‚ûï <b>–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>\n\n"
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —É–≥–ª—É–±–∏—Ç—å –æ—Ç–≤–µ—Ç:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ more: {e}")
        await callback.answer("‚ûï –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@router.callback_query(F.data == "more_detailed")
async def more_detailed_handler(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
    await callback.message.answer(
        "üìö –ù–∞–ø–∏—à–∏—Ç–µ: <b>\"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ\"</b> –∏–ª–∏ <b>\"–î–∞–π –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π\"</b>\n\n"
        "ü§ñ –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!",
        parse_mode="HTML"
    )
    await callback.answer("–ñ–¥—É –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏")

@router.callback_query(F.data == "more_examples")
async def more_examples_handler(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–º–µ—Ä–æ–≤"""
    await callback.message.answer(
        "üí° –ù–∞–ø–∏—à–∏—Ç–µ: <b>\"–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã\"</b> –∏–ª–∏ <b>\"–ü–æ–∫–∞–∂–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö\"</b>\n\n"
        "ü§ñ –Ø –¥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã!",
        parse_mode="HTML"
    )
    await callback.answer("–ñ–¥—É –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–º–µ—Ä–æ–≤")

@router.callback_query(F.data == "more_simple")
async def more_simple_handler(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
    await callback.message.answer(
        "üéØ –ù–∞–ø–∏—à–∏—Ç–µ: <b>\"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\"</b> –∏–ª–∏ <b>\"–£–ø—Ä–æ—Å—Ç–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ\"</b>\n\n"
        "ü§ñ –Ø –æ–±—ä—è—Å–Ω—é –ø—Ä–æ—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ!",
        parse_mode="HTML"
    )
    await callback.answer("–ñ–¥—É –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–∏–µ")

@router.callback_query(F.data == "more_alternatives")
async def more_alternatives_handler(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    await callback.message.answer(
        "üîÄ –ù–∞–ø–∏—à–∏—Ç–µ: <b>\"–ü–æ–∫–∞–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã\"</b> –∏–ª–∏ <b>\"–ï—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã?\"</b>\n\n"
        "ü§ñ –Ø –ø—Ä–µ–¥–ª–æ–∂—É –¥—Ä—É–≥–∏–µ —Ä–µ—à–µ–Ω–∏—è!",
        parse_mode="HTML"
    )
    await callback.answer("–ñ–¥—É –∑–∞–ø—Ä–æ—Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤")

@router.callback_query(F.data == "more_sources")
async def more_sources_handler(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    await callback.message.answer(
        "üìñ –ù–∞–ø–∏—à–∏—Ç–µ: <b>\"–î–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\"</b> –∏–ª–∏ <b>\"–ì–¥–µ –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?\"</b>\n\n"
        "ü§ñ –Ø –ø–æ–∏—â—É –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏!",
        parse_mode="HTML"
    )
    await callback.answer("–ñ–¥—É –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

@router.callback_query(F.data == "more_steps")
async def more_steps_handler(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞"""
    await callback.message.answer(
        "üß© –ù–∞–ø–∏—à–∏—Ç–µ: <b>\"–†–∞–∑–±–µ—Ä–∏ –ø–æ —à–∞–≥–∞–º\"</b> –∏–ª–∏ <b>\"–ü–æ–∫–∞–∂–∏ –ø–æ—à–∞–≥–æ–≤–æ\"</b>\n\n"
        "ü§ñ –Ø —Ä–∞—Å–ø–∏—à—É –≤—Å—ë –ø–æ—ç—Ç–∞–ø–Ω–æ!",
        parse_mode="HTML"
    )
    await callback.answer("–ñ–¥—É –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä")