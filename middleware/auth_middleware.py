from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
from utils.auth import auth_manager
from aiogram.utils.keyboard import InlineKeyboardBuilder

class AuthMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        user_id = None
        if hasattr(event, 'from_user') and event.from_user:
            user_id = event.from_user.id
        
        if not user_id:
            # –ù–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return await handler(event, data)
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        allowed_without_auth = {
            '/start',
            'enter_token',
            'access_help', 
            'cancel_auth'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        needs_auth = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º
        if isinstance(event, Message):
            state = data.get('state')
            if state:
                current_state = await state.get_state()
                if current_state and 'waiting_for_token' in current_state:
                    needs_auth = False  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞
            
            if event.text and any(event.text.startswith(cmd) for cmd in ['/start']):
                needs_auth = False
        elif isinstance(event, CallbackQuery):
            if event.data in allowed_without_auth:
                needs_auth = False
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if not needs_auth or auth_manager.is_user_authorized(user_id):
            return await handler(event, data)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        user_name = event.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîë –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞", callback_data="enter_token")
        builder.button(text="‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø?", callback_data="access_help")
        
        user_greeting = f"{user_name}, " if user_name != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" else ""
        unauthorized_message = (
            f"üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            f"‚ùå <b>{user_greeting}–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n"
            f"ü§ñ <b>–≠—Ç–æ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫ –∑–∞—â–∏—â–µ–Ω —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            f"üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n"
            f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ —Ç–æ–∫–µ–Ω–æ–º"
        )
        
        if isinstance(event, Message):
            try:
                await event.answer(
                    unauthorized_message,
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
        elif isinstance(event, CallbackQuery):
            try:
                await event.message.edit_text(
                    unauthorized_message,
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
                await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        print(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞: user_id={user_id}, username=@{event.from_user.username}, name={user_name}")
        
        # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º handler - –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return None