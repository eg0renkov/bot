#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import asyncio
import sys
import os
sys.path.append('.')

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è email –∫–æ–º–∞–Ω–¥
async def test_email_extraction():
    print("=== –¢–ï–°–¢ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∫–æ–º–∞–Ω–¥ ===")
    
    from handlers.messages import extract_email_info
    
    test_cases = [
        "–Ω–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ alexlesley01@yandex.ru –æ –ø–æ–¥–æ—Ä–æ–∂–∞–Ω–∏–∏ —Å—ã—Ä–∞",
        "–æ—Ç–ø—Ä–∞–≤—å –ø–∏—Å—å–º–æ test@example.com –æ–± –≤–∞–∂–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ",
        "–ø–∏—Å—å–º–æ manager@company.ru –æ –ø—Ä–æ–µ–∫—Ç–µ"
    ]
    
    for test_text in test_cases:
        try:
            result = await extract_email_info(test_text, "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            print(f"‚úÖ '{test_text}' -> {result}")
        except Exception as e:
            print(f"‚ùå '{test_text}' -> –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
def test_temp_emails():
    print("\n=== –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º ===")
    
    from utils.temp_emails import temp_emails
    
    try:
        email_id = temp_emails.create_email(
            user_id=123456,
            to_email="test@example.com", 
            subject="–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ",
            body="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"
        )
        print(f"‚úÖ –ü–∏—Å—å–º–æ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {email_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å—å–º–∞
        email_data = temp_emails.get_email(email_id)
        if email_data:
            print(f"‚úÖ –ü–∏—Å—å–º–æ –ø–æ–ª—É—á–µ–Ω–æ: {email_data['subject']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ")
            
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
        temp_emails.delete_email(email_id)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —É–¥–∞–ª–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞: {e}")

# –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è email
async def test_email_connection():
    print("\n=== –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è email ===")
    
    from utils.email_sender import email_sender
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
        user_id = 1224080736
        can_send = await email_sender.can_send_email(user_id)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å email: {can_send}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = 999999999
        can_send = await email_sender.can_send_email(user_id)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å email: {can_send}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è email: {e}")

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def test_calendar_extraction():
    print("\n=== –¢–ï–°–¢ 4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ===")
    
    from handlers.messages import extract_calendar_command
    
    test_cases = [
        "–¥–æ–±–∞–≤—å —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ 23 –≤—Å—Ç—Ä–µ—á–∞ —Å –∞—Ä—Ç–µ–º–æ–º",
        "–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00",
        "—Å–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –æ–±–µ–¥ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏"
    ]
    
    for test_text in test_cases:
        try:
            result = await extract_calendar_command(test_text)
            print(f"‚úÖ '{test_text}' -> {result}")
        except Exception as e:
            print(f"‚ùå '{test_text}' -> –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def test_keyboards():
    print("\n=== –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ===")
    
    from utils.keyboards import keyboards
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        main_menu = keyboards.main_menu()
        print(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ: {type(main_menu)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        email_confirm = keyboards.email_confirm_menu("test123")
        print(f"‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {type(email_confirm)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
        full_menu = keyboards.full_menu()
        print(f"‚úÖ –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ: {type(full_menu)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def run_all_tests():
    print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–û–¢–ê")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    await test_email_extraction()
    test_temp_emails()
    await test_email_connection()
    await test_calendar_extraction()
    test_keyboards()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    asyncio.run(run_all_tests())