"""
–ú–æ–¥—É–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
"""
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from database.reminders import ReminderDB

logger = logging.getLogger(__name__)

class CalendarReminderSync:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
        self.reminder_db = ReminderDB()
    
    async def sync_calendar_event(
        self,
        user_id: int,
        event_title: str,
        event_time: datetime,
        event_description: Optional[str] = None,
        advance_minutes: int = 15,
        create_reminder: bool = True
    ) -> Optional[int]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            event_title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            event_time: –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
            event_description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            advance_minutes: –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å
            create_reminder: –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ None
        """
        if not create_reminder:
            return None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            existing_reminders = await self.reminder_db.get_user_reminders(user_id)
            event_title_lower = event_title.lower()
            
            for reminder in existing_reminders:
                if (event_title_lower in reminder.get('title', '').lower() or 
                    reminder.get('title', '').lower() in event_title_lower):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç, —Å—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–º
                    from datetime import timedelta
                    reminder_time = reminder.get('remind_at')
                    if isinstance(reminder_time, str):
                        from datetime import datetime
                        reminder_time = datetime.fromisoformat(reminder_time.replace('Z', '+00:00'))
                    
                    if reminder_time and abs((event_time - reminder_time).total_seconds()) < 300:  # 5 –º–∏–Ω—É—Ç
                        logger.info(f"–ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event_title}")
                        return None
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from utils.user_settings import user_settings as usr_settings
            settings = usr_settings.get_user_settings(user_id)
            reminder_settings = settings.get('reminders', {})
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ
            advance_time = reminder_settings.get('advance_time', advance_minutes)
            notify_at_event = reminder_settings.get('notify_at_event', False)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            remind_at = event_time - timedelta(minutes=advance_time)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ —Å–æ–±—ã—Ç–∏—è –≤ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            time_to_event_minutes = int((event_time - remind_at).total_seconds() / 60)
            
            reminder_id = await self.reminder_db.create_reminder(
                user_id=user_id,
                title=f"üìÖ –°–∫–æ—Ä–æ: {event_title}",
                description=f"–°–æ–±—ã—Ç–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {time_to_event_minutes} –º–∏–Ω—É—Ç\n{event_description or ''}",
                remind_at=remind_at,
                repeat_type='none',
                repeat_interval=0
            )
            
            if reminder_id:
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if notify_at_event:
                at_event_id = await self.reminder_db.create_reminder(
                    user_id=user_id,
                    title=f"üéØ –ù–∞—á–∞–ª–æ—Å—å: {event_title}",
                    description=f"–°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!\n{event_description or ''}",
                    remind_at=event_time,
                    repeat_type='none',
                    repeat_interval=0
                )
                
                if at_event_id:
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è {at_event_id}")
            
            return reminder_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return None
    
    async def create_recurring_event_reminder(
        self,
        user_id: int,
        event_title: str,
        event_time: datetime,
        repeat_type: str = 'weekly',
        repeat_days: Optional[List[str]] = None,
        event_description: Optional[str] = None
    ) -> Optional[int]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            event_title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            event_time: –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            repeat_type: –¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (daily, weekly, monthly)
            repeat_days: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            event_description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = await self.reminder_db.get_user_settings(user_id)
            advance_time = settings.get('advance_notification', 15)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            remind_at = event_time - timedelta(minutes=advance_time)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder_id = await self.reminder_db.create_reminder(
                user_id=user_id,
                title=f"üìÖ {event_title}",
                description=f"–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ\n{event_description or ''}",
                remind_at=remind_at,
                repeat_type=repeat_type,
                repeat_interval=1,
                repeat_days=repeat_days
            )
            
            if reminder_id:
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id}")
            
            return reminder_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return None
    
    async def sync_all_calendar_events(
        self,
        user_id: int,
        events: List[Dict[str, Any]]
    ) -> int:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            events: –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        created_count = 0
        
        for event in events:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                title = event.get('summary', '–°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
                description = event.get('description', '')
                
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
                start_time = event.get('start')
                if not start_time:
                    continue
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ datetime
                if isinstance(start_time, str):
                    event_time = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                elif isinstance(start_time, dict):
                    # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar
                    date_time = start_time.get('dateTime') or start_time.get('date')
                    if date_time:
                        event_time = datetime.fromisoformat(date_time.replace('Z', '+00:00'))
                    else:
                        continue
                else:
                    event_time = start_time
                
                # –î–µ–ª–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è timezone-aware –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                from datetime import timezone
                now_aware = datetime.now(timezone.utc)
                
                # –ï—Å–ª–∏ event_time –Ω–µ –∏–º–µ–µ—Ç timezone, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω—ã–º
                if event_time.tzinfo is None:
                    # –°—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
                    moscow_tz = timezone(timedelta(hours=3))
                    event_time = event_time.replace(tzinfo=moscow_tz)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
                if event_time < now_aware:
                    logger.info(f"Skipping past event: {title} at {event_time}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ
                recurrence = event.get('recurrence')
                if recurrence:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ
                    repeat_type = self._parse_recurrence(recurrence)
                    reminder_id = await self.create_recurring_event_reminder(
                        user_id=user_id,
                        event_title=title,
                        event_time=event_time,
                        repeat_type=repeat_type,
                        event_description=description
                    )
                else:
                    # –û–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    reminder_id = await self.sync_calendar_event(
                        user_id=user_id,
                        event_title=title,
                        event_time=event_time,
                        event_description=description
                    )
                
                if reminder_id:
                    created_count += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                continue
        
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {created_count} —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
        return created_count
    
    def _parse_recurrence(self, recurrence: Any) -> str:
        """
        –ü–∞—Ä—Å–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        
        Args:
            recurrence: –ü—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            
        Returns:
            –¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        if isinstance(recurrence, list):
            rule = recurrence[0] if recurrence else ''
        else:
            rule = str(recurrence)
        
        rule_lower = rule.lower()
        
        if 'daily' in rule_lower:
            return 'daily'
        elif 'weekly' in rule_lower:
            return 'weekly'
        elif 'monthly' in rule_lower:
            return 'monthly'
        elif 'yearly' in rule_lower:
            return 'yearly'
        else:
            return 'none'
    
    async def sync_calendar_to_reminders(self, user_id: int, token_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            token_data: –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—Å–æ–¥–µ—Ä–∂–∏—Ç app_password –∏ username)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
            from handlers.yandex_integration import YandexCalendar
            from datetime import datetime, timedelta
            
            # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ token_data
            logger.info(f"Token data keys: {list(token_data.keys())}")
            logger.info(f"Token data content: {token_data}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            app_password = token_data.get("app_password")
            username = token_data.get("username") or token_data.get("email")
            
            logger.info(f"App password found: {bool(app_password)}")
            logger.info(f"Username found: {bool(username)}")
            
            if not app_password:
                return {
                    "success": False,
                    "error": "–ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "events_processed": 0,
                    "reminders_created": 0
                }
            
            if not username:
                return {
                    "success": False,
                    "error": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email",
                    "events_processed": 0,
                    "reminders_created": 0
                }
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar = YandexCalendar(app_password, username)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π
            start_date = datetime.now()
            end_date = start_date + timedelta(days=30)
            
            events = await calendar.get_events(
                start_date.strftime('%Y-%m-%dT%H:%M:%S'),
                end_date.strftime('%Y-%m-%dT%H:%M:%S')
            )
            
            if not events:
                return {
                    "success": True,
                    "events_processed": 0,
                    "reminders_created": 0,
                    "message": "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
                }
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            reminders_created = await self.sync_all_calendar_events(user_id, events)
            
            return {
                "success": True,
                "events_processed": len(events),
                "reminders_created": reminders_created,
                "message": f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {reminders_created} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ {len(events)} —Å–æ–±—ã—Ç–∏–π"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return {
                "success": False,
                "error": str(e),
                "events_processed": 0,
                "reminders_created": 0
            }

    async def remove_event_reminders(self, user_id: int, event_id: str) -> int:
        """
        –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            event_id: ID —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reminders = await self.reminder_db.get_user_reminders(user_id)
            
            deleted_count = 0
            for reminder in reminders:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —Å–æ–±—ã—Ç–∏–µ–º
                # (—Å–æ–¥–µ—Ä–∂–∏—Ç ID —Å–æ–±—ã—Ç–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
                reminder_title = reminder.get('title', '').lower()
                reminder_desc = reminder.get('description', '').lower()
                
                if (reminder_title.startswith('üìÖ') or 
                    event_id.lower() in reminder_desc or
                    any(word in reminder_title for word in event_id.lower().split('_'))):
                    success = await self.reminder_db.delete_reminder(reminder['id'])
                    if success:
                        deleted_count += 1
                        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder['id']} –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
            
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
            return deleted_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
            return 0

    async def remove_calendar_reminders(self, user_id: int) -> int:
        """
        –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reminders = await self.reminder_db.get_user_reminders(user_id)
            
            deleted_count = 0
            for reminder in reminders:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                if reminder.get('title', '').startswith('üìÖ'):
                    success = await self.reminder_db.delete_reminder(reminder['id'])
                    if success:
                        deleted_count += 1
            
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            return deleted_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return 0