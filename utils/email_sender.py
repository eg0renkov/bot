import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Optional
import asyncio
from database.user_tokens import user_tokens

class YandexEmailSender:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å SMTP"""
    
    def __init__(self):
        self.smtp_server = "smtp.yandex.ru"
        self.smtp_port = 587
    
    async def send_email(self, user_id: int, to_email: str, subject: str, body: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ SMTP
            smtp_data = await user_tokens.get_user_info(user_id, "email_smtp")
            if smtp_data and smtp_data.get('email') and smtp_data.get('password'):
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ SMTP
                from utils.email_sender_real import real_email_sender
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ SMTP
                email = smtp_data.get('email')
                password = smtp_data.get('password')
                
                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SMTP
                    test_result = await real_email_sender.test_connection(email, password)
                    
                    if test_result['success']:
                        # SMTP —Ä–∞–±–æ—Ç–∞–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                        return await real_email_sender.send_email(user_id, to_email, subject, body)
                    elif test_result.get('suggestion') == 'smtp_blocked':
                        # SMTP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                        print("‚ö†Ô∏è SMTP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏")
                        from utils.email_sender_web import web_email_sender
                        return await web_email_sender.simulate_send(email, to_email, subject, body)
                    else:
                        # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ SMTP
                        print(f"‚ùå –û—à–∏–±–∫–∞ SMTP: {test_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        return False
                        
                except Exception as smtp_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SMTP: {smtp_error}")
                    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                    result = await real_email_sender.send_email(user_id, to_email, subject, body)
                    if not result:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                        print("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏")
                        from utils.email_sender_web import web_email_sender
                        return await web_email_sender.simulate_send(email, to_email, subject, body)
                    return result
            
            # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ OAuth
            user_info = await user_tokens.get_user_info(user_id, "mail")
            if not user_info:
                return False
            
            from_email = user_info.get('default_email')
            if not from_email:
                return False
            
            # –î–ª—è OAuth –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É (—Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ API)
            return await self._send_via_api_mock(from_email, to_email, subject, body)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")
            return False
    
    async def _send_via_api_mock(self, from_email: str, to_email: str, subject: str, body: str) -> bool:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)"""
        print(f"üìß –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
        print(f"–û—Ç: {from_email}")
        print(f"–ö–æ–º—É: {to_email}")
        print(f"–¢–µ–º–∞: {subject}")
        print(f"–¢–µ–∫—Å—Ç: {body}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        await asyncio.sleep(1)
        return True
        
        # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ:
        """
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMTP
            msg = MIMEMultipart()
            msg['From'] = from_email
            msg['To'] = to_email
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(from_email, "–≤–∞—à_–ø–∞—Ä–æ–ª—å_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            text = msg.as_string()
            server.sendmail(from_email, to_email, text)
            server.quit()
            
            print(f"‚úÖ –ü–∏—Å—å–º–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")
            return False
        """
    
    async def can_send_email(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–∞"""
        print(f"üîç CAN_SEND_EMAIL: Checking for user {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ OAuth –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∏ SMTP
        has_oauth = await user_tokens.is_connected(user_id, "mail")
        print(f"üîç CAN_SEND_EMAIL: OAuth connected: {has_oauth}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        smtp_data = await user_tokens.get_user_info(user_id, "email_smtp")
        has_smtp = smtp_data and smtp_data.get('email') and smtp_data.get('password')
        print(f"üîç CAN_SEND_EMAIL: SMTP data exists: {smtp_data is not None}")
        print(f"üîç CAN_SEND_EMAIL: SMTP connected: {has_smtp}")
        
        result = has_oauth or has_smtp
        print(f"‚úÖ CAN_SEND_EMAIL: Final result: {result}")
        return result

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
email_sender = YandexEmailSender()