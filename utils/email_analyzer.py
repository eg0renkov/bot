from typing import List, Dict, Optional
from utils.openai_client import openai_client


class EmailAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∏—Å–µ–º —Å –ø–æ–º–æ—â—å—é AI"""
    
    async def analyze_emails_summary(self, emails: List[Dict], user_name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º –∏ —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏
        
        Args:
            emails: –°–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º —Å –ø–æ–ª—è–º–∏ sender, subject, body, date
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–∏—Å–µ–º
        """
        if not emails:
            return "üì≠ –ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        emails_text = self._prepare_emails_for_analysis(emails)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
        analysis_prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏.

–ü–ò–°–¨–ú–ê:
{emails_text}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (–º–∞–∫—Å–∏–º—É–º 200 —Å–ª–æ–≤) —Å —Ç–∞–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

üìä **–ö–†–ê–¢–ö–ò–ô –ê–ù–ê–õ–ò–ó –í–•–û–î–Ø–©–ò–•**

üî¢ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º
- –ü–µ—Ä–∏–æ–¥ (–æ—Ç —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –¥–æ —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ)

üìà **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:**
- –ü–µ—Ä–µ—á–∏—Å–ª–∏ 2-3 –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∏—Å–µ–º

üë• **–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏:**
- –ù–∞–∑–æ–≤–∏ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π

‚ö° **–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
- –í—ã–¥–µ–ª–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∏–ª–∏ —Å—Ä–æ—á–Ω—ã–µ –ø–∏—Å—å–º–∞
- –£–∫–∞–∂–∏ –Ω–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
- –î–∞–π 1-2 —Å–æ–≤–µ—Ç–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–º–∏ –ø–∏—Å—å–º–∞–º–∏

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω.
"""

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
            messages = [
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø–∏—Å—å–º–∞ –∏ –¥–∞–µ—à—å –ø–æ–ª–µ–∑–Ω—ã–µ –≤—ã–≤–æ–¥—ã."},
                {"role": "user", "content": analysis_prompt}
            ]
            
            analysis = await openai_client.chat_completion(messages)
            return analysis
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)[:100]}..."
    
    def _prepare_emails_for_analysis(self, emails: List[Dict]) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∏—Å—å–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ AI"""
        emails_text = ""
        
        for i, email in enumerate(emails, 1):
            sender = email.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
            subject = email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
            body = email.get('body', email.get('preview', ''))
            date = email.get('date', '')
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            if body and len(body) > 300:
                body = body[:300] + "..."
            
            emails_text += f"""
–ü–ò–°–¨–ú–û {i}:
–û—Ç: {sender}
–¢–µ–º–∞: {subject}
–î–∞—Ç–∞: {date}
–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {body or '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}

---
"""
        
        return emails_text
    
    async def get_email_insights(self, emails: List[Dict]) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–∏—Å—å–º–∞–º
        
        Returns:
            Dict —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏: urgent_count, spam_likelihood, sentiment, etc.
        """
        if not emails:
            return {
                'urgent_count': 0,
                'spam_likelihood': 'low',
                'sentiment': 'neutral',
                'total_emails': 0
            }
        
        urgent_keywords = ['—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ', 'urgent', 'asap', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ']
        spam_keywords = ['—Å–∫–∏–¥–∫–∞', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–≤—ã–∏–≥—Ä—ã—à', '–∞–∫—Ü–∏—è', '–ø—Ä–æ–º–æ']
        
        urgent_count = 0
        spam_count = 0
        
        for email in emails:
            subject = email.get('subject', '').lower()
            body = email.get('body', '').lower()
            content = subject + ' ' + body
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –ø–∏—Å–µ–º
            if any(keyword in content for keyword in urgent_keywords):
                urgent_count += 1
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–ø–∞–º–∞
            if any(keyword in content for keyword in spam_keywords):
                spam_count += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ø–∞–º–∞
        spam_ratio = spam_count / len(emails) if emails else 0
        if spam_ratio > 0.3:
            spam_likelihood = 'high'
        elif spam_ratio > 0.1:
            spam_likelihood = 'medium'
        else:
            spam_likelihood = 'low'
        
        return {
            'urgent_count': urgent_count,
            'spam_likelihood': spam_likelihood,
            'spam_count': spam_count,
            'total_emails': len(emails),
            'unique_senders': len(set(email.get('sender', '') for email in emails))
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
email_analyzer = EmailAnalyzer()