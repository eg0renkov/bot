import smtplib
import ssl
import socket
import imaplib
import email
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import decode_header
from typing import Dict, List, Optional, Tuple
import asyncio
import re
from datetime import datetime
from database.user_tokens import user_tokens

class RealEmailSender:
    """–†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ SMTP/IMAP"""
    
    def __init__(self):
        self.smtp_server = "smtp.yandex.ru"
        self.smtp_port = 587
        self.imap_server = "imap.yandex.ru"
        self.imap_port = 993
    
    async def test_connection(self, email: str, password: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å
            loop = asyncio.get_event_loop()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º IMAP (—á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ SMTP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
            imap_result = await loop.run_in_executor(None, self._test_imap, email, password)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º SMTP
            smtp_result = await loop.run_in_executor(None, self._test_smtp, email, password)
            
            # –ï—Å–ª–∏ SMTP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ IMAP —Ä–∞–±–æ—Ç–∞–µ—Ç - —ç—Ç–æ —á–∞—Å—Ç–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            if imap_result['success'] and not smtp_result['success']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–æ –ª–∏ —ç—Ç–æ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ—Ä—Ç–æ–≤
                if 'timeout' in smtp_result.get('error', '').lower() or '10060' in smtp_result.get('error', ''):
                    return {
                        'success': False,
                        'smtp': smtp_result,
                        'imap': imap_result,
                        'message': 'SMTP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º',
                        'error': 'SMTP –ø–æ—Ä—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∫–∞ - –Ω–µ—Ç.',
                        'suggestion': 'smtp_blocked'
                    }
            
            return {
                'success': smtp_result['success'] and imap_result['success'],
                'smtp': smtp_result,
                'imap': imap_result,
                'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ' if smtp_result['success'] and imap_result['success'] else '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}',
                'message': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'
            }
    
    def _test_smtp(self, email: str, password: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        server = None
        try:
            print(f"DEBUG: –¢–µ—Å—Ç–∏—Ä—É–µ–º SMTP –¥–ª—è {email}")
            print(f"DEBUG: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {self.smtp_server}:{self.smtp_port}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Yandex
            server = smtplib.SMTP(self.smtp_server, self.smtp_port, timeout=45)
            server.set_debuglevel(0)  # –û—Ç–∫–ª—é—á–∞–µ–º debug –¥–ª—è production
            
            print("DEBUG: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º STARTTLS...")
            # –í–∫–ª—é—á–∞–µ–º TLS —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            context = ssl.create_default_context()
            server.starttls(context=context)
            
            print("DEBUG: –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è...")
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            server.login(email, password)
            
            print("DEBUG: SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            server.quit()
            
            return {
                'success': True,
                'message': 'SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'
            }
            
        except smtplib.SMTPAuthenticationError as e:
            error_msg = f"–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}"
            print(f"DEBUG: SMTP Auth Error: {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'message': '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
            }
        except smtplib.SMTPConnectError as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}"
            print(f"DEBUG: SMTP Connect Error: {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'message': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
            }
        except smtplib.SMTPServerDisconnected as e:
            error_msg = f"–°–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {str(e)}"
            print(f"DEBUG: SMTP Disconnect Error: {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'message': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ'
            }
        except smtplib.SMTPException as e:
            error_msg = f'SMTP –æ—à–∏–±–∫–∞: {str(e)}'
            print(f"DEBUG: SMTP Exception: {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'message': '–û—à–∏–±–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞'
            }
        except socket.timeout:
            error_msg = '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É'
            print(f"DEBUG: SMTP Timeout: {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'message': '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
            }
        except socket.gaierror as e:
            error_msg = f'–û—à–∏–±–∫–∞ DNS: {str(e)}'
            print(f"DEBUG: DNS Error: {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'message': '–ü—Ä–æ–±–ª–µ–º–∞ —Å DNS'
            }
        except ConnectionRefusedError:
            error_msg = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (–ø–æ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)'
            print(f"DEBUG: Connection Refused: {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'message': '–ü–æ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º'
            }
        except Exception as e:
            error_msg = f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
            print(f"DEBUG: Unknown Error: {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'message': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'
            }
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            try:
                if server:
                    server.quit()
            except:
                pass
    
    def _test_imap(self, email: str, password: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –¥–ª—è IMAP
            import socket
            socket.setdefaulttimeout(30)
            
            mail = imaplib.IMAP4_SSL(self.imap_server, self.imap_port)
            mail.login(email, password)
            mail.logout()
            
            return {
                'success': True,
                'message': 'IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'
            }
            
        except imaplib.IMAP4.error as e:
            return {
                'success': False,
                'error': f'IMAP –æ—à–∏–±–∫–∞: {str(e)}',
                'message': '–û—à–∏–±–∫–∞ IMAP —Å–µ—Ä–≤–µ—Ä–∞'
            }
        except Exception as e:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}',
                'message': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'
            }
    
    async def send_email(self, user_id: int, to_email: str, subject: str, body: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            email_data = await user_tokens.get_user_info(user_id, "email_smtp")
            if not email_data:
                print("‚ùå Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
            
            from_email = email_data.get('email')
            password = email_data.get('password')
            
            if not from_email or not password:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None, 
                self._send_email_sync, 
                from_email, password, to_email, subject, body
            )
            
            if result:
                print(f"‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {from_email} -> {to_email}")
                print(f"üìù –¢–µ–º–∞: {subject}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")
            return False
    
    def _send_email_sync(self, from_email: str, password: str, to_email: str, subject: str, body: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart('alternative')
            msg['From'] = from_email
            msg['To'] = to_email
            msg['Subject'] = subject
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–∏ HTML –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            text_part = MIMEText(body, 'plain', 'utf-8')
            msg.attach(text_part)
            
            # HTML –≤–µ—Ä—Å–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            html_body = body.replace('\n', '<br>')
            html_part = MIMEText(f'<div style="font-family: Arial; font-size: 14px;">{html_body}</div>', 'html', 'utf-8')
            msg.attach(html_part)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            server = smtplib.SMTP(self.smtp_server, self.smtp_port, timeout=30)
            server.starttls()
            server.login(from_email, password)
            
            text = msg.as_string()
            server.sendmail(from_email, to_email, text)
            server.quit()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    async def get_inbox_emails(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            email_data = await user_tokens.get_user_info(user_id, "email_smtp")
            if not email_data:
                return []
            
            email_addr = email_data.get('email')
            password = email_data.get('password')
            
            if not email_addr or not password:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            emails = await loop.run_in_executor(
                None, 
                self._get_emails_sync, 
                email_addr, password, limit
            )
            
            return emails
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º: {e}")
            return []
    
    def _get_emails_sync(self, email_addr: str, password: str, limit: int) -> List[Dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å timeout
            import socket
            socket.setdefaulttimeout(30)
            
            mail = imaplib.IMAP4_SSL(self.imap_server, self.imap_port)
            mail.login(email_addr, password)
            mail.select('INBOX')
            
            # –ò—â–µ–º –ø–∏—Å—å–º–∞
            status, messages = mail.search(None, 'ALL')
            if status != 'OK':
                return []
            
            email_ids = messages[0].split()
            emails = []
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∏—Å—å–º–∞
            for email_id in email_ids[-limit:]:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                    status, msg_data = mail.fetch(email_id, '(RFC822)')
                    if status != 'OK':
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
                    msg = email.message_from_bytes(msg_data[0][1])
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    subject = self._decode_header(msg.get('Subject', ''))
                    sender = self._decode_header(msg.get('From', ''))
                    date = msg.get('Date', '')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
                    body = self._get_email_body(msg)
                    
                    emails.append({
                        'id': email_id.decode(),
                        'subject': subject,
                        'sender': sender,
                        'date': date,
                        'body': body[:500] + '...' if len(body) > 500 else body,
                        'full_body': body
                    })
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {email_id}: {e}")
                    continue
            
            mail.logout()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            return list(reversed(emails))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º: {e}")
            return []
    
    def _decode_header(self, header: str) -> str:
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞"""
        if not header:
            return ''
        
        try:
            decoded_parts = decode_header(header)
            result = ''
            
            for part, encoding in decoded_parts:
                if isinstance(part, bytes):
                    if encoding:
                        result += part.decode(encoding)
                    else:
                        result += part.decode('utf-8', errors='ignore')
                else:
                    result += part
            
            return result
            
        except Exception:
            return str(header)
    
    def _get_email_body(self, msg) -> str:
        """–ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"""
        try:
            if msg.is_multipart():
                for part in msg.walk():
                    content_type = part.get_content_type()
                    content_disposition = str(part.get("Content-Disposition"))
                    
                    if content_type == "text/plain" and "attachment" not in content_disposition:
                        body = part.get_payload(decode=True)
                        if body:
                            charset = part.get_content_charset() or 'utf-8'
                            return body.decode(charset, errors='ignore')
            else:
                body = msg.get_payload(decode=True)
                if body:
                    charset = msg.get_content_charset() or 'utf-8'
                    return body.decode(charset, errors='ignore')
            
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}"
    
    async def search_emails(self, user_id: int, query: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–∏—Å–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞
            all_emails = await self.get_inbox_emails(user_id, limit=50)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É
            filtered_emails = []
            query_lower = query.lower()
            
            for email_data in all_emails:
                # –ò—â–µ–º –≤ —Ç–µ–º–µ, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∏ —Ç–µ–∫—Å—Ç–µ
                if (query_lower in email_data.get('subject', '').lower() or
                    query_lower in email_data.get('sender', '').lower() or
                    query_lower in email_data.get('full_body', '').lower()):
                    
                    filtered_emails.append(email_data)
                
                if len(filtered_emails) >= limit:
                    break
            
            return filtered_emails
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º: {e}")
            return []
    
    async def can_send_email(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–∞"""
        try:
            email_data = await user_tokens.get_user_info(user_id, "email_smtp")
            return email_data is not None and email_data.get('email') and email_data.get('password')
        except:
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
real_email_sender = RealEmailSender()