"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ SERP API
"""
import asyncio
import aiohttp
import logging
from typing import List, Dict, Any, Optional
from config.settings import settings

logger = logging.getLogger(__name__)

class WebSearcher:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ SERP API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞"""
        self.api_key = settings.SERP_API_KEY
        self.base_url = "https://serpapi.com/search.json"
        self.session = None
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    async def search(
        self,
        query: str,
        num_results: int = 10,
        location: str = "Russia",
        language: str = "ru"
    ) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            num_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            location: –õ–æ–∫–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
            language: –Ø–∑—ã–∫ –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        """
        if not self.api_key:
            logger.error("SERP API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return []
        
        try:
            params = {
                'q': query,
                'api_key': self.api_key,
                'engine': 'google',
                'num': num_results,
                'location': location,
                'hl': language,
                'gl': 'ru'
            }
            
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            async with self.session.get(self.base_url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return self._parse_results(data)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ SERP API: {response.status}")
                    return []
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def _parse_results(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SERP API
        
        Args:
            data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        results = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        organic_results = data.get('organic_results', [])
        for result in organic_results:
            parsed_result = {
                'title': result.get('title', ''),
                'link': result.get('link', ''),
                'snippet': result.get('snippet', ''),
                'source': 'organic',
                'position': result.get('position', 0)
            }
            results.append(parsed_result)
        
        # –ù–æ–≤–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        news_results = data.get('news_results', [])
        for result in news_results:
            parsed_result = {
                'title': result.get('title', ''),
                'link': result.get('link', ''),
                'snippet': result.get('snippet', ''),
                'source': 'news',
                'date': result.get('date', ''),
                'thumbnail': result.get('thumbnail', '')
            }
            results.append(parsed_result)
        
        # –û—Ç–≤–µ—Ç—ã (featured snippets)
        answer_box = data.get('answer_box')
        if answer_box:
            parsed_result = {
                'title': answer_box.get('title', ''),
                'link': answer_box.get('link', ''),
                'snippet': answer_box.get('snippet', ''),
                'source': 'answer_box',
                'type': answer_box.get('type', '')
            }
            results.insert(0, parsed_result)  # –°—Ç–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ
        
        # –ë–ª–æ–∫ –∑–Ω–∞–Ω–∏–π
        knowledge_graph = data.get('knowledge_graph')
        if knowledge_graph:
            parsed_result = {
                'title': knowledge_graph.get('title', ''),
                'description': knowledge_graph.get('description', ''),
                'source': 'knowledge_graph',
                'type': knowledge_graph.get('type', ''),
                'thumbnail': knowledge_graph.get('thumbnail', '')
            }
            results.insert(0, parsed_result)  # –°—Ç–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ
        
        return results
    
    async def search_news(
        self,
        query: str,
        num_results: int = 5,
        language: str = "ru"
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            num_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            language: –Ø–∑—ã–∫ –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        if not self.api_key:
            logger.error("SERP API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return []
        
        try:
            params = {
                'q': query,
                'api_key': self.api_key,
                'engine': 'google_news',
                'num': num_results,
                'hl': language,
                'gl': 'ru'
            }
            
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            async with self.session.get(self.base_url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return self._parse_news_results(data)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ SERP API (–Ω–æ–≤–æ—Å—Ç–∏): {response.status}")
                    return []
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    def _parse_news_results(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        results = []
        
        news_results = data.get('news_results', [])
        for result in news_results:
            parsed_result = {
                'title': result.get('title', ''),
                'link': result.get('link', ''),
                'snippet': result.get('snippet', ''),
                'source': result.get('source', ''),
                'date': result.get('date', ''),
                'thumbnail': result.get('thumbnail', ''),
                'position': result.get('position', 0)
            }
            results.append(parsed_result)
        
        return results
    
    def format_search_results(self, results: List[Dict[str, Any]], max_results: int = 5, max_length: int = 3500) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not results:
            return "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        formatted_text = "üåê **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞:**\n\n"
        
        for i, result in enumerate(results[:max_results], 1):
            title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:80]
            snippet = result.get('snippet', '')[:200]
            link = result.get('link', '')
            source = result.get('source', 'web')
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            emoji_map = {
                'answer_box': 'üí°',
                'knowledge_graph': 'üìö',
                'news': 'üì∞',
                'organic': 'üîó'
            }
            emoji = emoji_map.get(source, 'üîó')
            
            formatted_text += f"{emoji} **{i}. {title}**\n"
            
            if snippet:
                formatted_text += f"   {snippet}\n"
            
            if link and len(link) < 100:
                formatted_text += f"   üîó [{link}]({link})\n"
            
            formatted_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_count = len(results)
        if total_count > max_results:
            formatted_text += f"_–ü–æ–∫–∞–∑–∞–Ω–æ {max_results} –∏–∑ {total_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤_\n"
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(formatted_text) > max_length:
            formatted_text = formatted_text[:max_length-100] + "\n\n...\n\nüìù _–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∫—Ä–∞—â–µ–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram_"
        
        return formatted_text
    
    async def quick_search(self, query: str) -> str:
        """
        –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        async with self:
            results = await self.search(query, num_results=5)
            return self.format_search_results(results)
    
    async def search_and_summarize(self, query: str, context: str = "") -> str:
        """
        –ü–æ–∏—Å–∫ —Å AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            –°—É–º–º–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        async with self:
            results = await self.search(query, num_results=3)
            
            if not results:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            search_info = ""
            for result in results:
                title = result.get('title', '')
                snippet = result.get('snippet', '')
                search_info += f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {snippet}\n\n"
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenAI –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
            summary = f"üîç **–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** {query}\n\n"
            summary += "üìã **–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:**\n"
            
            for i, result in enumerate(results[:3], 1):
                title = result.get('title', '')[:60]
                snippet = result.get('snippet', '')[:150]
                summary += f"\n**{i}. {title}**\n{snippet}...\n"
            
            return summary

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
web_searcher = WebSearcher()