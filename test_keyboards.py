#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–µ–∑ aiogram
"""

class MockInlineKeyboardButton:
    def __init__(self, text, callback_data):
        self.text = text
        self.callback_data = callback_data

class MockInlineKeyboardBuilder:
    def __init__(self):
        self.buttons = []
    
    def add(self, *buttons):
        self.buttons.extend(buttons)
    
    def adjust(self, *args):
        pass
    
    def as_markup(self):
        return {"inline_keyboard": [[{"text": btn.text, "callback_data": btn.callback_data}] for btn in self.buttons]}

def test_keyboard_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("Testing keyboard creation...")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–∫ –≤ –∫–æ–¥–µ
        builder = MockInlineKeyboardBuilder()
        builder.add(
            MockInlineKeyboardButton(text="Save without testing", callback_data="email_setup_force_save"),
            MockInlineKeyboardButton(text="Try again", callback_data="email_setup_save"),
            MockInlineKeyboardButton(text="Cancel", callback_data="email_setup_cancel")
        )
        builder.adjust(1, 1, 1)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_markup = builder.as_markup()
        
        print("Keyboard created successfully:")
        print(f"Button count: {len(keyboard_markup['inline_keyboard'])}")
        
        for i, row in enumerate(keyboard_markup['inline_keyboard']):
            button = row[0]
            print(f"  {i+1}. {button['text']} -> {button['callback_data']}")
        
        print("\nKeyboard test PASSED!")
        
        # –¢–µ—Å—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ - –≥–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞!
        print(f"\nKeyboard type: {type(keyboard_markup)}")
        print(f"Is dict: {isinstance(keyboard_markup, dict)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ aiogram
        if 'inline_keyboard' in keyboard_markup:
            print("Structure OK: has inline_keyboard key")
            if isinstance(keyboard_markup['inline_keyboard'], list):
                print("Structure OK: inline_keyboard is list")
            else:
                print(f"ERROR: inline_keyboard is {type(keyboard_markup['inline_keyboard'])}")
        else:
            print("ERROR: no inline_keyboard key")
        
        return True
        
    except Exception as e:
        print(f"ERROR creating keyboard: {e}")
        return False

def test_error_message():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ...")
    
    try:
        error_msg = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: timeout"
        details = "Connection timed out after 30 seconds"
        
        error_text = f"""‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>

üîß <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {error_msg[:200]}

üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö

üÜò <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–ù–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ—á—Ç—ã" """

        if details:
            error_text += f"\n\nüîç <b>–î–µ—Ç–∞–ª–∏:</b> {details[:100]}"
        
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:")
        print(error_text)
        print("\n‚úÖ –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def main():
    print("=" * 50)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–† –ò –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 50)
    
    test1 = test_keyboard_creation()
    test2 = test_error_message()
    
    print("\n" + "=" * 50)
    if test1 and test2:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä.")
    print("=" * 50)

if __name__ == "__main__":
    main()